// { "framework": "Vue" }
var mws;

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://local.m.immomo.com:8100/web";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 21);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("/* Momo Bridge v4.0.2\n * repository: https://git.wemomo.com/mmf/bridge\n * Syntax compatible with ES5\n *\n * This API is used for momo_webview with app version 5.6+.\n * No guarantee or warranty for any other purpose of usage.\n */\nvar BRIDGE_VERSION = '4.1.2'\n\nvar last_modified = 'Modified: 2016-10-11_11:30:29'\nvar uniqueId = 1;\nif(window.mm){\n    console.error('Do not initialize bridge more than once')\n}\n\nfunction getUrlParam(name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n    var r = window.location.search.substr(1).match(reg);\n    if (r != null) return decodeURIComponent(r[2]);\n    return null;\n}\n\n// Init with window object\nvar ua = window.navigator.userAgent,\n    is_m_webview = /momoWebView/.test(ua),\n    is_o_webview = /(molive|momoGame)WebView/.test(ua),\n    is_webview = is_m_webview || is_o_webview,\n    is_ios = /iP(ad|hone|od)/.test(ua),\n    is_android = /[aA]ndroid/.test(ua),\n    is_wp = /Windows Phone/.test(ua),\n    is_mobile = /Mobile/.test(ua),\n    is_pc = !is_mobile,\n    is_unknown = (!is_android && !is_ios && !is_wp),\n    is_weixin = /MicroMessenger/.test(ua),\n    is_hasNet = /netType\\/(\\d)/.exec(ua),\n    is_wifi = !is_webview || !is_hasNet ? false : is_hasNet[1] == '1' ? true : false,\n    version = /momoWebView\\/(\\d+)\\.(\\d+)\\.?(\\d)?/.exec(ua) || ['', '0', '0'],\n    momo_main_version = parseInt(version[1]),\n    momo_minor_version = parseInt(version[2]),\n    momo_version = version[1] + '.' + version[2] + (version[3] ? ('.' + version[3]) : ''),\n    arr_build_version = /(ios|android)\\/(\\d+)\\(/.exec(ua),\n    build_version = !!arr_build_version ? arr_build_version[2] : 0,\n    platform = is_ios ? 'ios' : is_android ? 'android' : is_wp ? 'win_phone' : 'unknown',\n    debug = 0,\n    query = {}\n    //,is_mk = ((location.href.indexOf('_bid')>-1&&momo_version>=6.5&&is_ios)||(/momoKit/.test(ua))&&is_android )? true:false ///momoKit/.test(ua)\n    ,\n    is_offline = (getUrlParam('_offline') == 1) ? true : false;\n\ntry {\n    location.search.substr(1).split(\"&\").forEach(function(item) {\n        (item.split(\"=\")[0] in query) ? query[item.split(\"=\")[0]].push(item.split(\"=\")[1]): query[item.split(\"=\")[0]] = [item.split(\"=\")[1], ]\n    })\n} catch (err) {}\n/*\n 应用于 ios 原陌陌web与客户端通信\n */\nfunction loadWebViewBridge() {\n    if (window.WebViewJavascriptBridge) {\n        return\n    }\n    var messagingIframe\n    var sendMessageQueue = []\n    var receiveMessageQueue = []\n    var messageHandlers = {}\n\n    var CUSTOM_PROTOCOL_SCHEME = 'wvjbscheme'\n    var QUEUE_HAS_MESSAGE = '__WVJB_QUEUE_MESSAGE__'\n\n    var responseCallbacks = {}\n    var uniqueId = 1\n\n    function _createQueueReadyIframe(doc) {\n        messagingIframe = doc.createElement('iframe')\n        messagingIframe.style.display = 'none'\n        messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE\n        doc.documentElement.appendChild(messagingIframe)\n    }\n\n    function init(messageHandler) {\n        if (WebViewJavascriptBridge._messageHandler) {\n            throw new Error('WebViewJavascriptBridge.init called twice')\n        }\n        WebViewJavascriptBridge._messageHandler = messageHandler\n        var receivedMessages = receiveMessageQueue\n        receiveMessageQueue = null\n        for (var i = 0; i < receivedMessages.length; i++) {\n            _dispatchMessageFromObjC(receivedMessages[i])\n        }\n    }\n\n    function send(data, responseCallback) {\n        _doSend({\n            data: data\n        }, responseCallback)\n    }\n\n    function registerHandler(handlerName, handler) {\n        messageHandlers[handlerName] = handler\n    }\n\n    function callHandler(handlerName, data, responseCallback) {\n        _doSend({\n            handlerName: handlerName,\n            data: data\n        }, responseCallback)\n    }\n\n    function _doSend(message, responseCallback) {\n        if (responseCallback) {\n            var callbackId = 'cb_' + (uniqueId++) + '_' + new Date().getTime()\n            responseCallbacks[callbackId] = responseCallback\n            message['callbackId'] = callbackId\n        }\n        sendMessageQueue.push(message)\n        messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE\n    }\n\n    function _fetchQueue() {\n        var messageQueueString = JSON.stringify(sendMessageQueue)\n        sendMessageQueue = []\n        return messageQueueString\n    }\n\n    function _dispatchMessageFromObjC(messageJSON) {\n        setTimeout(function _timeoutDispatchMessageFromObjC() {\n            var message = JSON.parse(messageJSON)\n            var messageHandler\n            var responseCallback\n\n            if (message.responseId) {\n                responseCallback = responseCallbacks[message.responseId]\n                if (!responseCallback) {\n                    return;\n                }\n                responseCallback(message.responseData)\n                delete responseCallbacks[message.responseId]\n            } else {\n                if (message.callbackId) {\n                    var callbackResponseId = message.callbackId\n                    responseCallback = function(responseData) {\n                        _doSend({\n                            responseId: callbackResponseId,\n                            responseData: responseData\n                        })\n                    }\n                }\n\n                var handler = WebViewJavascriptBridge._messageHandler\n                if (message.handlerName) {\n                    handler = messageHandlers[message.handlerName]\n                }\n\n                try {\n                    handler(message.data, responseCallback)\n                } catch (exception) {\n                    if (typeof console != 'undefined') {\n                        console.log(\"WebViewJavascriptBridge: WARNING: javascript handler threw.\", message, exception)\n                    }\n                }\n            }\n        })\n    }\n\n    function _handleMessageFromObjC(messageJSON) {\n        if (receiveMessageQueue) {\n            receiveMessageQueue.push(messageJSON)\n        } else {\n            _dispatchMessageFromObjC(messageJSON)\n        }\n    }\n\n    window.WebViewJavascriptBridge = {\n        init: init,\n        send: send,\n        registerHandler: registerHandler,\n        callHandler: callHandler,\n        _fetchQueue: _fetchQueue,\n        _handleMessageFromObjC: _handleMessageFromObjC\n    }\n\n    var doc = document\n    _createQueueReadyIframe(doc)\n    init(function(message) {\n        this.log('ios initial')\n    })\n}\n\nfunction extend(target, source) {\n    for (var p in source) {\n        if (source.hasOwnProperty(p)) {\n            target[p] = source[p];\n        }\n    }\n    return target;\n};\n\n/*\n 通过版本号判断版本支持\n mm.compare('6.2.4') >= 0\n */\nfunction compare(ver) {\n    if (is_o_webview) return 1;\n\n    var version;\n    var verType = typeof ver;\n    if (verType == 'string' || verType == 'number') {\n        version = ver + '';\n    } else if (verType == 'object') {\n        version = ver[platform];\n    } else {\n        console.log('不支持的版本号');\n        return;\n    }\n    var now = momo_version.split('.');\n    var tar = version.toString().split('.');\n    var len = Math.max(tar.length, now.length);\n    try {\n        for (var i = 0; i < len; i++) {\n            var l = isFinite(now[i]) && Number(now[i]) || 0,\n                r = isFinite(tar[i]) && Number(tar[i]) || 0;\n            if (l < r) {\n                /* 目标版本低于当前版本 */\n                return -1;\n            } else if (l > r) {\n                /* 目标版本大于当前版本 */\n                return 1;\n            }\n        }\n    } catch (e) {\n        return -1;\n    }\n    /* 相等 */\n    return 0;\n}\n\nfunction checkMK() {\n    if (is_android) {\n        if (/momoKit/.test(ua)) {\n            return true;\n        }\n    } else if (is_ios) {\n        if (build_version >= 451 || is_o_webview) { // 6.5.4 添加了momokit\n            if (/momoKit/.test(ua)) return true;\n        } else if (compare('6.5') >= 0 && location.href.indexOf('_bid') > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n/*\n 兼容原陌陌、mk与客户端通信\n */\nvar prepare = {\n        _native_obj: null,\n        _adapter: null,\n        NOOP: function() {},\n        init: function() {\n            /*\n             初始化旧版bridge\n             */\n            if (is_webview) {\n                switch (platform) {\n                    case 'ios':\n                        loadWebViewBridge();\n                        this._native_obj = window.WebViewJavascriptBridge;\n                        this._adapter = this.iOSAdapter();\n                        break;\n                    case 'android':\n                        if (window.aobj) { //4.1后 存在aobj\n                            this._native_obj = window.aobj;\n                            this._adapter = this.AndroidAdapter();\n                        }\n                        break;\n                    case 'win_phone':\n                        this._adapter = this.WpAdapter();\n                        break;\n                    default:\n                        this._adapter = this.MoAdapter();\n                }\n            } else {\n                this._adapter = this.MoAdapter();\n            }\n        },\n        initMK: function() {\n            /*\n             初始化mk bridge\n             */\n            if (is_ios) {\n                this._adapter = this.iOS_MK_Adapter();\n            } else if (is_android) {\n                this._adapter = this.Android_MK_Adapter();\n            } else {\n                this._adapter = this.MoAdapter();\n            }\n        },\n        MoAdapter: function() {\n            /*\n             默认adapter\n             */\n            return {\n                name: 'basic',\n                invoke: function() {}\n            }\n        },\n        iOSAdapter: function() {\n            /*\n             旧版bridge ios\n             */\n            return {\n                name: 'ios',\n                _NAME: {\n                    'init': 'handleStateInfo',\n                    'closeWindow': 'close',\n                    'callShare': 'showGeneralShare',\n                },\n                _CB: {\n                    'readImage': 'momo_btn_controller_setImageSrc',\n                },\n                invoke: function() {\n                    var args = Array.prototype.slice.apply(arguments)\n                    try {\n\n                        // NOTE: the 'this' is binded to the bridge which is the parent of adpater\n                        var _adp = this._adapter,\n                            __handler, __callback, __cbk\n\n                        // When no param is passed, this will be null not undefined.\n                        if (typeof args[1] == 'undefined') args[1] = '{}'\n                        args.push(this.NOOP)\n\n                        var _orig = args[0];\n                        args[0] = _adp._NAME.hasOwnProperty(args[0]) ? _adp._NAME[args[0]] : args[0]\n\n                        // XXX: doing things on _obj will change args[1] too if args[1] is object\n                        var _obj = (typeof args[1] == 'string') ? JSON.parse(args[1]) : args[1]\n\n                        // registe handler for callback\n                        if (_orig == 'init') {\n                            if (_obj.hasOwnProperty('ui_btn')) {\n                                // We should loop through the buttons parameter to\n                                // change callback name to handler compatible and\n                                // register it.\n\n                                __handler == false\n                                for (var i = 0; i < _obj.ui_btn.buttons.length; i++) {\n                                    if (_obj.ui_btn.buttons[i].param.callback) {\n                                        __callback = _obj.ui_btn.buttons[i].param.callback\n\n                                        this._native_obj.registerHandler(__callback.replace(/\\./g, '_'), function(data) {\n                                            try {\n                                                var cbk = eval(__callback)\n                                                if (cbk && typeof cbk === 'function') {\n                                                    cbk.call(null, data)\n                                                }\n                                            } catch (err) {}\n                                        }.bind(this))\n                                    }\n                                }\n                            }\n                        } else if (_orig == 'callShare' || _orig == 'shareOne') {\n                            __callback = _obj.hasOwnProperty('callback') ? _obj.callback : null\n                            __handler = __callback.replace(/\\./g, '_')\n                        } else {\n                            __callback = _obj.hasOwnProperty('callback') ? _obj.callback : null\n                            __handler = _adp._CB.hasOwnProperty(_orig) ? _adp._CB[_orig] : ''\n                            __handler = (__handler == '') ? ('momo_bridge_' + _orig) : __handler\n                        }\n                        if (__callback && __handler) {\n\n                            this._native_obj.registerHandler(__handler, function(data) {\n                                // We evaluate the callback here, as it's defined in json and\n                                // write in page. No more security issues, only risk of page crashing.\n                                try {\n                                    var cbk = eval(__callback)\n                                    if (cbk && typeof cbk === 'function') {\n                                        if (_orig == 'readImage') {\n                                            cbk.call(null, data.id, data.data, data.size, data.type)\n                                        } else {\n                                            cbk.call(null, data)\n                                        }\n                                    }\n                                } catch (err) {}\n                            }.bind(this))\n                        }\n\n                        this._native_obj.callHandler.apply(null, args)\n\n                    } catch (err) {}\n                }\n            }\n        },\n        AndroidAdapter: function() {\n            /*\n             旧版bridge android\n             */\n            return {\n                name: 'android',\n                invoke: function() {\n                    // XXX: Due to unknow reason, we can not apply inside invoke.\n                    // maybe coz it is a java object\n                    var args = Array.prototype.slice.apply(arguments)\n                    var fn = args.shift()\n                    if (this._native_obj[fn] && typeof this._native_obj[fn] === 'function') {\n                        try {\n                            if (args[0]) {\n                                this._native_obj[fn](args[0])\n                            } else {\n                                this._native_obj[fn]()\n                            }\n                        } catch (err) {}\n                    } else {}\n                }\n            }\n        },\n        WpAdapter: function() {\n            /*\n             旧版bridge win phone\n             */\n            return {\n                name: 'win phone',\n                invoke: function() {\n                    var args = Array.prototype.slice.apply(arguments)\n                    var fn = args.shift()\n\n                    try {\n                        window.external.notify('{\"' + fn + '\": ' + args + '}')\n                    } catch (err) {}\n\n                }\n            }\n        },\n        mkURL: function(module, name, param) {\n            /*\n             mk 拼接url\n             */\n            module = module || \"\";\n            name = name || \"\";\n            param = param || \"{}\";\n\n            return \"mkjsbridge://\" + module + \"/\" + name + \"?param=\" + encodeURIComponent(param);\n        },\n        iOS_MK_Adapter: function() {\n            /*\n             mk ios\n             */\n            var _this = this;\n\n            function creatIframe(url) {\n                var mkfrm = document.createElement('iframe');\n                mkfrm.style.display = 'none';\n                mkfrm.src = url;\n                document.documentElement.appendChild(mkfrm);\n                var returnValue = mm.__RETURN_VALUE;\n                mm.__RETURN_VALUE = undefined;\n\n                mkfrm.parentNode.removeChild(mkfrm);\n                return returnValue;\n            }\n\n            return {\n                name: 'ios',\n                invoke: function(module, name, param) {\n                    var iosObj = window['momokit_' + module];\n                    /*if (iosObj && iosObj[name]) {\n                        iosObj[name](param);\n                    }else{\n                        creatIframe(_this.mkURL(module, name, param))\n                    }*/\n                    creatIframe(_this.mkURL(module, name, param))\n                }\n            }\n        },\n        Android_MK_Adapter: function(url) {\n            /*\n             mk android\n             */\n            var _this = this;\n            if (window.mkAobj) {\n                return {\n                    name: 'android',\n                    invoke: function(module, name, param) {\n                        module = module || \"\";\n                        name = name || \"\";\n                        param = param || \"{}\";\n                        window.mkAobj.bridgejs(module, name, param)\n                    }\n                }\n            }\n            return {\n                name: 'android aobj',\n                invoke: function(module, name, param) {\n                    window.prompt(_this.mkURL(module, name, param));\n                }\n            }\n        }\n    }\n    /*\n     bridge 基础方法\n     旧版bridge、mk均包含的属性和方法\n     */\nvar mm = {\n        version: BRIDGE_VERSION,\n        last_modified: last_modified,\n        is_webview: is_webview, // momo客户端\n        is_o_webview: is_o_webview, // live、game客户端\n        momo_version: momo_version,\n        momo_main_version: momo_main_version,\n        momo_minor_version: momo_minor_version,\n        build_version: build_version,\n        is_wifi: is_wifi,\n        is_weixin: is_weixin,\n        ua: ua,\n        query: query,\n        platform: platform,\n        _callbacks: {},\n        is_mk: checkMK(),\n        is_offline: is_offline,\n        _uniqueId: 1,\n        bid: getUrlParam('_bid') == null ? '' : parseInt(getUrlParam('_bid')),\n        NoneCallback: function() {},\n        // 调取客户端前的公共方法\n        build: function(obj) {\n            /*\n             common: ios 、android 使用同一个配置\n             ios\n             android\n             need_mk: 只有mk webview有此功能\n             version: 开始支持的版本\n             */\n            if (obj.hasOwnProperty('common')) {\n                obj.ios = obj.common;\n                obj.android = obj.common;\n            }\n            if (!obj.hasOwnProperty(platform)) return;\n            var platVoke = obj[platform];\n\n            if (is_m_webview) {\n                if ((obj.need_mk && !mm.is_mk) || (obj.version && compare(obj.version) < 0)) {\n                    var callback = platVoke[platVoke.length - 1];\n                    if (callback && typeof(callback) == 'function') {\n                        callback({\n                            status: '-99',\n                            message: '当前版本不支持此功能，请检查升级'\n                        })\n                        return;\n                    }\n                }\n            }\n\n            if (mm.is_mk) {\n                this.invoke.apply(this, platVoke);\n            } else {\n                platVoke.shift();\n                this.invoke.apply(this, platVoke);\n            }\n        },\n        /*\n        Invoke a function from the adapter\n        invoke 方法，兼容mk 非mk\n        */\n        invoke: function(module, name, param, callback) {\n            // convert to array and remove the first argument as that's the fn string.\n            // NOTE: the callback fn is not in the arguments.\n            var self = this;\n            if (typeof name != 'string') {\n                callback = param;\n                param = name;\n                name = module;\n                module = null;\n            }\n            if (typeof param == 'function') {\n                callback = param;\n                param = {};\n            }\n            if (param) {\n                try {\n                    var _obj = (typeof param == 'string') ? JSON.parse(param) : param\n\n                    if (param.callback && typeof param.callback == 'function') {\n                        _obj.callback = this.createCallback(name, param.callback);\n                    }\n\n                    if (callback && typeof callback == 'function' && typeof _obj.callback == 'undefined') {\n                        _obj.callback = this.createCallback(name, callback);\n                    }\n\n                    param = JSON.stringify(_obj)\n\n                } catch (err) {\n                    return;\n                }\n            }\n            var invokeArr = mm.is_mk ? [module, name, param] : [name, param]\n            prepare._adapter.invoke.apply(prepare, invokeArr);\n        },\n        // 创建callback字符串\n        createCallback: function(name, callback) {\n            var callbackId = '__BRIDGE_CALLBACK__' + (this._uniqueId++) + '_' + new Date().getTime();\n            if (!this._callbacks.hasOwnProperty(name)) {\n                this._callbacks[name] = {};\n            }\n            this._callbacks[name][callbackId] = function() {\n                var args = Array.prototype.slice.apply(arguments);\n                // 处理转义字符\n\n                if (name != 'getItem') {\n                    for (var i = 0; i < args.length; i++) {\n                        try {\n                            args[i] = JSON.parse(args[i]);\n                        } catch (err) {\n\n                        }\n                    }\n                }\n\n                callback.apply(null, args);\n            }\n            return 'mm._callbacks.' + name + '.' + callbackId;\n        },\n        // 事件传递时使用，为兼容直接invoke的调用，放到mm全局\n        fireDocumentEvent: function(type, name, data, origin) {\n            var evt;\n            if (type == 'bridgeEvent') {\n                name = 'be:' + name;\n            }\n\n            evt = document.createEvent('Events');\n            evt.initEvent(name, false, false);\n            evt.name = name;\n            if (data) {\n                try {\n                    evt.data = JSON.parse(data);\n                } catch (err) {\n                    evt.data = data;\n                }\n            }\n            if (origin) {\n                evt.origin = origin;\n            }\n            document.dispatchEvent(evt);\n        },\n        /* \n         通过版本号判断版本支持\n         mm.compare('6.2.4') >= 0\n         */\n        compare: compare,\n        protocol: location.protocol == 'file:' ? 'http:' : location.protocol,\n        host: (function() {\n            if (location.protocol == 'file:') {\n                var _href = location.pathname,\n                    reg = /[oO]ffline\\/\\d+\\/(.*\\.com)/,\n                    aHref = reg.exec(_href);\n                if (!!aHref) {\n                    return reg.exec(_href)[1];\n                }\n            }\n            return location.host;\n        })(),\n        pathname: (function() {\n            if (location.protocol == 'file:') {\n                var _href = location.pathname,\n                    reg = /[oO]ffline\\/\\d+\\/.*\\.com(\\/.*)/,\n                    aHref = reg.exec(_href);\n                if (!!aHref) {\n                    return reg.exec(_href)[1];\n                }\n            }\n            return location.pathname;\n        })(),\n        // NOTE: ready with DOM loaded.\n        ready: function(fn) {\n            if (/complete|loaded|interactive/.test(document.readyState) && document.body) {\n                fn.call(null, this)\n            } else document.addEventListener('DOMContentLoaded', function() {\n                fn.call(null, this)\n            }.bind(this), false)\n            return this\n        }\n    }\n    /*\n     判断是否为mk\n     否－初始化旧版bridge\n     是－初始化mk bridge\n     */\nif (mm.is_mk) {\n    prepare.initMK();\n} else {\n    prepare.init();\n    if ((momo_version < 5.6)) {\n        if (!window.momo_btn_controller) {\n            window.momo_btn_controller = {\n                setImageSrc: function(id, data, size, type) {\n                    if (!data) {\n                        return false\n                    }\n                    document.getElementById(id).src = \"data:image/jpeg;base64,\" + data\n                }\n            }\n        }\n    }\n}\n\nmodule.exports = mm;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("var core = module.exports = { version: '2.5.6' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanM/MWI2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjYnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(4)(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzPzcwNTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzPzkzNWQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcz83N2FhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcz8yNGM4Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexports.default = {};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9BcHAudnVlPzI2Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDxoMT5NV1PmtYvor5XpobXpnaI8L2gxPlxuXHRcdDxwb2x5Z29uPjExMTwvcG9seWdvbj5cblx0XHQ8cmljaFRleHQgdGVsPVwiMTIzMDVcIiA+MTIzMDU8L3JpY2hUZXh0PlxuXG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHN0eWxlPlxuPC9zdHlsZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbn1cbjwvc2NyaXB0PlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBBcHAudnVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFhQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

eval("// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanM/NDVkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcz9kODUwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(27);\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzPzVjZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

eval("// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzP2Y2NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(10);\nvar defined = __webpack_require__(8);\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzPzY5NDYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

eval("var mm = __webpack_require__(0);\n\n__webpack_require__(20);\n__webpack_require__(18);\n__webpack_require__(19);\n\nif(window){\n    window['mm'] = mm;\n}\n\nmodule.exports = mm;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0BmZXMvbW8tYnJpZGdlL3NyYy9icmlkZ2Uuc2ltcGxlLmpzPzY1MmIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1tID0gcmVxdWlyZSgnLi4vbGliL2NvcmUnKTtcblxucmVxdWlyZSgnLi4vbGliL3VpJyk7XG5yZXF1aXJlKCcuLi9saWIvaHR0cCcpO1xucmVxdWlyZSgnLi4vbGliL3N0b3JhZ2UnKTtcblxuaWYod2luZG93KXtcbiAgICB3aW5kb3dbJ21tJ10gPSBtbTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtbTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGZlcy9tby1icmlkZ2Uvc3JjL2JyaWRnZS5zaW1wbGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _assign = __webpack_require__(22);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Entrance for MWS devtools.\n * Note: core runtime is weex instance related\n * @author smyle\n * @date 2017/09/13\n */\n(function () {\n    var __mws_start_ = Date.now(),\n        __mws_dev__ = 'production' !== \"testing\",\n        __mws_data__ = { time: {}, tasks: [] },\n        __mws_modules__ = {},\n        __mws_log_time__ = function __mws_log_time__(tag, category, additionals) {\n        var _additionals;\n        category = category || 'default';\n        __mws_data__.time[category] = __mws_data__.time[category] || {};\n        _additionals = additionals ? __mws_data__.time[category][tag] || {} : null;\n        __mws_data__.time[category] = __mws_data__.time[category] || {};\n        return __mws_data__.time[category][tag] = additionals ? (0, _assign2.default)({}, _additionals, additionals) : Date.now() - __mws_start_;\n    },\n        __mws_set_time__ = function __mws_set_time__(tag, category, time) {\n        category = category || 'default';\n        __mws_data__.time[category][tag] = time;\n    },\n        __mws_get_time__ = function __mws_get_time__(tag, category) {\n        return __mws_data__.time[category][tag];\n    },\n        FixedQueue = function FixedQueue(options) {\n        var queue = [],\n            index = 0,\n            count = 0,\n            fullfilled = false,\n            MAX_TASK_NUM = 100;\n\n        this.push = function (item) {\n            MAX_TASK_NUM <= index && (index = 0, fullfilled = true);\n            queue[index++] = item;\n        };\n\n        // first in first out\n        this.forEach = function (callback) {\n            var i, l;\n\n            if (!callback) {\n                return;\n            }\n\n            if (fullfilled) {\n                for (i = index, l = MAX_TASK_NUM - 1; i <= l; ++i) {\n                    callback(queue[i]);\n                }\n                i = 0, l = index - 1;\n            } else {\n                i = 0, l = index - 1;\n            }\n\n            for (; i <= l; ++i) {\n                callback(queue[i]);\n            }\n        };\n\n        this.getLength = function () {\n            return fullfilled ? MAX_TASK_NUM : index;\n        };\n    },\n        taskQueue = new FixedQueue(),\n        noop = function noop() {};\n\n    mws = {\n        perf: {\n            logTime: function logTime(tag, category) {\n                __mws_log_time__(tag, category);\n            },\n            getData: function getData() {\n                return __mws_data__.time;\n            }\n        },\n        task: {\n            getData: function getData() {\n                return taskQueue;\n            },\n            onSendTask: null\n        }\n    };\n\n    mws.requireModule = function (moduleId) {\n        var weexModule,\n            cachedModule = __mws_modules__[moduleId];\n\n        if (cachedModule) {\n            return cachedModule;\n        }\n\n        weexModule = weex.requireModule(moduleId);\n\n        if ('stream' === moduleId || 'mwsNetwork' === moduleId) {\n            var requestCount = 1;\n            __mws_modules__[moduleId] = cachedModule = (0, _assign2.default)({}, weexModule, {\n                fetch: function fetch(options, callback) {\n                    // var count = requestCount ++,\n                    startTime = Date.now() - __mws_start_, endTime, _callback = function _callback(response) {\n                        requestCount++;\n                        var data = {\n                            end: Date.now() - __mws_start_,\n                            status: response.ok ? 0 : 1,\n                            no: count\n                        };\n\n                        if (__mws_dev__) {\n                            data.options = options;\n                            data.response = response;\n                        }\n\n                        if (requestCount === 2) {\n                            mws.perf.logAfterFirstRequest();\n                        }\n\n                        __mws_log_time__(options.url, 'fetch', data);\n                        return callback.apply(this, arguments);\n                    };\n\n                    if (requestCount === 1) {\n                        mws.perf.logBeforeFirstRequest();\n                    }\n\n                    __mws_log_time__(options.url, 'fetch', { start: startTime });\n                    return weexModule.fetch(options, _callback);\n                }\n            });\n        } else if ('storage' === moduleId) {\n            var storageCount = 1;\n            __mws_modules__[moduleId] = cachedModule = (0, _assign2.default)({}, weexModule, {\n                getItem: function getItem(key, callback) {\n                    var startTime = Date.now() - __mws_start_,\n                        _callback = function _callback(response) {\n                        storageCount++;\n                        if (storageCount === 2) {\n                            mws.perf.logAfterFirstGetStorage();\n                        }\n                        return callback.apply(this, arguments);\n                    };\n                    if (storageCount === 1) {\n                        mws.perf.logBeforeFirstGetStorage();\n                    }\n                    __mws_log_time__(key, 'storage', { start: startTime });\n                    return weexModule.getItem(key, _callback);\n                }\n\n            });\n        } else {\n            cachedModule = weexModule;\n        }\n\n        return cachedModule;\n    };\n\n    mws = (0, _assign2.default)({}, weex, mws);\n\n    'EnterCreated,LeaveCreated,EnterMounted,LeaveMounted,BeforeFirstRequest,AfterFirstRequest,BeforeFirstGetStorage,AfterFirstGetStorage,FirstDataUpdated'.split(',').map(function (e) {\n        mws.perf['log' + e] = function () {\n            __mws_log_time__(e);\n        };\n    });\n\n    var os = weex.document.taskCenter.send;\n\n    weex.document.taskCenter.send = function () {\n        var result = os.apply(this, arguments);\n        taskQueue.push(arguments);\n        return result;\n    };\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__);\n/* harmony namespace reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__) if([\"default\",\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_992092a6_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__ = __webpack_require__(53);\nvar disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(54)\n}\nvar normalizeComponent = __webpack_require__(52)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue___default.a,\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_992092a6_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/pages/App.vue\"\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-992092a6\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-992092a6\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvQXBwLnZ1ZT9iZjNiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtOTkyMDkyYTZcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIilcbn1cbnZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9BcHAudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9BcHAudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQgX192dWVfdGVtcGxhdGVfXyBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi05OTIwOTJhNlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0FwcC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL3BhZ2VzL0FwcC52dWVcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtOTkyMDkyYTZcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi05OTIwOTJhNlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wYWdlcy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.5.16\n * (c) 2014-2018 Evan You\n * Released under the MIT License.\n */\n\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it... e.g.\n * PhantomJS 1.x. Technically we don't need this anymore since native bind is\n * now more performant in most browsers, but removing it would be breaking for\n * code that was able to run in PhantomJS 1.x, so this must be kept for\n * backwards compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\n\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"testing\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"testing\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n})\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  if (!getter && arguments.length === 2) {\n    val = obj[key];\n  }\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (\"testing\" !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (\"testing\" !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"testing\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (\"testing\" !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"testing\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      \"testing\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    \"testing\" !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"testing\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (\"testing\" !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (\"testing\" !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      \"testing\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"testing\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (\"testing\" !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (\"testing\" !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$1 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$1; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"testing\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"testing\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      \"testing\" !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (\"testing\" !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (\"testing\" !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (\"testing\" !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (\"testing\" !== 'production' && slotNodes._rendered) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"testing\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      \"testing\" !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    hooks[key] = componentVNodeHooks[key];\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"testing\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (\"testing\" !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    // reset _rendered flag on slots for duplicate slot check\n    if (true) {\n      for (var key in vm.$slots) {\n        // $flow-disable-line\n        vm.$slots[key]._rendered = false;\n      }\n    }\n\n    if (_parentVnode) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (true) {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (\"testing\" !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (\"testing\" !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (\"testing\" !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue (options) {\n  if (\"testing\" !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (\"testing\" !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (\"testing\" !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n}\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.5.16';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\n\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"testing\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n}\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (true) {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (\"testing\" !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (true) {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (true) {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (true) {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (\"testing\" !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (\"testing\" !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (true) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n}\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n]\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n}\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n}\n\n/*  */\n\n/*  */\n\n\n\n\n\n\n\n\n\n// add a raw attr (use this in preTransforms)\n\n\n\n\n\n\n\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\n\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\n\n/*  */\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n}\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n}\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (\"testing\" !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (\"testing\" !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {}\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n]\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"testing\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n}\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n}\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (\"testing\" !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (\"testing\" !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n}\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (true) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n}\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n}\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        \"testing\" !== 'production' &&\n        \"testing\" !== 'test' &&\n        isChrome\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (\"testing\" !== 'production' &&\n      \"testing\" !== 'test' &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nmodule.exports = Vue;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(59).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {\nconsole.log('START WEEX VUE RENDER: 0.12.27, Build 2017-12-11 16:41.');\n\n\n'use strict';\n\nfunction __$styleInject(css, returnValue) {\n  if (typeof document === 'undefined') {\n    return returnValue;\n  }\n  css = css || '';\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n  head.appendChild(style);\n  \n  if (style.styleSheet){\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n  return returnValue;\n}\n__$styleInject(\"/*\\n * Licensed to the Apache Software Foundation (ASF) under one\\n * or more contributor license agreements.  See the NOTICE file\\n * distributed with this work for additional information\\n * regarding copyright ownership.  The ASF licenses this file\\n * to you under the Apache License, Version 2.0 (the\\n * \\\"License\\\"); you may not use this file except in compliance\\n * with the License.  You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n * KIND, either express or implied.  See the License for the\\n * specific language governing permissions and limitations\\n * under the License.\\n */\\n \\n.weex-root,\\n.weex-root * {\\n  color: initial;\\n  cursor: initial;\\n  direction: initial;\\n  font: initial;\\n  font-family: initial;\\n  font-size: initial;\\n  font-style: initial;\\n  font-variant: initial;\\n  font-weight: initial;\\n  line-height: initial;\\n  text-align: initial;\\n  text-indent: initial;\\n  visibility: initial;\\n  white-space: initial;\\n  word-spacing: initial;\\n  font-family: BlinkMacSystemFont, 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\\n}\\n\\n.weex-root,\\n.weex-root *,\\n.weex-root *::before,\\n.weex-root *::after {\\n  box-sizing: border-box;\\n  -webkit-text-size-adjust: none;\\n  -moz-text-size-adjust: none;\\n  -ms-text-size-adjust: none;\\n  text-size-adjust: none;\\n}\\n\\n.weex-root a,\\n.weex-root button,\\n.weex-root [role=\\\"button\\\"],\\n.weex-root input,\\n.weex-root label,\\n.weex-root select,\\n.weex-root textarea {\\n  -ms-touch-action: manipulation;\\n      touch-action: manipulation;\\n}\\n\\n.weex-root p,\\n.weex-root ol,\\n.weex-root ul,\\n.weex-root dl {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.weex-root li {\\n  list-style: none;\\n}\\n\\n.weex-root figure {\\n  margin: 0;\\n}\\n\\n.weex-root textarea {\\n  resize: none;\\n}\\n\\n/* show no scroll bar. */\\n::-webkit-scrollbar {\\n  display: none;\\n}\\n\",undefined);\n\n__$styleInject(\"/*\\n * Licensed to the Apache Software Foundation (ASF) under one\\n * or more contributor license agreements.  See the NOTICE file\\n * distributed with this work for additional information\\n * regarding copyright ownership.  The ASF licenses this file\\n * to you under the Apache License, Version 2.0 (the\\n * \\\"License\\\"); you may not use this file except in compliance\\n * with the License.  You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n * KIND, either express or implied.  See the License for the\\n * specific language governing permissions and limitations\\n * under the License.\\n */\\n \\n.weex-root * {\\n  border-width: 0;\\n  border-color: inherit;\\n  border-style: solid;\\n}\\n\\n.weex-flex-ct {\\n  display: -webkit-box;\\n  display: -webkit-flex;\\n  display: -moz-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n}\\n\\n.weex-ct {\\n  box-sizing: border-box;\\n  display: -webkit-box;\\n  display: -webkit-flex;\\n  display: -moz-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  position: relative;\\n  -webkit-box-orient: vertical;\\n  -webkit-flex-direction: column;\\n  -moz-box-orient: vertical;\\n  -moz-box-direction: normal;\\n  -ms-flex-direction: column;\\n  flex-direction: column;\\n  -webkit-flex-shrink: 0;\\n  -ms-flex-negative: 0;\\n  flex-shrink: 0;\\n  -webkit-flex-grow: 0;\\n  -moz-box-flex: 0;\\n  -ms-flex-grow: 0;\\n  flex-grow: 0;\\n  -webkit-flex-basis: auto;\\n  -ms-flex-preferred-size: auto;\\n  flex-basis: auto;\\n  -webkit-box-align: stretch;\\n  -webkit-align-items: stretch;\\n  -moz-box-align: stretch;\\n  -ms-flex-align: stretch;\\n  align-items: stretch;\\n  -webkit-align-content: flex-start;\\n  -ms-flex-line-pack: start;\\n  align-content: flex-start;\\n  border: 0 solid black;\\n  margin: 0;\\n  padding: 0;\\n  min-width: 0;\\n}\\n\\n.weex-ct.horizontal {\\n  -webkit-box-orient: horizontal;\\n  -webkit-flex-direction: row;\\n  -moz-box-orient: horizontal;\\n  -moz-box-direction: normal;\\n  -ms-flex-direction: row;\\n  flex-direction: row;\\n}\\n\\n.weex-el {\\n  display: block;\\n  box-sizing: border-box;\\n  position: relative;\\n  -webkit-flex-shrink: 0;\\n  -ms-flex-negative: 0;\\n  flex-shrink: 0;\\n  -webkit-flex-grow: 0;\\n  -moz-box-flex: 0;\\n  -ms-flex-grow: 0;\\n  flex-grow: 0;\\n  -webkit-flex-basis: auto;\\n  -ms-flex-preferred-size: auto;\\n  flex-basis: auto;\\n  border: 0 solid black;\\n  margin: 0;\\n  padding: 0;\\n  min-width: 0;\\n}\\n\\n.weex-ios-sticky {\\n  position: -webkit-sticky !important;\\n  position: sticky !important;\\n  z-index: 9999;\\n  top: 0;\\n}\\n\\n.weex-fixed {\\n  position: fixed;\\n  z-index: 1;\\n}\\n\\n.weex-sticky {\\n  position: fixed;\\n  top: 0;\\n  z-index: 9999;\\n}\\n\",undefined);\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable */\n\nvar isInitialized = false;\n\n// major events supported:\n//   panstart\n//   panmove\n//   panend\n//   swipe\n//   longpress\n// extra events supported:\n//   dualtouchstart\n//   dualtouch\n//   dualtouchend\n//   tap\n//   doubletap\n//   pressend\n\nvar doc = window.document;\nvar docEl = doc.documentElement;\nvar slice = Array.prototype.slice;\nvar gestures = {};\nvar lastTap = null;\n\n/**\n * find the closest common ancestor\n * if there's no one, return null\n *\n * @param  {Element} el1 first element\n * @param  {Element} el2 second element\n * @return {Element}     common ancestor\n */\nfunction getCommonAncestor(el1, el2) {\n  var el = el1;\n  while (el) {\n    if (el.contains(el2) || el == el2) {\n      return el\n    }\n    el = el.parentNode;\n  }\n  return null\n}\n\n/**\n * fire a HTMLEvent\n *\n * @param  {Element} element which element to fire a event on\n * @param  {string}  type    type of event\n * @param  {object}  extra   extra data for the event object\n */\nfunction fireEvent(element, type, extra) {\n  var event = doc.createEvent('HTMLEvents');\n  event.initEvent(type, true, true);\n\n  if (typeof extra === 'object') {\n    for (var p in extra) {\n      event[p] = extra[p];\n    }\n  }\n\n  /**\n   * A flag to distinguish with other events with the same name generated\n   * by another library in the same page.\n   */ \n  event._for = 'weex';\n\n  element.dispatchEvent(event);\n}\n\n/**\n * calc the transform\n * assume 4 points ABCD on the coordinate system\n * > rotate：angle rotating from AB to CD\n * > scale：scale ratio from AB to CD\n * > translate：translate shift from A to C\n *\n * @param  {number} x1 abscissa of A\n * @param  {number} y1 ordinate of A\n * @param  {number} x2 abscissa of B\n * @param  {number} y2 ordinate of B\n * @param  {number} x3 abscissa of C\n * @param  {number} y3 ordinate of C\n * @param  {number} x4 abscissa of D\n * @param  {number} y4 ordinate of D\n * @return {object}    transform object like\n *   {rotate, scale, translate[2], matrix[3][3]}\n */\nfunction calc(x1, y1, x2, y2, x3, y3, x4, y4) {\n  var rotate = Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y2 - y1, x2 - x1);\n  var scale = Math.sqrt((Math.pow(y4 - y3, 2)\n    + Math.pow(x4 - x3, 2)) / (Math.pow(y2 - y1, 2)\n    + Math.pow(x2 - x1, 2)));\n  var translate = [\n    x3\n    - scale * x1 * Math.cos(rotate)\n    + scale * y1 * Math.sin(rotate),\n    y3\n    - scale * y1 * Math.cos(rotate)\n    - scale * x1 * Math.sin(rotate)];\n\n  return {\n    rotate: rotate,\n    scale: scale,\n    translate: translate,\n    matrix: [\n      [scale * Math.cos(rotate), -scale * Math.sin(rotate), translate[0]],\n      [scale * Math.sin(rotate), scale * Math.cos(rotate), translate[1]],\n      [0, 0, 1]\n    ]\n  }\n}\n\n/**\n * take over the touchstart events. Add new touches to the gestures.\n * If there is no previous records, then bind touchmove, tochend\n * and touchcancel events.\n * new touches initialized with state 'tapping', and within 500 milliseconds\n * if the state is still tapping, then trigger gesture 'press'.\n * If there are two touche points, then the 'dualtouchstart' is triggerd. The\n * node of the touch gesture is their cloest common ancestor.\n *\n * @event\n * @param  {event} event\n */\nfunction touchstartHandler(event) {\n\n  if (Object.keys(gestures).length === 0) {\n    docEl.addEventListener('touchmove', touchmoveHandler, false);\n    docEl.addEventListener('touchend', touchendHandler, false);\n    docEl.addEventListener('touchcancel', touchcancelHandler, false);\n  }\n\n  // record every touch\n  for (var i = 0; i < event.changedTouches.length; i++) {\n    var touch = event.changedTouches[i];\n    var touchRecord = {};\n\n    for (var p in touch) {\n      touchRecord[p] = touch[p];\n    }\n\n    var gesture = {\n      startTouch: touchRecord,\n      startTime: Date.now(),\n      status: 'tapping',\n      element: event.srcElement || event.target,\n      pressingHandler: setTimeout(function (element, touch) {\n        return function () {\n          if (gesture.status === 'tapping') {\n            gesture.status = 'pressing';\n\n            fireEvent(element, 'longpress', {\n              // add touch data for weex\n              touch: touch,\n              touches: event.touches,\n              changedTouches: event.changedTouches,\n              touchEvent: event\n            });\n          }\n\n          clearTimeout(gesture.pressingHandler);\n          gesture.pressingHandler = null;\n        }\n      }(event.srcElement || event.target, event.changedTouches[i]), 500)\n    };\n    gestures[touch.identifier] = gesture;\n  }\n\n  if (Object.keys(gestures).length == 2) {\n    var elements = [];\n\n    for (var p in gestures) {\n      elements.push(gestures[p].element);\n    }\n\n    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchstart', {\n      touches: slice.call(event.touches),\n      touchEvent: event\n    });\n  }\n}\n\n/**\n * take over touchmove events, and handle pan and dual related gestures.\n *\n * 1. traverse every touch point：\n * > if 'tapping' and the shift is over 10 pixles, then it's a 'panning'.\n * 2. if there are two touch points, then calc the tranform and trigger\n *   'dualtouch'.\n *\n * @event\n * @param  {event} event\n */\nfunction touchmoveHandler(event) {\n  for (var i = 0; i < event.changedTouches.length; i++) {\n    var touch = event.changedTouches[i];\n    var gesture = gestures[touch.identifier];\n\n    if (!gesture) {\n      return\n    }\n\n    if (!gesture.lastTouch) {\n      gesture.lastTouch = gesture.startTouch;\n    }\n    if (!gesture.lastTime) {\n      gesture.lastTime = gesture.startTime;\n    }\n    if (!gesture.velocityX) {\n      gesture.velocityX = 0;\n    }\n    if (!gesture.velocityY) {\n      gesture.velocityY = 0;\n    }\n    if (!gesture.duration) {\n      gesture.duration = 0;\n    }\n\n    var time =  Date.now() - gesture.lastTime;\n    var vx = (touch.clientX - gesture.lastTouch.clientX) / time;\n    var vy = (touch.clientY - gesture.lastTouch.clientY) / time;\n\n    var RECORD_DURATION = 70;\n    if (time > RECORD_DURATION) {\n      time = RECORD_DURATION;\n    }\n    if (gesture.duration + time > RECORD_DURATION) {\n      gesture.duration = RECORD_DURATION - time;\n    }\n\n    gesture.velocityX = (gesture.velocityX * gesture.duration + vx * time)\n      / (gesture.duration + time);\n    gesture.velocityY = (gesture.velocityY * gesture.duration + vy * time)\n      / (gesture.duration + time);\n    gesture.duration += time;\n\n    gesture.lastTouch = {};\n\n    for (var p in touch) {\n      gesture.lastTouch[p] = touch[p];\n    }\n    gesture.lastTime = Date.now();\n\n    var displacementX = touch.clientX - gesture.startTouch.clientX;\n    var displacementY = touch.clientY - gesture.startTouch.clientY;\n    var distance = Math.sqrt(Math.pow(displacementX, 2)\n      + Math.pow(displacementY, 2));\n    var isVertical = !(Math.abs(displacementX) > Math.abs(displacementY));\n    var direction = isVertical\n      ? displacementY >= 0 ? 'down' : 'up'\n      : displacementX >= 0 ? 'right' : 'left';\n\n    // magic number 10: moving 10px means pan, not tap\n    if ((gesture.status === 'tapping' || gesture.status === 'pressing')\n        && distance > 10) {\n      gesture.status = 'panning';\n      gesture.isVertical = isVertical;\n      gesture.direction = direction;\n\n      fireEvent(gesture.element, 'panstart', {\n        touch: touch,\n        touches: event.touches,\n        changedTouches: event.changedTouches,\n        touchEvent: event,\n        isVertical: gesture.isVertical,\n        direction: direction\n      });\n    }\n\n    if (gesture.status === 'panning') {\n      gesture.panTime = Date.now();\n\n      fireEvent(gesture.element, 'panmove', {\n        displacementX: displacementX,\n        displacementY: displacementY,\n        touch: touch,\n        touches: event.touches,\n        changedTouches: event.changedTouches,\n        touchEvent: event,\n        isVertical: gesture.isVertical,\n        direction: direction\n      });\n    }\n  }\n\n  if (Object.keys(gestures).length == 2) {\n    var position = [];\n    var current = [];\n    var elements = [];\n    var transform;\n\n    for (var i = 0; i < event.touches.length; i++) {\n      var touch = event.touches[i];\n      var gesture = gestures[touch.identifier];\n      position.push([gesture.startTouch.clientX, gesture.startTouch.clientY]);\n      current.push([touch.clientX, touch.clientY]);\n    }\n\n    for (var p in gestures) {\n      elements.push(gestures[p].element);\n    }\n\n    transform = calc(\n      position[0][0],\n      position[0][1],\n      position[1][0],\n      position[1][1],\n      current[0][0],\n      current[0][1],\n      current[1][0],\n      current[1][1]\n    );\n    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouch', {\n      transform: transform,\n      touches: event.touches,\n      touchEvent: event\n    });\n  }\n}\n\n/**\n * handle touchend event\n *\n * 1. if there are tow touch points, then trigger 'dualtouchend'如\n *\n * 2. traverse every touch piont：\n * > if tapping, then trigger 'tap'.\n * If there is a tap 300 milliseconds before, then it's a 'doubletap'.\n * > if padding, then decide to trigger 'panend' or 'swipe'\n * > if pressing, then trigger 'pressend'.\n *\n * 3. remove listeners.\n *\n * @event\n * @param  {event} event\n */\nfunction touchendHandler(event) {\n\n  if (Object.keys(gestures).length == 2) {\n    var elements = [];\n    for (var p in gestures) {\n      elements.push(gestures[p].element);\n    }\n    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchend', {\n      touches: slice.call(event.touches),\n      touchEvent: event\n    });\n  }\n\n  for (var i = 0; i < event.changedTouches.length; i++) {\n    var touch = event.changedTouches[i];\n    var id = touch.identifier;\n    var gesture = gestures[id];\n\n    if (!gesture) {\n      continue\n    }\n\n    if (gesture.pressingHandler) {\n      clearTimeout(gesture.pressingHandler);\n      gesture.pressingHandler = null;\n    }\n\n    if (gesture.status === 'tapping') {\n      gesture.timestamp = Date.now();\n      // fire click, not tap.\n      fireEvent(gesture.element, 'tap', {\n        touch: touch,\n        touchEvent: event\n      });\n\n      if (lastTap && gesture.timestamp - lastTap.timestamp < 300) {\n        fireEvent(gesture.element, 'doubletap', {\n          touch: touch,\n          touchEvent: event\n        });\n      }\n\n      lastTap = gesture;\n    }\n\n    if (gesture.status === 'panning') {\n      var now = Date.now();\n      var duration = now - gesture.startTime;\n      var displacementX = touch.clientX - gesture.startTouch.clientX;\n      var displacementY = touch.clientY - gesture.startTouch.clientY;\n\n      var velocity = Math.sqrt(gesture.velocityY * gesture.velocityY\n        + gesture.velocityX * gesture.velocityX);\n      var isSwipe = velocity > 0.5 && (now - gesture.lastTime) < 100;\n      var extra = {\n        duration: duration,\n        isSwipe: isSwipe,\n        velocityX: gesture.velocityX,\n        velocityY: gesture.velocityY,\n        displacementX: displacementX,\n        displacementY: displacementY,\n        touch: touch,\n        touches: event.touches,\n        changedTouches: event.changedTouches,\n        touchEvent: event,\n        isVertical: gesture.isVertical,\n        direction: gesture.direction\n      };\n\n      fireEvent(gesture.element, 'panend', extra);\n      if (isSwipe) {\n        fireEvent(gesture.element, 'swipe', extra);\n      }\n    }\n\n    if (gesture.status === 'pressing') {\n      fireEvent(gesture.element, 'pressend', {\n        touch: touch,\n        touchEvent: event\n      });\n    }\n\n    delete gestures[id];\n  }\n\n  if (Object.keys(gestures).length === 0) {\n    docEl.removeEventListener('touchmove', touchmoveHandler, false);\n    docEl.removeEventListener('touchend', touchendHandler, false);\n    docEl.removeEventListener('touchcancel', touchcancelHandler, false);\n  }\n}\n\n/**\n * handle touchcancel\n *\n * 1. if there are two touch points, then trigger 'dualtouchend'\n *\n * 2. traverse everty touch point:\n * > if pannnig, then trigger 'panend'\n * > if pressing, then trigger 'pressend'\n *\n * 3. remove listeners\n *\n * @event\n * @param  {event} event\n */\nfunction touchcancelHandler(event) {\n\n  if (Object.keys(gestures).length == 2) {\n    var elements = [];\n    for (var p in gestures) {\n      elements.push(gestures[p].element);\n    }\n    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchend', {\n      touches: slice.call(event.touches),\n      touchEvent: event\n    });\n  }\n\n  for (var i = 0; i < event.changedTouches.length; i++) {\n    var touch = event.changedTouches[i];\n    var id = touch.identifier;\n    var gesture = gestures[id];\n\n    if (!gesture) {\n      continue\n    }\n\n    if (gesture.pressingHandler) {\n      clearTimeout(gesture.pressingHandler);\n      gesture.pressingHandler = null;\n    }\n\n    if (gesture.status === 'panning') {\n      fireEvent(gesture.element, 'panend', {\n        touch: touch,\n        touches: event.touches,\n        changedTouches: event.changedTouches,\n        touchEvent: event\n      });\n    }\n    if (gesture.status === 'pressing') {\n      fireEvent(gesture.element, 'pressend', {\n        touch: touch,\n        touchEvent: event\n      });\n    }\n    delete gestures[id];\n  }\n\n  if (Object.keys(gestures).length === 0) {\n    docEl.removeEventListener('touchmove', touchmoveHandler, false);\n    docEl.removeEventListener('touchend', touchendHandler, false);\n    docEl.removeEventListener('touchcancel', touchcancelHandler, false);\n  }\n}\n\nif (!isInitialized) {\n  docEl.addEventListener('touchstart', touchstartHandler, false);\n  isInitialized = true;\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable */\n\n// Production steps of ECMA-262, Edition 6, 22.1.2.1\n// Reference: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from\n\n/* istanbul ignore if */\nif (!Array.from) {\n  Array.from = (function() {\n    var toStr = Object.prototype.toString;\n    var isCallable = function(fn) {\n      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n    };\n    var toInteger = function(value) {\n      var number = Number(value);\n      if (isNaN(number)) {\n        return 0;\n      }\n      if (number === 0 || !isFinite(number)) {\n        return number;\n      }\n      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n    };\n    var maxSafeInteger = Math.pow(2, 53) - 1;\n    var toLength = function(value) {\n      var len = toInteger(value);\n      return Math.min(Math.max(len, 0), maxSafeInteger);\n    };\n\n    // The length property of the from method is 1.\n    return function from(arrayLike/*, mapFn, thisArg */) {\n      // 1. Let C be the this value.\n      var C = this;\n\n      // 2. Let items be ToObject(arrayLike).\n      var items = Object(arrayLike);\n\n      // 3. ReturnIfAbrupt(items).\n      if (arrayLike == null) {\n        throw new TypeError('Array.from requires an array-like object - not null or undefined');\n      }\n\n      // 4. If mapfn is undefined, then let mapping be false.\n      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n      var T;\n      if (typeof mapFn !== 'undefined') {\n        // 5. else\n        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (!isCallable(mapFn)) {\n          throw new TypeError('Array.from: when provided, the second argument must be a function');\n        }\n\n        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 2) {\n          T = arguments[2];\n        }\n      }\n\n      // 10. Let lenValue be Get(items, \"length\").\n      // 11. Let len be ToLength(lenValue).\n      var len = toLength(items.length);\n\n      // 13. If IsConstructor(C) is true, then\n      // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.\n      // 14. a. Else, Let A be ArrayCreate(len).\n      var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n      // 16. Let k be 0.\n      var k = 0;\n      // 17. Repeat, while k < len… (also steps a - h)\n      var kValue;\n      while (k < len) {\n        kValue = items[k];\n        if (mapFn) {\n          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n        } else {\n          A[k] = kValue;\n        }\n        k += 1;\n      }\n      // 18. Let putStatus be Put(A, \"length\", len, true).\n      A.length = len;\n      // 20. Return A.\n      return A;\n    };\n  }());\n}\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar _global = createCommonjsModule(function (module) {\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef\n});\n\nvar _core = createCommonjsModule(function (module) {\nvar core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef\n});\n\nvar _isObject = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\nvar isObject = _isObject;\nvar _anObject = function (it) {\n  if (!isObject(it)) { throw TypeError(it + ' is not an object!'); }\n  return it;\n};\n\nvar _fails = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar _descriptors = !_fails(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\nvar isObject$1 = _isObject;\nvar document$1 = _global.document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject$1(document$1) && isObject$1(document$1.createElement);\nvar _domCreate = function (it) {\n  return is ? document$1.createElement(it) : {};\n};\n\nvar _ie8DomDefine = !_descriptors && !_fails(function () {\n  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject$2 = _isObject;\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar _toPrimitive = function (it, S) {\n  if (!isObject$2(it)) { return it; }\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject$2(val = fn.call(it))) { return val; }\n  if (typeof (fn = it.valueOf) == 'function' && !isObject$2(val = fn.call(it))) { return val; }\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject$2(val = fn.call(it))) { return val; }\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar anObject = _anObject;\nvar IE8_DOM_DEFINE = _ie8DomDefine;\nvar toPrimitive = _toPrimitive;\nvar dP$1 = Object.defineProperty;\n\nvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) { try {\n    return dP$1(O, P, Attributes);\n  } catch (e) { /* empty */ } }\n  if ('get' in Attributes || 'set' in Attributes) { throw TypeError('Accessors not supported!'); }\n  if ('value' in Attributes) { O[P] = Attributes.value; }\n  return O;\n};\n\nvar _objectDp = {\n\tf: f\n};\n\nvar _propertyDesc = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar dP = _objectDp;\nvar createDesc = _propertyDesc;\nvar _hide = _descriptors ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar _has = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\nvar id = 0;\nvar px = Math.random();\nvar _uid = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\nvar _redefine = createCommonjsModule(function (module) {\nvar global = _global;\nvar hide = _hide;\nvar has = _has;\nvar SRC = _uid('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n_core.inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) { has(val, 'name') || hide(val, 'name', key); }\n  if (O[key] === val) { return; }\n  if (isFunction) { has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); }\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n});\n\nvar _aFunction = function (it) {\n  if (typeof it != 'function') { throw TypeError(it + ' is not a function!'); }\n  return it;\n};\n\n// optional / simple context binding\nvar aFunction = _aFunction;\nvar _ctx = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) { return fn; }\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar global$1 = _global;\nvar core = _core;\nvar hide = _hide;\nvar redefine = _redefine;\nvar ctx = _ctx;\nvar PROTOTYPE = 'prototype';\n\nvar $export$1 = function (type, name, source) {\n  var IS_FORCED = type & $export$1.F;\n  var IS_GLOBAL = type & $export$1.G;\n  var IS_STATIC = type & $export$1.S;\n  var IS_PROTO = type & $export$1.P;\n  var IS_BIND = type & $export$1.B;\n  var target = IS_GLOBAL ? global$1 : IS_STATIC ? global$1[name] || (global$1[name] = {}) : (global$1[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) { source = name; }\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global$1) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) { redefine(target, key, out, type & $export$1.U); }\n    // export\n    if (exports[key] != out) { hide(exports, key, exp); }\n    if (IS_PROTO && expProto[key] != out) { expProto[key] = out; }\n  }\n};\nglobal$1.core = core;\n// type bitmap\n$export$1.F = 1;   // forced\n$export$1.G = 2;   // global\n$export$1.S = 4;   // static\n$export$1.P = 8;   // proto\n$export$1.B = 16;  // bind\n$export$1.W = 32;  // wrap\n$export$1.U = 64;  // safe\n$export$1.R = 128; // real proto method for `library`\nvar _export = $export$1;\n\nvar toString$1 = {}.toString;\n\nvar _cof = function (it) {\n  return toString$1.call(it).slice(8, -1);\n};\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = _cof;\n// eslint-disable-next-line no-prototype-builtins\nvar _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n// 7.2.1 RequireObjectCoercible(argument)\nvar _defined = function (it) {\n  if (it == undefined) { throw TypeError(\"Can't call method on  \" + it); }\n  return it;\n};\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject$1 = _iobject;\nvar defined = _defined;\nvar _toIobject = function (it) {\n  return IObject$1(defined(it));\n};\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nvar _toInteger = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n// 7.1.15 ToLength\nvar toInteger = _toInteger;\nvar min = Math.min;\nvar _toLength = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\nvar toInteger$1 = _toInteger;\nvar max = Math.max;\nvar min$1 = Math.min;\nvar _toAbsoluteIndex = function (index, length) {\n  index = toInteger$1(index);\n  return index < 0 ? max(index + length, 0) : min$1(index, length);\n};\n\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject$1 = _toIobject;\nvar toLength = _toLength;\nvar toAbsoluteIndex = _toAbsoluteIndex;\nvar _arrayIncludes = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject$1($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) { while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) { return true; }\n    // Array#indexOf ignores holes, Array#includes - not\n    } } else { for (;length > index; index++) { if (IS_INCLUDES || index in O) {\n      if (O[index] === el) { return IS_INCLUDES || index || 0; }\n    } } } return !IS_INCLUDES && -1;\n  };\n};\n\nvar global$2 = _global;\nvar SHARED = '__core-js_shared__';\nvar store = global$2[SHARED] || (global$2[SHARED] = {});\nvar _shared = function (key) {\n  return store[key] || (store[key] = {});\n};\n\nvar shared = _shared('keys');\nvar uid = _uid;\nvar _sharedKey = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\nvar has = _has;\nvar toIObject = _toIobject;\nvar arrayIndexOf = _arrayIncludes(false);\nvar IE_PROTO = _sharedKey('IE_PROTO');\n\nvar _objectKeysInternal = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) { if (key != IE_PROTO) { has(O, key) && result.push(key); } }\n  // Don't enum bug & hidden keys\n  while (names.length > i) { if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  } }\n  return result;\n};\n\n// IE 8- don't enum bug keys\nvar _enumBugKeys = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = _objectKeysInternal;\nvar enumBugKeys = _enumBugKeys;\n\nvar _objectKeys = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\nvar f$1 = Object.getOwnPropertySymbols;\n\nvar _objectGops = {\n\tf: f$1\n};\n\nvar f$2 = {}.propertyIsEnumerable;\n\nvar _objectPie = {\n\tf: f$2\n};\n\n// 7.1.13 ToObject(argument)\nvar defined$1 = _defined;\nvar _toObject = function (it) {\n  return Object(defined$1(it));\n};\n\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = _objectKeys;\nvar gOPS = _objectGops;\nvar pIE = _objectPie;\nvar toObject = _toObject;\nvar IObject = _iobject;\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nvar _objectAssign = !$assign || _fails(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) {\n  var arguments$1 = arguments;\n // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments$1[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) { if (isEnum.call(S, key = keys[j++])) { T[key] = S[key]; } }\n  } return T;\n} : $assign;\n\n// 19.1.3.1 Object.assign(target, source)\nvar $export = _export;\n\n$export($export.S + $export.F, 'Object', { assign: _objectAssign });\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable */\n\n// https://gist.github.com/WebReflection/5593554\n\n/* istanbul ignore if */\nif (!Object.setPrototypeOf) {\n  Object.setPrototypeOf = (function(Object, magic) {\n    var set;\n    function setPrototypeOf(O, proto) {\n      set.call(O, proto);\n      return O;\n    }\n    try {\n      // this works already in Firefox and Safari\n      set = Object.getOwnPropertyDescriptor(Object.prototype, magic).set;\n      set.call({}, null);\n    } catch (e) {\n      if (\n        // IE < 11 cannot be shimmed\n        Object.prototype !== {}[magic] ||\n        // neither can any browser that actually\n        // implemented __proto__ correctly\n        // (all but old V8 will return here)\n        {__proto__: null}.__proto__ === void 0\n        // this case means null objects cannot be passed\n        // through setPrototypeOf in a reliable way\n        // which means here a **Sham** is needed instead\n      ) {\n        return;\n      }\n      // nodejs 0.8 and 0.10 are (buggy and..) fine here\n      // probably Chrome or some old Mobile stock browser\n      set = function(proto) {\n        this[magic] = proto;\n      };\n      // please note that this will **not** work\n      // in those browsers that do not inherit\n      // __proto__ by mistake from Object.prototype\n      // in these cases we should probably throw an error\n      // or at least be informed about the issue\n      setPrototypeOf.polyfill = setPrototypeOf(\n        setPrototypeOf({}, null),\n        Object.prototype\n      ) instanceof Object;\n      // setPrototypeOf.polyfill === true means it works as meant\n      // setPrototypeOf.polyfill === false means it's not 100% reliable\n      // setPrototypeOf.polyfill === undefined\n      // or\n      // setPrototypeOf.polyfill ==  null means it's not a polyfill\n      // which means it works as expected\n      // we can even delete Object.prototype.__proto__;\n    }\n    return setPrototypeOf;\n  }(Object, '__proto__'));\n}\n\nvar _wks = createCommonjsModule(function (module) {\nvar store = _shared('wks');\nvar uid = _uid;\nvar Symbol = _global.Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n});\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof$1 = _cof;\nvar TAG = _wks('toStringTag');\n// ES3 wrong here\nvar ARG = cof$1(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nvar _classof = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof$1(O)\n    // ES3 arguments fallback\n    : (B = cof$1(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n// 19.1.3.6 Object.prototype.toString()\nvar classof = _classof;\nvar test = {};\ntest[_wks('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  _redefine(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n\nvar toInteger$2 = _toInteger;\nvar defined$2 = _defined;\n// true  -> String#at\n// false -> String#codePointAt\nvar _stringAt = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined$2(that));\n    var i = toInteger$2(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) { return TO_STRING ? '' : undefined; }\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\nvar _library = false;\n\nvar _iterators = {};\n\nvar dP$2 = _objectDp;\nvar anObject$2 = _anObject;\nvar getKeys$1 = _objectKeys;\n\nvar _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject$2(O);\n  var keys = getKeys$1(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) { dP$2.f(O, P = keys[i++], Properties[P]); }\n  return O;\n};\n\nvar document$2 = _global.document;\nvar _html = document$2 && document$2.documentElement;\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject$1 = _anObject;\nvar dPs = _objectDps;\nvar enumBugKeys$1 = _enumBugKeys;\nvar IE_PROTO$1 = _sharedKey('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE$1 = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = _domCreate('iframe');\n  var i = enumBugKeys$1.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  _html.appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) { delete createDict[PROTOTYPE$1][enumBugKeys$1[i]]; }\n  return createDict();\n};\n\nvar _objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE$1] = anObject$1(O);\n    result = new Empty();\n    Empty[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else { result = createDict(); }\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\nvar def = _objectDp.f;\nvar has$2 = _has;\nvar TAG$1 = _wks('toStringTag');\n\nvar _setToStringTag = function (it, tag, stat) {\n  if (it && !has$2(it = stat ? it : it.prototype, TAG$1)) { def(it, TAG$1, { configurable: true, value: tag }); }\n};\n\nvar create$1 = _objectCreate;\nvar descriptor = _propertyDesc;\nvar setToStringTag$1 = _setToStringTag;\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n_hide(IteratorPrototype, _wks('iterator'), function () { return this; });\n\nvar _iterCreate = function (Constructor, NAME, next) {\n  Constructor.prototype = create$1(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag$1(Constructor, NAME + ' Iterator');\n};\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has$3 = _has;\nvar toObject$1 = _toObject;\nvar IE_PROTO$2 = _sharedKey('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nvar _objectGpo = Object.getPrototypeOf || function (O) {\n  O = toObject$1(O);\n  if (has$3(O, IE_PROTO$2)) { return O[IE_PROTO$2]; }\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\nvar LIBRARY = _library;\nvar $export$2 = _export;\nvar redefine$1 = _redefine;\nvar hide$1 = _hide;\nvar has$1 = _has;\nvar Iterators = _iterators;\nvar $iterCreate = _iterCreate;\nvar setToStringTag = _setToStringTag;\nvar getPrototypeOf = _objectGpo;\nvar ITERATOR = _wks('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nvar _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) { return proto[kind]; }\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has$1(IteratorPrototype, ITERATOR)) { hide$1(IteratorPrototype, ITERATOR, returnThis); }\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide$1(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) { for (key in methods) {\n      if (!(key in proto)) { redefine$1(proto, key, methods[key]); }\n    } } else { $export$2($export$2.P + $export$2.F * (BUGGY || VALUES_BUG), NAME, methods); }\n  }\n  return methods;\n};\n\nvar $at = _stringAt(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n_iterDefine(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) { return { value: undefined, done: true }; }\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = _wks('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) { _hide(ArrayProto, UNSCOPABLES, {}); }\nvar _addToUnscopables = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\nvar _iterStep = function (done, value) {\n  return { value: value, done: !!done };\n};\n\nvar addToUnscopables = _addToUnscopables;\nvar step = _iterStep;\nvar Iterators$2 = _iterators;\nvar toIObject$2 = _toIobject;\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nvar es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject$2(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') { return step(0, index); }\n  if (kind == 'values') { return step(0, O[index]); }\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators$2.Arguments = Iterators$2.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\nvar $iterators = es6_array_iterator;\nvar getKeys$2 = _objectKeys;\nvar redefine$2 = _redefine;\nvar global$3 = _global;\nvar hide$2 = _hide;\nvar Iterators$1 = _iterators;\nvar wks = _wks;\nvar ITERATOR$1 = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators$1.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys$2(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global$3[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR$1]) { hide$2(proto, ITERATOR$1, ArrayValues); }\n    if (!proto[TO_STRING_TAG]) { hide$2(proto, TO_STRING_TAG, NAME); }\n    Iterators$1[NAME] = ArrayValues;\n    if (explicit) { for (key in $iterators) { if (!proto[key]) { redefine$2(proto, key, $iterators[key], true); } } }\n  }\n}\n\nvar _anInstance = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n\n// call something on iterator step with safe closing on error\nvar anObject$3 = _anObject;\nvar _iterCall = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject$3(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) { anObject$3(ret.call(iterator)); }\n    throw e;\n  }\n};\n\n// check on default Array iterator\nvar Iterators$3 = _iterators;\nvar ITERATOR$2 = _wks('iterator');\nvar ArrayProto$1 = Array.prototype;\n\nvar _isArrayIter = function (it) {\n  return it !== undefined && (Iterators$3.Array === it || ArrayProto$1[ITERATOR$2] === it);\n};\n\nvar classof$2 = _classof;\nvar ITERATOR$3 = _wks('iterator');\nvar Iterators$4 = _iterators;\nvar core_getIteratorMethod = _core.getIteratorMethod = function (it) {\n  if (it != undefined) { return it[ITERATOR$3]\n    || it['@@iterator']\n    || Iterators$4[classof$2(it)]; }\n};\n\nvar _forOf = createCommonjsModule(function (module) {\nvar ctx = _ctx;\nvar call = _iterCall;\nvar isArrayIter = _isArrayIter;\nvar anObject = _anObject;\nvar toLength = _toLength;\nvar getIterFn = core_getIteratorMethod;\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') { throw TypeError(iterable + ' is not iterable!'); }\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) { for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) { return result; }\n  } } else { for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) { return result; }\n  } }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n});\n\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject$4 = _anObject;\nvar aFunction$2 = _aFunction;\nvar SPECIES = _wks('species');\nvar _speciesConstructor = function (O, D) {\n  var C = anObject$4(O).constructor;\n  var S;\n  return C === undefined || (S = anObject$4(C)[SPECIES]) == undefined ? D : aFunction$2(S);\n};\n\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nvar _invoke = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n\nvar ctx$2 = _ctx;\nvar invoke = _invoke;\nvar html = _html;\nvar cel = _domCreate;\nvar global$5 = _global;\nvar process$1 = global$5.process;\nvar setTask = global$5.setImmediate;\nvar clearTask = global$5.clearImmediate;\nvar MessageChannel = global$5.MessageChannel;\nvar Dispatch = global$5.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer;\nvar channel;\nvar port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var arguments$1 = arguments;\n\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) { args.push(arguments$1[i++]); }\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (_cof(process$1) == 'process') {\n    defer = function (id) {\n      process$1.nextTick(ctx$2(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx$2(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx$2(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global$5.addEventListener && typeof postMessage == 'function' && !global$5.importScripts) {\n    defer = function (id) {\n      global$5.postMessage(id + '', '*');\n    };\n    global$5.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx$2(run, id, 1), 0);\n    };\n  }\n}\nvar _task = {\n  set: setTask,\n  clear: clearTask\n};\n\nvar global$6 = _global;\nvar macrotask = _task.set;\nvar Observer = global$6.MutationObserver || global$6.WebKitMutationObserver;\nvar process$2 = global$6.process;\nvar Promise$1 = global$6.Promise;\nvar isNode$1 = _cof(process$2) == 'process';\n\nvar _microtask = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode$1 && (parent = process$2.domain)) { parent.exit(); }\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) { notify(); }\n        else { last = undefined; }\n        throw e;\n      }\n    } last = undefined;\n    if (parent) { parent.enter(); }\n  };\n\n  // Node.js\n  if (isNode$1) {\n    notify = function () {\n      process$2.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if (Observer) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise$1 && Promise$1.resolve) {\n    var promise = Promise$1.resolve();\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global$6, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) { last.next = task; }\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction$3 = _aFunction;\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) { throw TypeError('Bad Promise constructor'); }\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction$3(resolve);\n  this.reject = aFunction$3(reject);\n}\n\nvar f$3 = function (C) {\n  return new PromiseCapability(C);\n};\n\nvar _newPromiseCapability = {\n\tf: f$3\n};\n\nvar _perform = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n\nvar anObject$5 = _anObject;\nvar isObject$4 = _isObject;\nvar newPromiseCapability$1 = _newPromiseCapability;\n\nvar _promiseResolve = function (C, x) {\n  anObject$5(C);\n  if (isObject$4(x) && x.constructor === C) { return x; }\n  var promiseCapability = newPromiseCapability$1.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n\nvar redefine$3 = _redefine;\nvar _redefineAll = function (target, src, safe) {\n  for (var key in src) { redefine$3(target, key, src[key], safe); }\n  return target;\n};\n\nvar global$7 = _global;\nvar dP$3 = _objectDp;\nvar DESCRIPTORS = _descriptors;\nvar SPECIES$1 = _wks('species');\n\nvar _setSpecies = function (KEY) {\n  var C = global$7[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES$1]) { dP$3.f(C, SPECIES$1, {\n    configurable: true,\n    get: function () { return this; }\n  }); }\n};\n\nvar ITERATOR$4 = _wks('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR$4]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nvar _iterDetect = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) { return false; }\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR$4]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR$4] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n\nvar LIBRARY$1 = _library;\nvar global$4 = _global;\nvar ctx$1 = _ctx;\nvar classof$1 = _classof;\nvar $export$3 = _export;\nvar isObject$3 = _isObject;\nvar aFunction$1 = _aFunction;\nvar anInstance = _anInstance;\nvar forOf = _forOf;\nvar speciesConstructor = _speciesConstructor;\nvar task = _task.set;\nvar microtask = _microtask();\nvar newPromiseCapabilityModule = _newPromiseCapability;\nvar perform = _perform;\nvar promiseResolve = _promiseResolve;\nvar PROMISE = 'Promise';\nvar TypeError$1 = global$4.TypeError;\nvar process = global$4.process;\nvar $Promise = global$4[PROMISE];\nvar isNode = classof$1(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal;\nvar newGenericPromiseCapability;\nvar OwnPromiseCapability;\nvar Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject$3(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) { return; }\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) { onHandleUnhandled(promise); }\n            promise._h = 1;\n          }\n          if (handler === true) { result = value; }\n          else {\n            if (domain) { domain.enter(); }\n            result = handler(value);\n            if (domain) { domain.exit(); }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError$1('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else { resolve(result); }\n        } else { reject(value); }\n      } catch (e) {\n        reject(e);\n      }\n    };\n    while (chain.length > i) { run(chain[i++]); } // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) { onUnhandled(promise); }\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global$4, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global$4.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global$4.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) { throw result.v; }\n  });\n};\nvar isUnhandled = function (promise) {\n  if (promise._h == 1) { return false; }\n  var chain = promise._a || promise._c;\n  var i = 0;\n  var reaction;\n  while (chain.length > i) {\n    reaction = chain[i++];\n    if (reaction.fail || !isUnhandled(reaction.promise)) { return false; }\n  } return true;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global$4, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global$4.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) { return; }\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) { promise._a = promise._c.slice(); }\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) { return; }\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) { throw TypeError$1(\"Promise can't be resolved itself\"); }\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx$1($resolve, wrapper, 1), ctx$1($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction$1(executor);\n    Internal.call(this);\n    try {\n      executor(ctx$1($resolve, this, 1), ctx$1($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = _redefineAll($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) { this._a.push(reaction); }\n      if (this._s) { notify(this, false); }\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx$1($resolve, promise, 1);\n    this.reject = ctx$1($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export$3($export$3.G + $export$3.W + $export$3.F * !USE_NATIVE, { Promise: $Promise });\n_setToStringTag($Promise, PROMISE);\n_setSpecies(PROMISE);\nWrapper = _core[PROMISE];\n\n// statics\n$export$3($export$3.S + $export$3.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export$3($export$3.S + $export$3.F * (LIBRARY$1 || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY$1 && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export$3($export$3.S + $export$3.F * !(USE_NATIVE && _iterDetect(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) { return; }\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) { reject(result.v); }\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) { reject(result.v); }\n    return capability.promise;\n  }\n});\n\nvar lib$2 = window.lib || (window.lib = {});\n\n/**\n * Version class.\n * @class lib.env~Version\n * @param {String} v - version number.\n */\nfunction Version (v) {\n  Object.defineProperty(this, 'val', {\n    value: v.toString(),\n    enumerable: true\n  });\n\n  /**\n   * larger than\n   * @method gt\n   * @param {String} v - version\n   * @return {Boolean} result\n   * @instance\n   * @memberof Version\n   */\n  this.gt = function (v) {\n    return Version.compare(this, v) > 0\n  };\n\n  /**\n   * larger than or equal to.\n   * @method gte\n   * @param {String} v - version\n   * @return {Boolean} result\n   * @instance\n   * @memberof Version\n   */\n  this.gte = function (v) {\n    return Version.compare(this, v) >= 0\n  };\n\n  /**\n   * less than.\n   * @method lt\n   * @param {String} v - version\n   * @return {Boolean} result\n   * @instance\n   * @memberof Version\n   */\n  this.lt = function (v) {\n    return Version.compare(this, v) < 0\n  };\n\n  /**\n   * less than or equal to.\n   * @method lte\n   * @param {String} v - version\n   * @return {Boolean} result\n   * @instance\n   * @memberof Version\n   */\n  this.lte = function (v) {\n    return Version.compare(this, v) <= 0\n  };\n\n  /**\n   * equal to.\n   * @method eq\n   * @param {String} v - version\n   * @return {Boolean} equal to\n   * @instance\n   * @memberof Version\n   */\n  this.eq = function (v) {\n    return Version.compare(this, v) === 0\n  };\n}\n\n/**\n * version number string.\n * @method toString\n * @return {String} current version number string.\n * @instance\n * @memberof Version\n */\nVersion.prototype.toString = function () {\n  return this.val\n};\n\n/**\n * return current version number.\n * @method valueOf\n * @return {Boolean} version number\n * @instance\n * @memberof Version\n */\nVersion.prototype.valueOf = function () {\n  var v = this.val.split('.');\n  var r = [];\n  for (var i = 0; i < v.length; i++) {\n    var n = parseInt(v[i], 10);\n    if (isNaN(n)) {\n      n = 0;\n    }\n    var s = n.toString();\n    if (s.length < 5) {\n      s = Array(6 - s.length).join('0') + s;\n    }\n    r.push(s);\n    if (r.length === 1) {\n      r.push('.');\n    }\n  }\n  return parseFloat(r.join(''))\n};\n\n/**\n * compare two versions.\n * @method compare\n * @param {String} v1 - version1\n * @param {String} v2 - version2\n * @return {Number} 0 for equality，-1 for less than，1 for larger than.\n * @memberof Version\n */\nVersion.compare = function (v1, v2) {\n  v1 = v1.toString().split('.');\n  v2 = v2.toString().split('.');\n  for (var i = 0; i < v1.length || i < v2.length; i++) {\n    var n1 = parseInt(v1[i], 10);\n    var n2 = parseInt(v2[i], 10);\n    if (window.isNaN(n1)) {\n      n1 = 0;\n    }\n    if (window.isNaN(n2)) {\n      n2 = 0;\n    }\n    if (n1 < n2) {\n      return -1\n    }\n    else if (n1 > n2) {\n      return 1\n    }\n  }\n  return 0\n};\n\n/**\n * 解析和操作版本号\n * @method version\n * @param {string} v - 需要解析的版本号\n * @return {lib.env~Version} Verson实例\n * @memberof lib\n */\nlib$2.version = function (v) {\n  return new Version(v)\n};\n\nvar lib$3 = window.lib || (window.lib = {});\nvar env$1 = lib$3.env || (lib$3.env = {});\n\nvar search = window.location.search.replace(/^\\?/, '');\nenv$1.params = {};\nif (search) {\n  var params = search.split('&');\n  for (var i$1 = 0; i$1 < params.length; i$1++) {\n    params[i$1] = params[i$1].split('=');\n    try {\n      env$1.params[params[i$1][0]] = decodeURIComponent(params[i$1][1]);\n    }\n    catch (e) {\n      env$1.params[params[i$1][0]] = params[i$1][1];\n    }\n  }\n}\n\nvar lib$1 = window.lib || (window.lib = {});\nvar env = lib$1.env || (lib$1.env = {});\n\nvar ua = window.navigator.userAgent;\nvar match;\n\n/**\n * os\n */\n\nmatch = ua.match(/Windows\\sPhone\\s(?:OS\\s)?([\\d.]+)/);\nif (match) {\n  /**\n   * @type {Object}\n   * @memberof lib.env\n   * @property {String} name - os name, e.g. Android/AndroidPad/iPhone/iPod/iPad/Windows Phone/unknown, etc.\n   * @property {lib.env~Version} version - os version.\n   * @property {Boolean} isWindowsPhone\n   * @property {Boolean} isIPhone - is iPhone/iTouch\n   * @property {Boolean} isIPad\n   * @property {Boolean} isIOS\n   * @property {Boolean} isAndroid\n   * @property {Boolean} isAndroidPad\n   */\n  env.os = {\n    name: 'Windows Phone',\n    isWindowsPhone: true,\n    version: match[1]\n  };\n}\nelse if (!!ua.match(/Safari/) && (match = ua.match(/Android[\\s/]([\\d.]+)/))) {\n  env.os = {\n    version: match[1]\n  };\n\n  if ((ua.match(/Mobile\\s+Safari/))) {\n    env.os.name = 'Android';\n    env.os.isAndroid = true;\n  }\n  else {\n    env.os.name = 'AndroidPad';\n    env.os.isAndroidPad = true;\n  }\n}\nelse if ((match = ua.match(/(iPhone|iPad|iPod)/))) {\n  var name = match[1];\n\n  match = ua.match(/OS ([\\d_.]+) like Mac OS X/);\n\n  env.os = {\n    name: name,\n    isIPhone: (name === 'iPhone' || name === 'iPod'),\n    isIPad: name === 'iPad',\n    isIOS: true,\n    version: match && match[1].split('_').join('.') || ''\n  };\n}\nelse {\n  env.os = {\n    name: 'unknown',\n    version: '0.0.0'\n  };\n}\n\nif (lib$1.version) {\n  env.os.version = lib$1.version(env.os.version);\n}\n\n/**\n * browser\n */\n\nmatch = ua.match(/(?:UCWEB|UCBrowser\\/)([\\d.]+)/);\n\nif (match) {\n  /**\n   * @type {Object}\n   * @memberof env\n   * @property {String} name - browser name，e.g. UC/QQ/Firefox/Chrome/Android/Safari/iOS Webview/Chrome Webview/IE/IEMobile/unknown, etc.\n   * @property {env~Version} version - browser version.\n   * @property {Boolean} isUC\n   * @property {Boolean} isQQ\n   * @property {Boolean} isIE\n   * @property {Boolean} isIEMobile\n   * @property {Boolean} isIELikeWebkit\n   * @property {Boolean} isChrome\n   * @property {Boolean} isAndroid\n   * @property {Boolean} isSafari\n   * @property {Boolean} isWebview\n   */\n  env.browser = {\n    name: 'UC',\n    isUC: true,\n    version: match[1]\n  };\n}\nelse if ((match = ua.match(/MQQBrowser\\/([\\d.]+)/))) {\n  env.browser = {\n    name: 'QQ',\n    isQQ: true,\n    version: match[1]\n  };\n}\nelse if ((match = ua.match(/Firefox\\/([\\d.]+)/))) {\n  env.browser = {\n    name: 'Firefox',\n    isFirefox: true,\n    version: match[1]\n  };\n}\nelse if ((match = ua.match(/MSIE\\s([\\d.]+)/))\n  || (match = ua.match(/IEMobile\\/([\\d.]+)/))) {\n  env.browser = {\n    version: match[1]\n  };\n\n  if (ua.match(/IEMobile/)) {\n    env.browser.name = 'IEMobile';\n    env.browser.isIEMobile = true;\n  }\n  else {\n    env.browser.name = 'IE';\n    env.browser.isIE = true;\n  }\n\n  if (ua.match(/Android|iPhone/)) {\n    env.browser.isIELikeWebkit = true;\n  }\n}\nelse if ((match = ua.match(/(?:Chrome|CriOS)\\/([\\d.]+)/))) {\n  env.browser = {\n    name: 'Chrome',\n    isChrome: true,\n    version: match[1]\n  };\n\n  if (ua.match(/Version\\/[\\d+.]+\\s*Chrome/)) {\n    env.browser.name = 'Chrome Webview';\n    env.browser.isWebview = true;\n  }\n}\nelse if (!!ua.match(/Safari/) && (match = ua.match(/Android[\\s/]([\\d.]+)/))) {\n  env.browser = {\n    name: 'Android',\n    isAndroid: true,\n    version: match[1]\n  };\n}\nelse if (ua.match(/iPhone|iPad|iPod/)) {\n  if (ua.match(/Safari/)) {\n    match = ua.match(/Version\\/([\\d.]+)/);\n    env.browser = {\n      name: 'Safari',\n      isSafari: true,\n      version: match && match[1] || ''\n    };\n  }\n  else {\n    match = ua.match(/OS ([\\d_.]+) like Mac OS X/);\n    env.browser = {\n      name: 'iOS Webview',\n      isWebview: true,\n      version: match && match[1].replace(/_/g, '.') || ''\n    };\n  }\n}\nelse {\n  env.browser = {\n    name: 'unknown',\n    version: '0.0.0'\n  };\n}\n\nif (lib$1.version) {\n  env.browser.version = lib$1.version(env.browser.version);\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// \n\nvar toString$2 = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\nvar OBJECT_STRING = '[object Object]';\nfunction isPlainObject (obj) {\n  return toString$2.call(obj) === OBJECT_STRING\n}\n\nvar ARRAY_STRING = '[object Array]';\nfunction isArray (arr) {\n  return toString$2.call(arr) === ARRAY_STRING\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// \n/**\n * Mix properties into target object.\n * the rightest object's value has the highest priority.\n */\nfunction extend (to) {\n  var args = [], len = arguments.length - 1;\n  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n  if (!args || args.length <= 0) {\n    return to\n  }\n  args.forEach(function (from) {\n    if (typeof from !== 'object') {\n      return\n    }\n    for (var key in from) {\n      to[key] = from[key];\n    }\n  });\n  return to\n}\n/**\n * Mix truthy or '' property values into target object.\n * mostly for merging styles. (that's why '' is falsy but still should be counted in.)\n * the rightest object's value has the highest priority.\n */\nfunction extendTruthy (to) {\n  var args = [], len = arguments.length - 1;\n  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n  if (!args || args.length <= 0) {\n    return to\n  }\n  args.forEach(function (from) {\n    if (typeof from !== 'object') {\n      return\n    }\n    var i;\n    for (var key in from) {\n      if (((i = from[key]) || i === '' || i === 0) && i !== 'undefined') {\n        to[key] = i;\n      }\n    }\n  });\n  return to\n}\n/**\n * Mix specified properties into target object.\n */\nfunction extendKeys (to, from, keys) {\n  if ( from === void 0 ) from = {};\n\n  (keys || []).forEach(function (key) {\n    from && (to[key] = from[key]);\n  });\n  return to\n}\n/**\n * Extract specified properties from src to target object.\n */\nfunction extractKeys (to, from, keys) {\n  if ( from === void 0 ) from = {};\n\n  if (!from) {\n    return to\n  }\n  (keys || []).forEach(function (key) {\n    from && (to[key] = from[key]);\n    from && (delete from[key]);\n  });\n  return to\n}\n/**\n * Simple bind, faster than native\n *\n * @param {Function} fn\n * @param {Object} ctx\n * @return {Function}\n */\nfunction bind (fn, ctx) {\n  return function (a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx)\n  }\n}\n/**\n * Only call the func the last time before it's not that frequently called.\n */\nfunction debounce (func, wait) {\n  var timerId;\n  function later () {\n    timerId = null;\n    func.apply(null);\n  }\n  return function () {\n    clearTimeout(timerId);\n    timerId = setTimeout(later, wait);\n  }\n}\n/**\n * Only call the func the first time before a series frequently function calls happen.\n */\nfunction depress (func, wait) {\n  var timerId;\n\n  function later () {\n    timerId = null;\n  }\n  return function () {\n    if (!timerId) {\n      func.apply();\n    }\n    clearTimeout(timerId);\n    timerId = setTimeout(later, wait);\n  }\n}\n/**\n * Only call the func every time after a wait milliseconds if it's too frequently called.\n */\nfunction throttle (func, wait, callLastTime) {\n  var last = 0;\n  var lastTimer = null;\n  var lastTimeDuration = wait + (wait > 25 ? wait : 25); // plus half wait time.\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var context = this;\n    var time = new Date().getTime();\n    if (time - last > wait) {\n      if (callLastTime) {\n        lastTimer && clearTimeout(lastTimer);\n        lastTimer = setTimeout(function () {\n          lastTimer = null;\n          func.apply(context, args);\n        }, lastTimeDuration);\n      }\n      func.apply(context, args);\n      last = time;\n    }\n  }\n}\n// direction: 'l' | 'r', default is 'r'\n// num: how many times to loop, should be a positive integer\nfunction loopArray (arr, num, direction) {\n  if (!isArray(arr)) {\n    return\n  }\n  var isLeft = (direction + '').toLowerCase() === 'l';\n  var len = arr.length;\n  num = num % len;\n  if (num < 0) {\n    num = -num;\n    isLeft = !isLeft;\n  }\n  if (num === 0) {\n    return arr\n  }\n  var lp, rp;\n  if (isLeft) {\n    lp = arr.slice(0, num);\n    rp = arr.slice(num);\n  }\n  else {\n    lp = arr.slice(0, len - num);\n    rp = arr.slice(len - num);\n  }\n  return rp.concat(lp)\n}\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  }\n}\n/**\n * Camelize a hyphen-delmited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c.toUpperCase(); })\n});\nfunction camelizeKeys (obj) {\n  var res = {};\n  for (var key in obj) {\n    res[camelize(key)] = obj[key];\n  }\n  return res\n}\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n  /**\n   * Hyphenate a camelCase string.\n   */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase()\n});\nfunction hyphenateKeys (obj) {\n  var res = {};\n  for (var key in obj) {\n    res[hyphenate(key)] = obj[key];\n  }\n  return res\n}\nvar vendorsReg = /webkit-|moz-|o-|ms-/;\nfunction hyphenateStyleKeys (obj) {\n  var res = {};\n  for (var key in obj) {\n    var hk = hyphenate(key).replace(vendorsReg, function ($0) {\n      return '-' + $0\n    });\n    res[hk] = obj[key];\n  }\n  return res\n}\nfunction camelToKebab (name) {\n  if (!name) {\n    return ''\n  }\n  return name.replace(/([A-Z])/g, function (g, g1) {\n    return (\"-\" + (g1.toLowerCase()))\n  })\n}\nfunction appendCss (css, cssId, replace) {\n  var style = document.getElementById(cssId);\n  if (style && replace) {\n    style.parentNode.removeChild(style);\n    style = null;\n  }\n  if (!style) {\n    style = document.createElement('style');\n    style.type = 'text/css';\n    cssId && (style.id = cssId);\n    document.getElementsByTagName('head')[0].appendChild(style);\n  }\n  style.appendChild(document.createTextNode(css));\n}\nfunction nextFrame (callback) {\n  var runner = window.requestAnimationFrame\n    || window.webkitRequestAnimationFrame\n    || window.mozRequestAnimationFrame\n    || (function (cb) { return setTimeout(cb, 16); });\n  runner(callback);\n}\nfunction toCSSText (object) {\n  if (!object) {\n    return\n  }\n  var obj = hyphenateStyleKeys(object);\n  var cssText = '';\n  for (var key in obj) {\n    cssText += key + \":\" + (obj[key]) + \";\";\n  }\n  return cssText\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// \n\n/**\n * viewport priority:\n *\n * 1. meta weex-viewport (developer custom)\n * 2. setViewport(config) := config.width (private code) @deprecated\n * 3. 750 (buid time)\n *\n */\nvar isInited = false;\nvar DEFAULT_VIEWPORT_WIDTH = 750;\n\n/**\n * get viewport width from weex-viewport meta.\n */\nvar envViewportWidth = parseInt(750);\nvar width = !isNaN(envViewportWidth) && envViewportWidth > 0\n  ? envViewportWidth\n  : DEFAULT_VIEWPORT_WIDTH;\n\nvar wxViewportMeta = document.querySelector('meta[name=\"weex-viewport\"]');\nvar metaWidth = wxViewportMeta && parseInt(wxViewportMeta.getAttribute('content'));\nif (metaWidth && !isNaN(metaWidth) && metaWidth > 0) {\n  width = metaWidth;\n}\n\nvar dpr = 0;\nvar screenWidth = 0;\nvar screenHeight = 0;\n\nvar info = {\n  dpr: dpr,\n  scale: 0,\n  rem: 0,\n  deviceWidth: 0,\n  deviceHeight: 0\n};\n\n/**\n * set root font-size for rem units. If already been set, just skip this.\n */\nfunction setRootFont (width) {\n  var doc = window.document;\n  var rem = width / 10;\n  if (!doc.documentElement) { return }\n  var rootFontSize = doc.documentElement.style.fontSize;\n  if (!rootFontSize) {\n    doc.documentElement.style.fontSize = rem + 'px';\n    info.rem = rem;\n  }\n}\n\nfunction setMetaViewport (width) {\n  if (!wxViewportMeta) {\n    wxViewportMeta = document.createElement('meta');\n    wxViewportMeta.setAttribute('name', 'weex-viewport');\n  }\n  else {\n    var metaWidth = parseInt(wxViewportMeta.getAttribute('content'));\n    if (metaWidth === width) {\n      return\n    }\n  }\n  wxViewportMeta.setAttribute('content', width + '');\n}\n\n/**\n * export viewport info.\n */\nfunction init$2 (viewportWidth) {\n  if ( viewportWidth === void 0 ) viewportWidth = width;\n\n  if (!isInited) {\n    isInited = true;\n\n    var doc = window.document;\n    if (!doc) {\n      console.error('[vue-render] window.document is undfined.');\n      return\n    }\n    if (!doc.documentElement) {\n      console.error('[vue-render] document.documentElement is undfined.');\n      return\n    }\n\n    dpr = info.dpr = window.devicePixelRatio;\n    screenWidth = doc.documentElement.clientWidth;\n    screenHeight = doc.documentElement.clientHeight;\n\n    var resetDeviceHeight = function () {\n      screenHeight = doc.documentElement.clientHeight;\n      var env = window.weex && window.weex.config.env;\n      info.deviceHeight = env.deviceHeight = screenHeight * dpr;\n    };\n\n    // set root font for rem.\n    setRootFont(screenWidth);\n    setMetaViewport(viewportWidth);\n\n    window.addEventListener('resize', resetDeviceHeight);\n\n    /**\n     * why not to use window.screen.width to get screenWidth ? Because in some\n     * old webkit browser on android system it get the device pixel width, which\n     * is the screenWidth multiply by the device pixel ratio.\n     * e.g. ip6 -> get 375 for virtual screen width.\n     */\n    var scale = screenWidth / viewportWidth;\n    /**\n     * 1. if set initial/maximum/mimimum-scale some how the page will have a bounce\n     * effect when user drag the page towards horizontal axis.\n     * 2. Due to compatibility reasons, not to use viewport meta anymore. Just bring\n     * a parameter scale into the style value processing.\n     */\n\n    // const contents = [\n    //   `width=${viewportWidth}`,\n    //   `initial-scale=${scale}`,\n    //   `maximum-scale=${scale}`,\n    //   `minimum-scale=${scale}`,\n    //   `user-scalable=no`\n    // ]\n\n    // let meta = doc.querySelector('meta[name=\"viewport\"]')\n    // if (!meta) {\n    //   meta = doc.createElement('meta')\n    //   meta.setAttribute('name', 'viewport')\n    //   document.querySelector('head').appendChild(meta)\n    // }\n    // meta.setAttribute('content', contents.join(','))\n\n    extend(info, {\n      scale: scale,\n      deviceWidth: screenWidth * dpr,\n      deviceHeight: screenHeight * dpr\n    });\n  }\n\n  return info\n}\n\n/**\n * reset viewport width and scale.\n * @return new scale.\n */\n\n\nfunction getViewportInfo () {\n  return info\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction extend$1 (to) {\n  var args = [], len = arguments.length - 1;\n  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n  if (!args || args.length <= 0) { return to }\n  args.forEach(function (from) {\n    if (typeof from !== 'object') { return }\n    for (var key in from) {\n      to[key] = from[key];\n    }\n  });\n  return to\n}\n\n// if support passive event listeners.\nvar _supportsPassive = false;\ntry {\n  document.createElement('div').addEventListener('test', function (_) {}, {\n    get passive () {\n      _supportsPassive = true;\n    }\n  });\n}\ncatch (e) {\n  // do nothing.\n}\nfunction supportsPassive () {\n  return _supportsPassive\n}\n\n/**\n * Create Event.\n * @param {DOMString} type\n * @param {Object} props\n */\nfunction createEvent (target, type, props) {\n  var event = new Event(type, { bubbles: false });\n\n  extend$1(event, props);\n  //  phantomjs don't support customer event\n  if (window.navigator.userAgent.toLowerCase().indexOf('phantomjs') !== -1) {\n    return event\n  }\n  try {\n    Object.defineProperty(event, 'target', {\n      enumerable: true,\n      value: target\n    });\n  }\n  catch (err) {\n    return extend$1({}, event, { target: target })\n  }\n  return event\n}\n\n/**\n * Create a bubbable Event.\n * @param {DOMString} type\n * @param {Object} props\n */\nfunction createBubblesEvent (target, type, props) {\n  var event = new Event(type, { bubbles: true });\n  extend$1(event, props);\n  //  phantomjs don't support customer event\n  if (window.navigator.userAgent.toLowerCase().indexOf('phantomjs') !== -1) {\n    return event\n  }\n  try {\n    Object.defineProperty(event, 'target', {\n      enumerable: true,\n      value: target\n    });\n  }\n  catch (err) {\n    return extend$1({}, event, { target: target })\n  }\n  return event\n}\n\n/**\n * Create Custom Event.\n * @param {DOMString} type\n * @param {Object} props\n */\nfunction createCustomEvent (target, type, props) {\n  // compatibility: http://caniuse.com/#search=customevent\n  // const event = new CustomEvent(type)\n  var event = document.createEvent('CustomEvent');\n  event.initCustomEvent(type, false, true, {});\n  // event.preventDefault()\n  // event.stopPropagation()\n\n  extend$1(event, props);\n\n  // event.target is readonly\n  try {\n    Object.defineProperty(event, 'target', {\n      enumerable: true,\n      value: target || null\n    });\n  }\n  catch (err) {\n    return extend$1({}, event, { target: target || null })\n  }\n\n  return event\n}\n\n/**\n * dispatch a event on a dom element.\n * @param  {HTMLElement} dom\n * @param  {Event} event\n */\nfunction dispatchEvent (dom, event) {\n  dom.dispatchEvent(event);\n}\n\nfunction mapFormEvents (context) {\n  var eventMap = {};['input', 'change', 'focus', 'blur'].forEach(function (type) {\n    eventMap[type] = function (event) {\n      if (context.$el) {\n        event.value = context.$el.value;\n      }\n      context.$emit(type, event);\n    };\n  });\n  return eventMap\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar config = {\n  scrollableTypes: ['scroller', 'list', 'waterfall'],\n  gestureEvents: [\n    'panstart',\n    'panmove',\n    'panend',\n    'swipe',\n    'longpress',\n    'tap'\n  ]\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nfunction getParentScroller (vm) {\n  if (!vm) { return null }\n  if (vm._parentScroller) {\n    return vm._parentScroller\n  }\n  function _getParentScroller (parent) {\n    if (!parent) { return }\n    if (config.scrollableTypes.indexOf(parent.weexType) > -1) {\n      vm._parentScroller = parent;\n      return parent\n    }\n    return _getParentScroller(parent.$parent)\n  }\n  return _getParentScroller(vm.$parent)\n}\n\nfunction horizontalBalance (rect, ctRect) {\n  return rect.left < ctRect.right && rect.right > ctRect.left\n}\n\nfunction verticalBalance (rect, ctRect) {\n  return rect.top < ctRect.bottom && rect.bottom > ctRect.top\n}\n\n/**\n * return a data array with two boolean value, which are:\n * 1. visible in current ct's viewport.\n * 2. visible with offset in current ct's viewport.\n */\nfunction hasIntersection (rect, ctRect, dir, offset) {\n  dir = dir || 'up';\n  var isHorizontal = dir === 'left' || dir === 'right';\n  var isVertical = dir === 'up' || dir === 'down';\n  if (isHorizontal && !verticalBalance(rect, ctRect)) {\n    return [false, false]\n  }\n  if (isVertical && !horizontalBalance(rect, ctRect)) {\n    return [false, false]\n  }\n  offset = parseInt(offset || 0) * weex.config.env.scale;\n  switch (dir) {\n    case 'up':\n      return [\n        rect.top < ctRect.bottom && rect.bottom > ctRect.top,\n        rect.top < ctRect.bottom + offset && rect.bottom > ctRect.top - offset\n      ]\n    case 'down':\n      return [\n        rect.bottom > ctRect.top && rect.top < ctRect.bottom,\n        rect.bottom > ctRect.top - offset && rect.top < ctRect.bottom + offset\n      ]\n    case 'left':\n      return [\n        rect.left < ctRect.right && rect.right > ctRect.left,\n        rect.left < ctRect.right + offset && rect.right > ctRect.left - offset\n      ]\n    case 'right':\n      return [\n        rect.right > ctRect.left && rect.left < ctRect.right,\n        rect.right > ctRect.left - offset && rect.left < ctRect.right + offset\n      ]\n  }\n}\n\n/**\n * isElementVisible\n * @param  {HTMLElement}  el    a dom element.\n * @param  {HTMLElement}  container  optional, the container of this el.\n */\nfunction isElementVisible (el, container, dir, offset) {\n  if (!el.getBoundingClientRect) { return false }\n  var bodyRect = {\n    top: 0,\n    left: 0,\n    bottom: window.innerHeight,\n    right: window.innerWidth\n  };\n  var ctRect = (container === window || container === document.body)\n    ? bodyRect : container\n    ? container.getBoundingClientRect() : bodyRect;\n  return hasIntersection(el.getBoundingClientRect(), ctRect, dir, offset)\n}\n\n// to trigger the appear/disappear event.\nfunction triggerEvent (elm, handlers, evt, dir) {\n  var listener = handlers[evt];\n  if (listener && listener.fn) {\n    listener = listener.fn;\n  }\n  if (listener) {\n    listener(createEvent(elm, evt, {\n      direction: dir\n    }));\n  }\n}\n\n/**\n * get all event listeners. including bound handlers in all parent vnodes.\n */\nfunction getEventHandlers (context) {\n  var vnode = context.$vnode;\n  var handlers = {};\n  var attachedVnodes = [];\n  while (vnode) {\n    attachedVnodes.push(vnode);\n    vnode = vnode.parent;\n  }\n  attachedVnodes.forEach(function (vnode) {\n    var parentListeners = vnode.componentOptions && vnode.componentOptions.listeners;\n    var dataOn = vnode.data && vnode.data.on;\n    extend(handlers, parentListeners, dataOn);\n  });\n  return handlers\n}\n\nfunction getAppearOffset (el) {\n  return el && el.getAttribute('appear-offset')\n}\n\nfunction checkHandlers (handlers) {\n  return [\n    !!(handlers.appear || handlers.disappear),\n    !!(handlers.offsetAppear || handlers.offsetDisappear)\n  ]\n}\n\n/**\n * Watch element's visibility to tell whether should trigger a appear/disappear\n * event in scroll handler.\n */\nfunction watchAppear (context, fireNow) {\n  var el = context && context.$el;\n  if (!el || el.nodeType !== 1) { return }\n  var appearOffset = getAppearOffset(el);\n\n  var handlers = getEventHandlers(context);\n  var checkResults = checkHandlers(handlers);\n  // no appear or offsetAppear handler was bound.\n  if (!checkResults[0] && !checkResults[1]) {\n    return\n  }\n\n  var isWindow = false;\n  var container = window;\n  var scroller = getParentScroller(context);\n  if (scroller && scroller.$el) {\n    container = scroller.$el;\n  }\n  else {\n    isWindow = true;\n  }\n\n  if (fireNow) {\n    var visibleData = isElementVisible(el, container, null, appearOffset);\n    detectAppear(context, visibleData, null);\n  }\n\n  // add current vm to the container's appear watch list.\n  if (!container._watchAppearList) {\n    container._watchAppearList = [];\n  }\n  container._watchAppearList.push(context);\n\n  /**\n   * Code below will only exec once for binding scroll handler for parent container.\n   */\n  if (container._scrollWatched) {\n    return\n  }\n  container._scrollWatched = true;\n  var scrollHandler = throttle(function (event) {\n    /**\n     * detect scrolling direction.\n     * direction only support up & down yet.\n     * TODO: direction support left & right.\n     */\n    var scrollTop = isWindow ? window.pageYOffset : container.scrollTop;\n    var preTop = container._lastScrollTop;\n    container._lastScrollTop = scrollTop;\n    var dir = (scrollTop < preTop\n      ? 'down' : scrollTop > preTop\n      ? 'up' : container._prevDirection) || null;\n    container._prevDirection = dir;\n    var watchAppearList = container._watchAppearList || [];\n    var len = watchAppearList.length;\n    for (var i = 0; i < len; i++) {\n      var vm = watchAppearList[i];\n      var el = vm.$el;\n      var appearOffset = getAppearOffset(el);\n      var visibleData = isElementVisible(el, container, dir, appearOffset);\n      detectAppear(vm, visibleData, dir);\n    }\n  }, 25, true);\n  container.addEventListener('scroll', scrollHandler, false);\n  /**\n   * In case the users use the body's overflow to scroll. Then the scroll\n   * event would not be handled on the window object but on the body.\n   */\n  if (isWindow) {\n    document.body.addEventListener('scroll', scrollHandler, false);\n  }\n}\n\n/**\n * trigger a disappear event.\n */\nfunction triggerDisappear (context) {\n  return detectAppear(context, [false, false])\n}\n\n/**\n * decide whether to trigger a appear/disappear event.\n * @param {VueComponent} context\n * @param {boolean} visible\n * @param {string} dir\n */\nfunction detectAppear (context, visibleData, dir, appearOffset) {\n  if ( dir === void 0 ) dir = null;\n\n  var el = context && context.$el;\n  var visible = visibleData[0];\n  var offsetVisible = visibleData[1];\n  if (!el) { return }\n  var handlers = getEventHandlers(context);\n  /**\n   * No matter it's binding appear/disappear or both of them. Always\n   * should test it's visibility and change the context/._visible.\n   * If neithor of them was bound, then just ignore it.\n   */\n  /**\n   * if the component hasn't appeared for once yet, then it shouldn't trigger\n   * a disappear event at all.\n   */\n  if (context._appearedOnce || visible) {\n    if (context._visible !== visible) {\n      if (!context._appearedOnce) {\n        context._appearedOnce = true;\n      }\n      context._visible = visible;\n      triggerEvent(el, handlers, visible ? 'appear' : 'disappear', dir);\n    }\n  }\n  if (context._offsetAppearedOnce || offsetVisible) {\n    if (context._offsetVisible !== offsetVisible) {\n      if (!context._offsetAppearedOnce) {\n        context._offsetAppearedOnce = true;\n      }\n      context._offsetVisible = offsetVisible;\n      triggerEvent(el, handlers, offsetVisible ? 'offsetAppear' : 'offsetDisappear', dir);\n    }\n  }\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// \n\nfunction preLoadImg (src,\n    loadCallback,\n    errorCallback) {\n  var img = new Image();\n  img.onload = loadCallback ? loadCallback.bind(img) : null;\n  img.onerror = errorCallback ? errorCallback.bind(img) : null;\n  img.src = src;\n}\n\nfunction applySrc (item, src, placeholderSrc) {\n  if (!src) { return }\n  function finallCb () {\n    delete item._src_loading;\n  }\n  if (item._src_loading === src) {\n    return\n  }\n  /**\n   * 1. apply src immediately in case javscript blocks the image loading\n   *  before next tick.\n   */\n  item.style.backgroundImage = \"url(\" + (src || '') + \")\";\n  item.removeAttribute('img-src');\n  /**\n   * 2. then load the img src with Image constructor (but would not post\n   *  a request again), just to trigger the load event.\n   */\n  item._src_loading = src;\n  preLoadImg(src, function (evt) {\n    item.style.backgroundImage = \"url(\" + (src || '') + \")\";\n    var ref = this;\n    var naturalWidth = ref.width;\n    var naturalHeight = ref.height;\n    var params = {\n      success: true,\n      size: { naturalWidth: naturalWidth, naturalHeight: naturalHeight }\n    };\n    dispatchEvent(item, createEvent(item, 'load', params));\n    finallCb();\n  }, function (evt) {\n    var params = {\n      success: false,\n      size: { naturalWidth: 0, naturalHeight: 0 }\n    };\n    dispatchEvent(item, createEvent(item, 'load', params));\n    if (placeholderSrc) {\n      preLoadImg(placeholderSrc, function () {\n        item.style.backgroundImage = \"url(\" + (placeholderSrc || '') + \")\";\n      });\n    }\n    finallCb();\n  });\n}\n\nfunction getCtScroller (el) {\n  if (!el) { return }\n  var scroller = el._ptScroller;\n  if (!scroller) {\n    var pt = el.parentElement;\n    while (pt && pt !== document.body) {\n      if ((pt.className + '' || '').match(/weex-list|weex-scroller|weex-waterfall/)) {\n        scroller = pt;\n        break\n      }\n      pt = pt.parentElement;\n    }\n    scroller = pt;\n    el._ptScroller = pt;\n  }\n  return scroller\n}\n\nfunction fireLazyload (el, ignoreVisibility) {\n  if (Array.isArray(el)) {\n    return el.forEach(function (ct) { return fireLazyload(ct); })\n  }\n  el = el || document.body;\n  if (!el) { return }\n  var imgs = (el || document.body).querySelectorAll('[img-src]');\n  if (el.getAttribute('img-src')) { imgs = [el]; }\n  for (var i = 0; i < imgs.length; i++) {\n    var img = imgs[i];\n    if (typeof ignoreVisibility === 'boolean' && ignoreVisibility) {\n      applySrc(img, img.getAttribute('img-src'), img.getAttribute('img-placeholder'));\n    }\n    else if (isElementVisible(img, getCtScroller(el))[0]) {\n      applySrc(img, img.getAttribute('img-src'), img.getAttribute('img-placeholder'));\n    }\n  }\n}\n\n/**\n * cache a throttle lazyload function for every container element\n * once for different wait times separate.\n *   the architecture of this cache:\n *      cache: {\n *        el.id: {\n *          wait: throttledFunction () { ... }\n *        }\n *      }\n */\nvar cache = {};\nvar _uid$2 = 1;\nfunction getThrottleLazyload (wait, el) {\n  if ( wait === void 0 ) wait = 16;\n  if ( el === void 0 ) el = document.body;\n\n  var id = +(el && el.dataset.throttleId);\n  if (isNaN(id) || id <= 0) {\n    id = _uid$2++;\n    el && el.setAttribute('data-throttle-id', id + '');\n  }\n\n  !cache[id] && (cache[id] = {});\n  var throttled = cache[id][wait] ||\n    (cache[id][wait] = throttle(\n      fireLazyload.bind(this, el),\n      parseFloat(wait),\n      // true for callLastTime.\n      // to trigger once more time after the last throttled function called with a little more delay.\n      true)\n    );\n  return throttled\n}\n\nvar capitalizeString_1 = createCommonjsModule(function (module, exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = capitalizeString;\nfunction capitalizeString(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nmodule.exports = exports[\"default\"];\n});\n\nvar prefixProperty_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = prefixProperty;\n\nvar _capitalizeString = capitalizeString_1;\n\nvar _capitalizeString2 = _interopRequireDefault(_capitalizeString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction prefixProperty(prefixProperties, property, style) {\n  if (prefixProperties.hasOwnProperty(property)) {\n    var requiredPrefixes = prefixProperties[property];\n    for (var i = 0, len = requiredPrefixes.length; i < len; ++i) {\n      style[requiredPrefixes[i] + (0, _capitalizeString2.default)(property)] = style[property];\n    }\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar prefixValue_1 = createCommonjsModule(function (module, exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = prefixValue;\nfunction prefixValue(plugins, property, value, style, metaData) {\n  for (var i = 0, len = plugins.length; i < len; ++i) {\n    var processedValue = plugins[i](property, value, style, metaData);\n\n    // we can stop processing if a value is returned\n    // as all plugin criteria are unique\n    if (processedValue) {\n      return processedValue;\n    }\n  }\n}\nmodule.exports = exports[\"default\"];\n});\n\nvar addNewValuesOnly_1 = createCommonjsModule(function (module, exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = addNewValuesOnly;\nfunction addIfNew(list, value) {\n  if (list.indexOf(value) === -1) {\n    list.push(value);\n  }\n}\n\nfunction addNewValuesOnly(list, values) {\n  if (Array.isArray(values)) {\n    for (var i = 0, len = values.length; i < len; ++i) {\n      addIfNew(list, values[i]);\n    }\n  } else {\n    addIfNew(list, values);\n  }\n}\nmodule.exports = exports[\"default\"];\n});\n\nvar isObject_1 = createCommonjsModule(function (module, exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isObject;\nfunction isObject(value) {\n  return value instanceof Object && !Array.isArray(value);\n}\nmodule.exports = exports[\"default\"];\n});\n\nvar createPrefixer_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createPrefixer;\n\nvar _prefixProperty = prefixProperty_1;\n\nvar _prefixProperty2 = _interopRequireDefault(_prefixProperty);\n\nvar _prefixValue = prefixValue_1;\n\nvar _prefixValue2 = _interopRequireDefault(_prefixValue);\n\nvar _addNewValuesOnly = addNewValuesOnly_1;\n\nvar _addNewValuesOnly2 = _interopRequireDefault(_addNewValuesOnly);\n\nvar _isObject = isObject_1;\n\nvar _isObject2 = _interopRequireDefault(_isObject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createPrefixer(_ref) {\n  var prefixMap = _ref.prefixMap,\n      plugins = _ref.plugins;\n\n  function prefixAll(style) {\n    for (var property in style) {\n      var value = style[property];\n\n      // handle nested objects\n      if ((0, _isObject2.default)(value)) {\n        style[property] = prefixAll(value);\n        // handle array values\n      } else if (Array.isArray(value)) {\n        var combinedValue = [];\n\n        for (var i = 0, len = value.length; i < len; ++i) {\n          var processedValue = (0, _prefixValue2.default)(plugins, property, value[i], style, prefixMap);\n          (0, _addNewValuesOnly2.default)(combinedValue, processedValue || value[i]);\n        }\n\n        // only modify the value if it was touched\n        // by any plugin to prevent unnecessary mutations\n        if (combinedValue.length > 0) {\n          style[property] = combinedValue;\n        }\n      } else {\n        var _processedValue = (0, _prefixValue2.default)(plugins, property, value, style, prefixMap);\n\n        // only modify the value if it was touched\n        // by any plugin to prevent unnecessary mutations\n        if (_processedValue) {\n          style[property] = _processedValue;\n        }\n\n        (0, _prefixProperty2.default)(prefixMap, property, style);\n      }\n    }\n\n    return style;\n  }\n\n  return prefixAll;\n}\nmodule.exports = exports['default'];\n});\n\nvar staticData = createCommonjsModule(function (module, exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar w = [\"Webkit\"];\nvar m = [\"Moz\"];\nvar ms = [\"ms\"];\nvar wm = [\"Webkit\", \"Moz\"];\nvar wms = [\"Webkit\", \"ms\"];\nvar wmms = [\"Webkit\", \"Moz\", \"ms\"];\n\nexports.default = {\n  plugins: [],\n  prefixMap: { \"appearance\": wm, \"userSelect\": wmms, \"textEmphasisPosition\": w, \"textEmphasis\": w, \"textEmphasisStyle\": w, \"textEmphasisColor\": w, \"boxDecorationBreak\": w, \"clipPath\": w, \"maskImage\": w, \"maskMode\": w, \"maskRepeat\": w, \"maskPosition\": w, \"maskClip\": w, \"maskOrigin\": w, \"maskSize\": w, \"maskComposite\": w, \"mask\": w, \"maskBorderSource\": w, \"maskBorderMode\": w, \"maskBorderSlice\": w, \"maskBorderWidth\": w, \"maskBorderOutset\": w, \"maskBorderRepeat\": w, \"maskBorder\": w, \"maskType\": w, \"textDecorationStyle\": w, \"textDecorationSkip\": w, \"textDecorationLine\": w, \"textDecorationColor\": w, \"filter\": w, \"fontFeatureSettings\": w, \"breakAfter\": wmms, \"breakBefore\": wmms, \"breakInside\": wmms, \"columnCount\": wm, \"columnFill\": wm, \"columnGap\": wm, \"columnRule\": wm, \"columnRuleColor\": wm, \"columnRuleStyle\": wm, \"columnRuleWidth\": wm, \"columns\": wm, \"columnSpan\": wm, \"columnWidth\": wm, \"writingMode\": wms, \"flex\": w, \"flexBasis\": w, \"flexDirection\": w, \"flexGrow\": w, \"flexFlow\": w, \"flexShrink\": w, \"flexWrap\": w, \"alignContent\": w, \"alignItems\": w, \"alignSelf\": w, \"justifyContent\": w, \"order\": w, \"transform\": w, \"transformOrigin\": w, \"transformOriginX\": w, \"transformOriginY\": w, \"backfaceVisibility\": w, \"perspective\": w, \"perspectiveOrigin\": w, \"transformStyle\": w, \"transformOriginZ\": w, \"animation\": w, \"animationDelay\": w, \"animationDirection\": w, \"animationFillMode\": w, \"animationDuration\": w, \"animationIterationCount\": w, \"animationName\": w, \"animationPlayState\": w, \"animationTimingFunction\": w, \"backdropFilter\": w, \"fontKerning\": w, \"scrollSnapType\": wms, \"scrollSnapPointsX\": wms, \"scrollSnapPointsY\": wms, \"scrollSnapDestination\": wms, \"scrollSnapCoordinate\": wms, \"shapeImageThreshold\": w, \"shapeImageMargin\": w, \"shapeImageOutside\": w, \"hyphens\": wmms, \"flowInto\": wms, \"flowFrom\": wms, \"regionFragment\": wms, \"textAlignLast\": m, \"tabSize\": m, \"wrapFlow\": ms, \"wrapThrough\": ms, \"wrapMargin\": ms, \"gridTemplateColumns\": ms, \"gridTemplateRows\": ms, \"gridTemplateAreas\": ms, \"gridTemplate\": ms, \"gridAutoColumns\": ms, \"gridAutoRows\": ms, \"gridAutoFlow\": ms, \"grid\": ms, \"gridRowStart\": ms, \"gridColumnStart\": ms, \"gridRowEnd\": ms, \"gridRow\": ms, \"gridColumn\": ms, \"gridColumnEnd\": ms, \"gridColumnGap\": ms, \"gridRowGap\": ms, \"gridArea\": ms, \"gridGap\": ms, \"textSizeAdjust\": wms, \"borderImage\": w, \"borderImageOutset\": w, \"borderImageRepeat\": w, \"borderImageSlice\": w, \"borderImageSource\": w, \"borderImageWidth\": w, \"transitionDelay\": w, \"transitionDuration\": w, \"transitionProperty\": w, \"transitionTimingFunction\": w }\n};\nmodule.exports = exports[\"default\"];\n});\n\nvar cursor_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cursor;\nvar prefixes = ['-webkit-', '-moz-', ''];\n\nvar values = {\n  'zoom-in': true,\n  'zoom-out': true,\n  grab: true,\n  grabbing: true\n};\n\nfunction cursor(property, value) {\n  if (property === 'cursor' && values.hasOwnProperty(value)) {\n    return prefixes.map(function (prefix) {\n      return prefix + value;\n    });\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar isPrefixedValue_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPrefixedValue;\nvar regex = /-webkit-|-moz-|-ms-/;\n\nfunction isPrefixedValue(value) {\n  return typeof value === 'string' && regex.test(value);\n}\nmodule.exports = exports['default'];\n});\n\nvar crossFade_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = crossFade;\n\nvar _isPrefixedValue = isPrefixedValue_1;\n\nvar _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// http://caniuse.com/#search=cross-fade\nvar prefixes = ['-webkit-', ''];\nfunction crossFade(property, value) {\n  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('cross-fade(') > -1) {\n    return prefixes.map(function (prefix) {\n      return value.replace(/cross-fade\\(/g, prefix + 'cross-fade(');\n    });\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar filter_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = filter;\n\nvar _isPrefixedValue = isPrefixedValue_1;\n\nvar _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// http://caniuse.com/#feat=css-filter-function\nvar prefixes = ['-webkit-', ''];\nfunction filter(property, value) {\n  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('filter(') > -1) {\n    return prefixes.map(function (prefix) {\n      return value.replace(/filter\\(/g, prefix + 'filter(');\n    });\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar flex_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flex;\nvar values = {\n  flex: ['-webkit-box', '-moz-box', '-ms-flexbox', '-webkit-flex', 'flex'],\n  'inline-flex': ['-webkit-inline-box', '-moz-inline-box', '-ms-inline-flexbox', '-webkit-inline-flex', 'inline-flex']\n};\n\nfunction flex(property, value) {\n  if (property === 'display' && values.hasOwnProperty(value)) {\n    return values[value];\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar flexboxOld_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flexboxOld;\nvar alternativeValues = {\n  'space-around': 'justify',\n  'space-between': 'justify',\n  'flex-start': 'start',\n  'flex-end': 'end',\n  'wrap-reverse': 'multiple',\n  wrap: 'multiple'\n};\n\nvar alternativeProps = {\n  alignItems: 'WebkitBoxAlign',\n  justifyContent: 'WebkitBoxPack',\n  flexWrap: 'WebkitBoxLines'\n};\n\nfunction flexboxOld(property, value, style) {\n  if (property === 'flexDirection' && typeof value === 'string') {\n    if (value.indexOf('column') > -1) {\n      style.WebkitBoxOrient = 'vertical';\n    } else {\n      style.WebkitBoxOrient = 'horizontal';\n    }\n    if (value.indexOf('reverse') > -1) {\n      style.WebkitBoxDirection = 'reverse';\n    } else {\n      style.WebkitBoxDirection = 'normal';\n    }\n  }\n  if (alternativeProps.hasOwnProperty(property)) {\n    style[alternativeProps[property]] = alternativeValues[value] || value;\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar gradient_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = gradient;\n\nvar _isPrefixedValue = isPrefixedValue_1;\n\nvar _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar prefixes = ['-webkit-', '-moz-', ''];\n\nvar values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;\n\nfunction gradient(property, value) {\n  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {\n    return prefixes.map(function (prefix) {\n      return prefix + value;\n    });\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar imageSet_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = imageSet;\n\nvar _isPrefixedValue = isPrefixedValue_1;\n\nvar _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// http://caniuse.com/#feat=css-image-set\nvar prefixes = ['-webkit-', ''];\nfunction imageSet(property, value) {\n  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('image-set(') > -1) {\n    return prefixes.map(function (prefix) {\n      return value.replace(/image-set\\(/g, prefix + 'image-set(');\n    });\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar position_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = position;\nfunction position(property, value) {\n  if (property === 'position' && value === 'sticky') {\n    return ['-webkit-sticky', 'sticky'];\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar sizing_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sizing;\nvar prefixes = ['-webkit-', '-moz-', ''];\n\nvar properties = {\n  maxHeight: true,\n  maxWidth: true,\n  width: true,\n  height: true,\n  columnWidth: true,\n  minWidth: true,\n  minHeight: true\n};\nvar values = {\n  'min-content': true,\n  'max-content': true,\n  'fill-available': true,\n  'fit-content': true,\n  'contain-floats': true\n};\n\nfunction sizing(property, value) {\n  if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {\n    return prefixes.map(function (prefix) {\n      return prefix + value;\n    });\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar uppercasePattern = /[A-Z]/g;\nvar msPattern = /^ms-/;\nvar cache$1 = {};\n\nfunction hyphenateStyleName(string) {\n    return string in cache$1\n    ? cache$1[string]\n    : cache$1[string] = string\n      .replace(uppercasePattern, '-$&')\n      .toLowerCase()\n      .replace(msPattern, '-ms-');\n}\n\nvar index$2 = hyphenateStyleName;\n\nvar hyphenateProperty_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hyphenateProperty;\n\nvar _hyphenateStyleName = index$2;\n\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction hyphenateProperty(property) {\n  return (0, _hyphenateStyleName2.default)(property);\n}\nmodule.exports = exports['default'];\n});\n\nvar transition_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transition;\n\nvar _hyphenateProperty = hyphenateProperty_1;\n\nvar _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);\n\nvar _isPrefixedValue = isPrefixedValue_1;\n\nvar _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);\n\nvar _capitalizeString = capitalizeString_1;\n\nvar _capitalizeString2 = _interopRequireDefault(_capitalizeString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar properties = {\n  transition: true,\n  transitionProperty: true,\n  WebkitTransition: true,\n  WebkitTransitionProperty: true,\n  MozTransition: true,\n  MozTransitionProperty: true\n};\n\n\nvar prefixMapping = {\n  Webkit: '-webkit-',\n  Moz: '-moz-',\n  ms: '-ms-'\n};\n\nfunction prefixValue(value, propertyPrefixMap) {\n  if ((0, _isPrefixedValue2.default)(value)) {\n    return value;\n  }\n\n  // only split multi values, not cubic beziers\n  var multipleValues = value.split(/,(?![^()]*(?:\\([^()]*\\))?\\))/g);\n\n  for (var i = 0, len = multipleValues.length; i < len; ++i) {\n    var singleValue = multipleValues[i];\n    var values = [singleValue];\n    for (var property in propertyPrefixMap) {\n      var dashCaseProperty = (0, _hyphenateProperty2.default)(property);\n\n      if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {\n        var prefixes = propertyPrefixMap[property];\n        for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {\n          // join all prefixes and create a new value\n          values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes[j]] + dashCaseProperty));\n        }\n      }\n    }\n\n    multipleValues[i] = values.join(',');\n  }\n\n  return multipleValues.join(',');\n}\n\nfunction transition(property, value, style, propertyPrefixMap) {\n  // also check for already prefixed transitions\n  if (typeof value === 'string' && properties.hasOwnProperty(property)) {\n    var outputValue = prefixValue(value, propertyPrefixMap);\n    // if the property is already prefixed\n    var webkitOutput = outputValue.split(/,(?![^()]*(?:\\([^()]*\\))?\\))/g).filter(function (val) {\n      return !/-moz-|-ms-/.test(val);\n    }).join(',');\n\n    if (property.indexOf('Webkit') > -1) {\n      return webkitOutput;\n    }\n\n    var mozOutput = outputValue.split(/,(?![^()]*(?:\\([^()]*\\))?\\))/g).filter(function (val) {\n      return !/-webkit-|-ms-/.test(val);\n    }).join(',');\n\n    if (property.indexOf('Moz') > -1) {\n      return mozOutput;\n    }\n\n    style['Webkit' + (0, _capitalizeString2.default)(property)] = webkitOutput;\n    style['Moz' + (0, _capitalizeString2.default)(property)] = mozOutput;\n    return outputValue;\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar index$1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createPrefixer = createPrefixer_1;\n\nvar _createPrefixer2 = _interopRequireDefault(_createPrefixer);\n\nvar _staticData = staticData;\n\nvar _staticData2 = _interopRequireDefault(_staticData);\n\nvar _cursor = cursor_1;\n\nvar _cursor2 = _interopRequireDefault(_cursor);\n\nvar _crossFade = crossFade_1;\n\nvar _crossFade2 = _interopRequireDefault(_crossFade);\n\nvar _filter = filter_1;\n\nvar _filter2 = _interopRequireDefault(_filter);\n\nvar _flex = flex_1;\n\nvar _flex2 = _interopRequireDefault(_flex);\n\nvar _flexboxOld = flexboxOld_1;\n\nvar _flexboxOld2 = _interopRequireDefault(_flexboxOld);\n\nvar _gradient = gradient_1;\n\nvar _gradient2 = _interopRequireDefault(_gradient);\n\nvar _imageSet = imageSet_1;\n\nvar _imageSet2 = _interopRequireDefault(_imageSet);\n\nvar _position = position_1;\n\nvar _position2 = _interopRequireDefault(_position);\n\nvar _sizing = sizing_1;\n\nvar _sizing2 = _interopRequireDefault(_sizing);\n\nvar _transition = transition_1;\n\nvar _transition2 = _interopRequireDefault(_transition);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar plugins = [_crossFade2.default, _cursor2.default, _filter2.default, _flexboxOld2.default, _gradient2.default, _imageSet2.default, _position2.default, _sizing2.default, _transition2.default, _flex2.default];\n\nexports.default = (0, _createPrefixer2.default)({\n  prefixMap: _staticData2.default.prefixMap,\n  plugins: plugins\n});\nmodule.exports = exports['default'];\n});\n\nvar addPrefix = unwrapExports(index$1);\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// \n\nvar noUnitsNumberKeys = [\n  'flex',\n  'opacity',\n  'zIndex',\n  'fontWeight',\n  'lines'\n];\n\n// whether to support using 0.5px to paint 1px width border.\nvar _supportHairlines;\nfunction supportHairlines () {\n  if (typeof _supportHairlines === 'undefined') {\n    var dpr = window.devicePixelRatio;\n    if (dpr && dpr >= 2 && document.documentElement) {\n      var docElm = document.documentElement;\n      var testElm = document.createElement('div');\n      var fakeBody = document.createElement('body');\n      var beforeNode = docElm.firstElementChild || docElm.firstChild;\n      testElm.style.border = '0.5px solid transparent';\n      fakeBody.appendChild(testElm);\n      docElm.insertBefore(fakeBody, beforeNode);\n      _supportHairlines = testElm.offsetHeight === 1;\n      docElm.removeChild(fakeBody);\n    }\n    else {\n      _supportHairlines = false;\n    }\n  }\n  return _supportHairlines\n}\n\n/**\n * remove comments from a cssText.\n */\nfunction trimComment (cssText) {\n  return cssText.replace(/(?:\\/\\*)[\\s\\S]*?\\*\\//g, '')\n}\n\nvar support$1 = null;\n\nfunction supportSticky () {\n  if (support$1 !== null) {\n    return support$1\n  }\n  var element = window.document.createElement('div');\n  var elementStyle = element.style;\n  elementStyle.cssText = 'position:-webkit-sticky;position:sticky;';\n  support$1 = elementStyle.position.indexOf('sticky') !== -1;\n  return support$1\n}\n\nvar regPercentage = /^[+-]?\\d+(\\.\\d+)?%$/;\nfunction isPercentage (val) {\n  return regPercentage.test(val)\n}\n\nvar regUnitsNum = /^([+-]?\\d+(?:\\.\\d+)?)([p,w]x)?$/; // support units: px, wx.\nfunction normalizeUnitsNum (val) {\n  var match = val.match(regUnitsNum);\n  if (!match) { return '' }\n  var unit = 'px'; // px by default.\n  if (match[2]) {\n    unit = match[2];\n  }\n  return parseScale(parseFloat(match[1]), unit)\n}\n\nfunction getUnitScaleMap () {\n  var ref = getViewportInfo();\n  var scale = ref.scale;\n  return {\n    px: scale,\n    wx: 1 // use px straight, not adaptable to screens.\n  }\n}\n\nfunction limitScale (val, limit) {\n  limit = limit || 1;\n  var sign = val === 0 ? 0 : val > 0 ? 1 : -1;\n  var newVal = Math.abs(val) > limit ? val : sign * limit;\n  // support 1px device width.\n  if (newVal === 1 && val < 1 && supportHairlines()) {\n    newVal = 0.5;\n  }\n  return newVal\n}\n\nfunction parseScale (val, unit) {\n  var unitScaleMap = getUnitScaleMap();\n  return limitScale(val * unitScaleMap[unit]) + 'px'\n}\n\nfunction normalizeString (styleKey, styleVal) {\n  if (isPercentage(styleVal)) {\n    return styleVal\n  }\n\n  /**\n   * 1. test if is a regular scale css. e.g. `width: 100px;`\n   *  this should be a standalone number value with or without unit, otherwise\n   *  it shouldn't be changed.\n   */\n  var unitsNum = normalizeUnitsNum(styleVal);\n  if (unitsNum) { return unitsNum }\n\n  /**\n   * 2. if a string contains multiple px values, than they should be all normalized.\n   *  values should have wx or px units, otherwise they should be left unchanged.\n   *  e.g.\n   *    transform: translate(10px, 6px, 0)\n   *    border: 2px solid red\n   */\n  var numReg = /([+-]?[\\d.]+)([p,w]x)/ig;\n  if (numReg.test(styleVal)) {\n    var unitScaleMap = getUnitScaleMap();\n    var val = styleVal.replace(numReg, function (m, $0, $1) {\n      var res = parseFloat($0) * unitScaleMap[$1];\n      return limitScale(res) + 'px'\n    });\n    return val\n  }\n\n  // otherwise\n  return styleVal\n}\n\nfunction autoPrefix (style) {\n  var prefixed = addPrefix(style);\n  // flex only added WebkitFlex. Should add WebkitBoxFlex also.\n  var flex = prefixed.flex;\n  if (flex) {\n    prefixed.WebkitBoxFlex = flex;\n    prefixed.MozBoxFlex = flex;\n    prefixed.MsFlex = flex;\n  }\n  return prefixed\n}\n\nfunction normalizeNumber (styleKey, styleVal) {\n  var ref = getViewportInfo();\n  var scale = ref.scale;\n  return styleVal * scale + 'px'\n}\n\n/**\n * normalize style to adapte to current viewport by multiply current scale.\n * @param  {object} style: should be camelCase.\n */\nfunction normalizeStyle (style) {\n  var res = {};\n  for (var key in style) {\n    var val = style[key];\n    if (noUnitsNumberKeys.indexOf(key) > -1) {\n      res[key] = val;\n      continue\n    }\n    switch (typeof val) {\n      case 'string':\n        res[key] = normalizeString(key, val);\n        break\n      case 'number':\n        res[key] = normalizeNumber(key, val);\n        break\n      default:\n        res[key] = val;\n        break\n    }\n  }\n  return res\n}\n\n/**\n * get transformObj\n */\nfunction getTransformObj (elm) {\n  var styleObj = {};\n  if (!elm) { return styleObj }\n  var transformStr = elm.style.webkitTransform\n    || elm.style.mozTransform\n    || elm.style.transform;\n  if (transformStr && transformStr.match(/(?: *(?:translate|rotate|scale)[^(]*\\([^(]+\\))+/i)) {\n    styleObj = transformStr.trim().replace(/, +/g, ',').split(' ').reduce(function (pre, str) {\n      ['translate', 'scale', 'rotate'].forEach(function (name) {\n        if (new RegExp(name, 'i').test(str)) {\n          pre[name] = str;\n        }\n      });\n      return pre\n    }, {});\n  }\n  return styleObj\n}\n\n/**\n * translate a transform string from a transformObj.\n */\nfunction getTransformStr (obj) {\n  return Object.keys(obj).reduce(function (pre, key) {\n    return pre + obj[key] + ' '\n  }, '')\n}\n\n/**\n * add transform style to element.\n * @param {HTMLElement} elm\n * @param {object} style: transform object, format is like this:\n *   {\n *     translate: 'translate3d(2px, 2px, 2px)',\n *     scale: 'scale(0.2)',\n *     rotate: 'rotate(30deg)'\n *   }\n * @param {boolean} replace: whether to replace all transform properties.\n */\nfunction addTransform (elm, style, replace) {\n  if (!style) { return }\n  var styleObj = {};\n  if (!replace) {\n    styleObj = getTransformObj(elm);\n  }\n  for (var key in style) {\n    var val = style[key];\n    if (val) {\n      styleObj[key] = val;\n    }\n  }\n  var resStr = getTransformStr(styleObj);\n  elm.style.webkitTransform = resStr;\n  elm.style.mozTransform = resStr;\n  elm.style.transform = resStr;\n}\n\n/**\n * add translate X to the element.\n */\nfunction addTranslateX (elm, toAdd) {\n  if (!toAdd) { return }\n  var styleObj = getTransformObj(elm);\n  if (!styleObj.translate) {\n    styleObj.translate = 'translate3d(0px, 0px, 0px)';\n  }\n  styleObj.translate = styleObj.translate.replace(/[+-\\d.]+[pw]x/, function ($0) {\n    return (parseFloat($0) + toAdd) + 'px'\n  });\n  var resStr = getTransformStr(styleObj);\n  elm.style.webkitTransform = resStr;\n  elm.style.mozTransform = resStr;\n  elm.style.transform = resStr;\n}\n\n/**\n * copy a transform behaviour from one element to another.\n * key could be: 'translate' | 'scale' | 'rotate'\n */\nfunction copyTransform (from, to, key) {\n  var str;\n  if (!key) {\n    str = from.style.webkitTransform\n      || from.style.mozTransform\n      || from.style.transform;\n  }\n  else {\n    var fromObj = getTransformObj(from);\n    if (!fromObj[key]) { return }\n    var toObj = getTransformObj(to);\n    toObj[key] = fromObj[key];\n    str = getTransformStr(toObj);\n  }\n  to.style.webkitTransform = str;\n  to.style.mozTransform = str;\n  to.style.transform = str;\n}\n\n/**\n * get color's r, g, b value.\n * @param {string} color support all kinds of value of color.\n */\nfunction getRgb (color) {\n  var haxReg = /#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/;\n  var rgbReg = /rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/;\n  var span = document.createElement('span');\n  var body = document.body;\n  span.style.cssText = \"color: \" + color + \"; width: 0px; height: 0px;\";\n  body && body.appendChild(span);\n  color = window.getComputedStyle(span).color + '';\n  body && body.removeChild(span);\n\n  var match;\n  match = color.match(haxReg);\n  if (match) {\n    return {\n      r: parseInt(match[1], 16),\n      g: parseInt(match[2], 16),\n      b: parseInt(match[3], 16)\n    }\n  }\n  match = color.match(rgbReg);\n  if (match) {\n    return {\n      r: parseInt(match[1]),\n      g: parseInt(match[2]),\n      b: parseInt(match[3])\n    }\n  }\n}\n\n/**\n * get style sheet with owner node's id\n * @param {string} id owner node id.\n */\nfunction getStyleSheetById (id) {\n  if (!id) { return }\n  var styleSheets = document.styleSheets;\n  var len = styleSheets.length;\n  for (var i = 0; i < len; i++) {\n    var styleSheet = styleSheets[i];\n    if (styleSheet.ownerNode.id === id) {\n      return styleSheet\n    }\n  }\n}\n\nfunction getChildrenTotalWidth (children) {\n  var len = children.length;\n  var total = 0;\n  for (var i = 0; i < len; i++) {\n    total += children[i].getBoundingClientRect().width;\n  }\n  return total\n}\n/**\n * get total content width of the element.\n * @param {HTMLElement} elm\n */\nfunction getRangeWidth (elm) {\n  var children = elm.children;\n  if (!children) {\n    return elm.getBoundingClientRect().width\n  }\n  if (!Range) {\n    return getChildrenTotalWidth(children)\n  }\n  var range = document.createRange();\n  if (!range.selectNodeContents) {\n    return getChildrenTotalWidth(children)\n  }\n  range.selectNodeContents(elm);\n  return range.getBoundingClientRect().width\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\nvar utils = Object.freeze({\n\textend: extend,\n\textendTruthy: extendTruthy,\n\textendKeys: extendKeys,\n\textractKeys: extractKeys,\n\tbind: bind,\n\tdebounce: debounce,\n\tdepress: depress,\n\tthrottle: throttle,\n\tloopArray: loopArray,\n\tcached: cached,\n\tcamelize: camelize,\n\tcamelizeKeys: camelizeKeys,\n\tcapitalize: capitalize,\n\thyphenate: hyphenate,\n\thyphenateKeys: hyphenateKeys,\n\thyphenateStyleKeys: hyphenateStyleKeys,\n\tcamelToKebab: camelToKebab,\n\tappendCss: appendCss,\n\tnextFrame: nextFrame,\n\ttoCSSText: toCSSText,\n\tsupportsPassive: supportsPassive,\n\tcreateEvent: createEvent,\n\tcreateBubblesEvent: createBubblesEvent,\n\tcreateCustomEvent: createCustomEvent,\n\tdispatchEvent: dispatchEvent,\n\tmapFormEvents: mapFormEvents,\n\tgetParentScroller: getParentScroller,\n\thasIntersection: hasIntersection,\n\tisElementVisible: isElementVisible,\n\tgetEventHandlers: getEventHandlers,\n\twatchAppear: watchAppear,\n\ttriggerDisappear: triggerDisappear,\n\tdetectAppear: detectAppear,\n\tapplySrc: applySrc,\n\tfireLazyload: fireLazyload,\n\tgetThrottleLazyload: getThrottleLazyload,\n\tsupportHairlines: supportHairlines,\n\ttrimComment: trimComment,\n\tsupportSticky: supportSticky,\n\tisPercentage: isPercentage,\n\tnormalizeUnitsNum: normalizeUnitsNum,\n\tnormalizeString: normalizeString,\n\tautoPrefix: autoPrefix,\n\tnormalizeNumber: normalizeNumber,\n\tnormalizeStyle: normalizeStyle,\n\tgetTransformObj: getTransformObj,\n\tgetTransformStr: getTransformStr,\n\taddTransform: addTransform,\n\taddTranslateX: addTranslateX,\n\tcopyTransform: copyTransform,\n\tgetRgb: getRgb,\n\tgetStyleSheetById: getStyleSheetById,\n\tgetRangeWidth: getRangeWidth,\n\tisPlainObject: isPlainObject,\n\tisArray: isArray\n});\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * get WXEnvironment info.\n * @param  {object} viewportInfo: info about viewport.\n * @param  {object} envInfo: info parsed from lib.env.\n */\nfunction initEnv (viewportInfo, envInfo) {\n  var browserName = envInfo.browser ? envInfo.browser.name : navigator.appName;\n  var browserVersion = envInfo.browser ? envInfo.browser.version.val : null;\n  var osName = envInfo.os.name;\n  if (osName.match(/(iPhone|iPad|iPod)/i)) {\n    osName = 'iOS';\n  }\n  else if (osName.match(/Android/i)) {\n    osName = 'android';\n  }\n  var osVersion = envInfo.os.version.val;\n  var env = {\n    platform: 'Web',\n    weexVersion: '0.12.27',\n    userAgent: navigator.userAgent,\n    appName: browserName,\n    appVersion: browserVersion,\n    osName: osName,\n    osVersion: osVersion,\n    deviceModel: envInfo.os.name || null\n  };\n  /**\n   * viewportInfo: scale, deviceWidth, deviceHeight. dpr\n   */\n  return extend(env, viewportInfo)\n}\n\n// const viewportInfo = initViewport()\n\n// 750 by default currently\n// const scale = viewportInfo.scale\n\n// const units = {\n//   REM: 12 * scale,\n//   VW: viewportInfo.deviceWidth / 100,\n//   VH: viewportInfo.deviceHeight / 100,\n//   VMIN: Math.min(viewportInfo.deviceWidth, viewportInfo.deviceHeight) / 100,\n//   VMAX: Math.max(viewportInfo.deviceWidth, viewportInfo.deviceHeight) / 100,\n//   CM: 96 / 2.54 * scale,\n//   MM: 96 / 25.4 * scale,\n//   Q: 96 / 25.4 / 4 * scale,\n//   IN: 96 * scale,\n//   PT: 96 / 72 * scale,\n//   PC: 96 / 6 * scale,\n//   PX: scale\n// }\n\n// Object.freeze(units)\n// Object.freeze(env)\n\n// window.CSS_UNIT = units\nwindow.WXEnvironment = initEnv(init$2(), window.lib.env);\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* global Vue */\n\nvar weexModules = {};\nvar _roots = [];\n\nvar weex$4 = {\n  __vue__: null,\n  utils: utils,\n  // units: window.CSS_UNIT,\n  config: {\n    env: window.WXEnvironment,\n    bundleUrl: location.href\n  },\n\n  _components: {},\n  _modules: weexModules,\n\n  _meta: {\n    mounted: {},\n    updated: {},\n    destroyed: {},\n    requiredModules: {},\n    apiCalled: {},\n    perf: {}\n  },\n\n  document: {\n    body: {}\n  },\n\n  requireModule: function requireModule (moduleName) {\n    var metaMod = weex$4._meta.requiredModules;\n    if (!metaMod[moduleName]) {\n      metaMod[moduleName] = 0;\n    }\n    metaMod[moduleName]++;\n    return weexModules[moduleName]\n  },\n\n  registerModule: function registerModule () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    return (ref = this).registerApiModule.apply(ref, args)\n    var ref;\n  },\n\n  support: function support (feature) {\n    if ( feature === void 0 ) feature = '';\n\n    var match = (feature + '').match(/@(component|module)\\/(\\w+)(.\\w+)?/);\n    if (match) {\n      var type = match[1];\n      var mod = match[2];\n      var method = match[3];\n      method = method && method.replace(/^\\./, '');\n      switch (type) {\n        case 'component':\n          return typeof this._components[mod] !== 'undefined'\n        case 'module':\n          var module = weexModules[mod];\n          return module && method ? !!module[method] : !!module\n      }\n    }\n    else {\n      console.warn((\"[vue-render] invalid argument for weex.support: \" + feature));\n      return null\n    }\n  },\n\n  /**\n   * Register a new vue instance in this weex instance. Put its root element into weex.document.body.children, so\n   * that user can use weex.document.body to walk through all dom structures in all vue instances in the page.\n   */\n  registerVueInstance: function registerVueInstance (instance) {\n    if (!instance instanceof Vue) {\n      return\n    }\n    var root = instance.$root;\n    if (!root || !root.$el) {\n      return\n    }\n    this.document.body.children.push(root.$el);\n  },\n\n  // @deprecated\n  require: function require () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    console.log(\"[Vue Render] \\\"weex.require\\\" is deprecated, please use \\\"weex.requireModule\\\" instead.\");\n    return (ref = this).requireModule.apply(ref, args)\n    var ref;\n  },\n\n  // @deprecated\n  // TODO: rename to registerModule\n  registerApiModule: function registerApiModule (name, module, meta) {\n    if (!weexModules[name]) {\n      weexModules[name] = {};\n    }\n    if (!!meta && meta.mountType === 'full') {\n      weexModules[name] = module;\n    }\n    var loop = function ( key ) {\n      if (module.hasOwnProperty(key)) {\n        weexModules[name][key] = function () {\n          var called = weex$4._meta.apiCalled;\n          if (!called[name]) {\n            called[name] = {};\n          }\n          var calledMod = called[name];\n          if (!calledMod[key]) {\n            calledMod[key] = 0;\n          }\n          calledMod[key]++;\n          return module[key].apply(weex$4, arguments)\n        };\n      }\n    };\n\n    for (var key in module) loop( key );\n  },\n\n  registerComponent: function registerComponent (name, component) {\n    if (!this.__vue__) {\n      return console.log('[Vue Render] Vue is not found. Please import Vue.js before register a component.')\n    }\n    this._components[name] = 0;\n    if (component._css) {\n      var css = component._css.replace(/\\b[+-]?[\\d.]+rem;?\\b/g, function (m) {\n        return parseFloat(m) * 75 * weex$4.config.env.scale + 'px'\n      });\n      appendCss(css, (\"weex-cmp-\" + name));\n      delete component._css;\n    }\n    this.__vue__.component(name, component);\n  },\n\n  // @deprecated\n  getRoot: function getRoot () {},\n\n  // @deprecated\n  sender: {\n    performCallback: function performCallback (callback, data, keepAlive) {\n      if (typeof callback === 'function') {\n        return callback(data)\n      }\n      return null\n    }\n  },\n\n  // @deprecated\n  install: function install (module) {\n    module.init(this);\n  }\n};\n\nObject.defineProperty(weex$4.document.body, 'children', {\n  get: function get () { return _roots }\n})\n\n; ['on', 'once', 'off', 'emit'].forEach(function (method) {\n  weex$4[method] = function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (!this._vue) {\n      this._vue = new this.__vue__();\n    }\n    return (ref = this._vue)[(\"$\" + method)].apply(ref, args)\n    var ref;\n  };\n});\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// \n/**\n * @fileOverview: perf data recorder.\n */\n\nvar perf = window._weex_perf = {\n  time: {}\n};\n\nvar tmp = {};\n\nfunction getNow () {\n  var performance = window.performance;\n  return performance && performance.now ? performance.now() : new Date().getTime()\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* istanbul ignore next */\n\nvar pseudoId = 0;\n/**\n * get scoped class style map from stylesheets in <head>.\n */\nfunction getHeadStyleMap () {\n  var needToRemoveStyleSheetNodes = [];\n  var styleSheetsArr = Array.from(document.styleSheets || []).filter(function (styleSheet) {\n    return styleSheet.ownerNode.getAttribute('weex-scanned') !== '1'\n  });\n\n  var res = Array.from(styleSheetsArr)\n    .reduce(function (pre, styleSheet) {\n      styleSheet.ownerNode.setAttribute('weex-scanned', 1);\n      /**\n       * why not using styleSheet.rules || styleSheet.cssRules to get css rules ?\n       * because weex's components defined non-standard style attributes, which is\n       * auto ignored when access rule.cssText.\n       * another reason not to use cssRules directy:\n       * @issue: https://stackoverflow.com/questions/21642277/security-error-the-operation-is-insecure-in-firefox-document-stylesheets\n       */\n      if (\n        // css in a link. just ignore this. probably a link stylesheet.\n        (styleSheet.ownerNode.tagName.toLowerCase() === 'link')\n        || !styleSheet.ownerNode.textContent\n        // pseudo class styleSheet node is generated by weex. just ignore it.\n        || styleSheet.ownerNode.id.match(/weex-pseudo-\\d+/)) {\n        return pre\n      }\n      /**\n       * start to analyze it's content.\n       */\n      var strArr = trimComment(styleSheet.ownerNode.textContent.trim()).split(/}/);\n      var len = strArr.length;\n      var rules = [];\n      for (var i = 0; i < len; i++) {\n        var str = strArr[i];\n        if (!str || str.match(/^\\s*$/)) {\n          continue\n        }\n        /**\n         * should match these cases:\n         * .a[data-v-xxx] { color: red; }\n         * .a[data-v-xxx]:active { color: green; }\n         * .a[data-v-xxx], .b[data-v-xxx] { color: red; }\n         *\n         * should not match these cases:\n         * .a { color: red; }\n         * etc.\n         */\n        var match = str.match(/((?:,?\\s*\\.[\\w-]+\\[data-v-\\w+\\](?::\\w+)?)+)\\s*({[^}]+)/);\n        if (!match) {\n          // not the vue static class styles map. so acquire no rules for this styleSheet.\n          // just jump through this styleSheet and go to analyzing next.\n          return pre\n        }\n        var clsNms = match[1].split(',').map(function (n) { return n.trim(); });\n        var cssText = match[2].replace(/[{}]/g, '').trim();\n        var clsNmsIdx = 0;\n        var clsNmsLen = clsNms.length;\n        while (clsNmsIdx < clsNmsLen) {\n          rules.push({\n            selectorText: clsNms[clsNmsIdx],\n            cssText: cssText\n          });\n          clsNmsIdx++;\n        }\n      }\n      Array.from(rules).forEach(function (rule) {\n        var selector = rule.selectorText || '';\n        var isPseudo = false;\n        if (selector.match(/:(?:active|focus|enabled|disabled)/)) {\n          isPseudo = true;\n        }\n        var styleObj = trimComment(rule.cssText).split(';')\n          .reduce(function (styleObj, statement) {\n            statement = statement.trim();\n            if (statement && statement.indexOf('/*') <= -1) {\n              var resArr = statement.split(':').map(function (part) { return part.trim(); });\n              styleObj[resArr[0]] = resArr[1];\n            }\n            return styleObj\n          }, {});\n        if (isPseudo) {\n          var txt = Object.keys(styleObj).reduce(function (pre, cur) {\n            return pre + cur + \":\" + (styleObj[cur]) + \"!important;\"\n          }, '');\n          appendCss((selector + \"{\" + txt + \"}\"), (\"weex-pseudo-\" + (pseudoId++)));\n        }\n        var objMap = !isPseudo ? pre : pre.pseudo;\n        var res = objMap[selector];\n        if (!res) {\n          objMap[selector] = styleObj;\n        }\n        else {\n          extend(objMap[selector], styleObj);\n        }\n      });\n      /**\n       * remove this styleSheet node since it's in the styleMap already. And this style\n       * should only be fetched and used from styleMap to generate the final combined\n       * component style, not from the stylesheet itself.\n       */\n      needToRemoveStyleSheetNodes.push(styleSheet.ownerNode);\n      return pre\n    }, { pseudo: {}});\n  if (!window._no_remove_style_sheets) {\n    needToRemoveStyleSheetNodes.forEach(function (node) {\n      node.parentNode.removeChild(node);\n    });\n  }\n  else {}\n  return res\n}\n\n// export function getScopeIds (context) {\n//   const arr = []\n//   let ctx = context\n//   let scopeId\n//   while (ctx) {\n//     scopeId = ctx.$options._scopeId\n//     scopeId && arr.push(scopeId)\n//     ctx = ctx.$options.parent\n//   }\n//   return arr\n// }\n\nfunction getScopeId (vnode) {\n  return vnode.context.$options._scopeId\n}\n\n/**\n * get style in <style scoped> tags for this component.\n */\nfunction getScopeStyle (vnode, classNames) {\n  var scopeId = getScopeId(vnode);\n  var style = {};\n  var styleMap = weex._styleMap || {};\n  var clsNmsIdx = 0;\n  var clsNmsLen = classNames.length;\n  while (clsNmsIdx < clsNmsLen) {\n    var cls = \".\" + (classNames[clsNmsIdx]) + \"[\" + scopeId + \"]\";\n    var map = styleMap[cls];\n    map && extendTruthy(style, map);\n    clsNmsIdx++;\n  }\n  return camelizeKeys(style)\n}\n\nfunction getStyle (vnode, extract) {\n  var data = vnode.data || {};\n  var staticClassNames = (typeof data.staticClass === 'string') ? data.staticClass.split(' ') : (data.staticClass || []);\n  var classNames = (typeof data.class === 'string') ? data.class.split(' ') : (data.class || []);\n  var clsNms = staticClassNames.concat(classNames);\n  var style = normalizeStyle(getScopeStyle(vnode, clsNms));\n  /**\n   * cache static style and bind style.\n   * cached staticStyle (including style and staticStyle) has already been normalized\n   * in $processStyle. So there's no need to normalize it again.\n   */\n  if (!data.cached) {\n    // cache staticStyle once in the beginning.\n    data.cached = extendTruthy({}, data.staticStyle);\n  }\n  // cache binding style every time since the binding style is variable.\n  extendTruthy(data.cached, data.style);\n  extend(style, data.cached);\n  data.staticStyle = style;\n  if (extract) {\n    delete data.staticStyle;\n    delete data.style;\n  }\n  return style\n}\n\n/**\n * get style merged with static styles, binding styles, and scoped class styles,\n * with keys in camelcase.\n */\nfunction getComponentStyle (context, extract) {\n  if (!context.$vnode) {\n    return {}\n  }\n  var style = {};\n  var vnode = context.$vnode;\n  while (vnode) {\n    extend(style, getStyle(vnode, extract));\n    vnode = vnode.parent;\n  }\n  var prefixedStyle = autoPrefix(style);\n  /**\n   * when prefixed value is a array, it should be applied to element\n   * during the next tick.\n   * e.g.\n   *  background-image:  linear-gradient(to top,#f5fefd,#ffffff);\n   *  will generate:\n   *  {\n   *    backgroundImage: [\n   *      \"-webkit-linear-gradient(to top,#f5fefd,#ffffff)\",\n   *      \"-moz-linear-gradient(to top,#f5fefd,#ffffff)\",\n   *      \"linear-gradient(to top,#f5fefd,#ffffff)\"]\n   *  }\n   */\n  var loop = function ( k ) {\n    if (Array.isArray(prefixedStyle[k])) {\n      var vals = prefixedStyle[k];\n      context.$nextTick(function () {\n        var el = context.$el;\n        if (el) {\n          for (var i = 0; i < vals.length; i++) {\n            el.style[k] = vals[i];\n          }\n        }\n      });\n      if (k !== 'position') {\n        /**\n         * Should not delete prefixedStyle[k] directly. Otherwise will\n         * trigger issue: https://issues.apache.org/jira/projects/WEEX/issues/WEEX-97\n         */\n        prefixedStyle[k] = style[k];\n      }\n    }\n  };\n\n  for (var k in prefixedStyle) loop( k );\n\n  /**\n   * If position is 'sticky', then add it to the stickyChildren of the parent scroller.\n   */\n  var pos = prefixedStyle.position;\n  var reg = /sticky$/;\n  if (pos === 'fixed') {\n    context.$nextTick(function () {\n      var el = context.$el;\n      if (el) {\n        el.classList.add('weex-fixed');\n      }\n    });\n  }\n  else if (isArray(pos) && pos[0].match(reg) || (pos + '').match(reg)) {\n    delete prefixedStyle.position;\n    // use native sticky.\n    if (supportSticky()) {\n      context.$nextTick(function () {\n        var el = context.$el;\n        if (el) {\n          el.classList.add('weex-ios-sticky');\n        }\n      });\n    }\n    // use re-implementation of sticky.\n    else if (!context._stickyAdded) {\n      var uid = context._uid;\n      var scroller = getParentScroller(context);\n      if (scroller) {\n        context._stickyAdded = true;\n        if (!scroller._stickyChildren) {\n          scroller._stickyChildren = {};\n        }\n        scroller._stickyChildren[uid] = context;\n      }\n      context.$nextTick(function () {\n        var el = context.$el;\n        if (el) {\n          context._initOffsetTop = el.offsetTop;\n        }\n      });\n    }\n  }\n\n  return prefixedStyle\n}\n\nfunction extractComponentStyle (context) {\n  return getComponentStyle(context, true)\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * remove text nodes in the nodes array.\n * @param  {Array} nodes\n * @return {Array} nodes without text nodes.\n */\nfunction trimTextVNodes (vnodes) {\n  if (isArray(vnodes)) {\n    return vnodes.filter(function (vnode) { return !!vnode.tag; })\n  }\n  return vnodes\n}\n\n/**\n * get listeners from on config and v-on binding.\n * v-on binding has a priority over on config.\n * @param {vnode} vnode\n * @param {String} evt: event name.\n */\nfunction getListeners (vnode, evt) {\n  var handlers = [];\n  while (vnode) {\n    if (vnode.data && vnode.data.on) {\n      var handler = vnode.data.on[evt];\n      handler && handlers.push(handler);\n    }\n    if (vnode.componentOptions && vnode.componentOptions.listeners) {\n      var handler$1 = vnode.componentOptions.listeners[evt];\n      handler$1 && handlers.push(handler$1);\n    }\n    vnode = vnode.parent;\n  }\n  return handlers\n}\n\n/**\n * Instead of vue's invoker, this function should check if the binding function\n * has a _weex_hook flag. If there is one, the handler should not be triggered.\n * @param {Array | Function} fns\n */\nfunction applyFns (fns) {\n  var args = [], len$1 = arguments.length - 1;\n  while ( len$1-- > 0 ) args[ len$1 ] = arguments[ len$1 + 1 ];\n\n  if (Array.isArray(fns)) {\n    var cloned = fns.slice();\n    var len = cloned.length;\n    for (var i = 0; i < len; i++) {\n      var fn = cloned[i];\n      if (fn._weex_hook) {\n        continue\n      }\n      fn.apply(null, args);\n    }\n  }\n  else {\n    if (!fns._weex_hook) {\n      fns.apply(null, args);\n    }\n  }\n}\n\n/**\n * emit native events to enable v-on.\n * @param {VComponent} context: which one to emit a event on.\n * @param {array | object} events: extra events. You can pass in multiple arguments here.\n */\nfunction createEventMap (context) {\n  var events = [], len$1 = arguments.length - 1;\n  while ( len$1-- > 0 ) events[ len$1 ] = arguments[ len$1 + 1 ];\n\n  var eventMap = {};\n  /**\n   * Bind some original type event to your specified type event handler.\n   * e.g. bind 'tap' event to 'click' event listener: bindFunc('tap')('click').\n   * Or bind certian event with your specified handler: bindFunc('click', someFunction)\n   */\n  var bindFunc = function (originalType) {\n    return function (listenTo) {\n      var handler;\n      var evtName = originalType || listenTo;\n      if (typeof listenTo === 'function') {\n        handler = listenTo;\n      }\n      else if (typeof listenTo === 'string') {\n        handler = function (e) {\n          /**\n           * use '_triggered' to control actural bubbling (allow original bubbling).\n           */\n          if (e._triggered) {\n            return\n          }\n          /**\n           * trigger the closest parent which has bound event handlers.\n           */\n          var vm = context;\n          while (vm) {\n            var ons = getListeners(vm._vnode || vm.$vnode, listenTo);\n            var len = ons.length;\n            if (len > 0) {\n              var idx = 0;\n              while (idx < len) {\n                var on = ons[idx];\n                applyFns(on.fns, e);\n                idx++;\n              }\n              // once a parent node (or self node) has triggered the handler, then\n              // it stops bubbling immediately, and a '_triggered' object is set.\n              e._triggered = {\n                el: vm.$el\n              };\n              return\n            }\n            vm = vm.$parent;\n          }\n        };\n        // flag to distinguish from user-binding listeners.\n        handler._weex_hook = true;\n      }\n      if (!eventMap[evtName]) {\n        eventMap[evtName] = [];\n      }\n      eventMap[evtName].push(handler);\n    }\n  };\n\n  /**\n   * component's extra event bindings. This is mostly for the needs of component's\n   * own special behaviours. These handlers will be processed after the user's\n   * corresponding event handlers.\n   */\n  if (events) {\n    var len = events.length;\n    for (var i = 0; i < len; i++) {\n      var extra = events[i];\n      if (isArray(extra)) {\n        extra.forEach(bindFunc());\n      }\n      else if (typeof extra === 'object') {\n        for (var key in extra) {\n          bindFunc(key)(extra[key]);\n        }\n      }\n    }\n  }\n\n  return eventMap\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\nvar core$1 = Object.freeze({\n\tgetHeadStyleMap: getHeadStyleMap,\n\tgetScopeId: getScopeId,\n\tgetScopeStyle: getScopeStyle,\n\tgetComponentStyle: getComponentStyle,\n\textractComponentStyle: extractComponentStyle,\n\ttrimTextVNodes: trimTextVNodes,\n\tapplyFns: applyFns,\n\tcreateEventMap: createEventMap\n});\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar lazyloadWatched = false;\nfunction watchLazyload () {\n  lazyloadWatched = true\n  ; [\n    'scroll',\n    // 'transitionend',\n    // 'webkitTransitionEnd',\n    // 'animationend',\n    // 'webkitAnimationEnd',\n    'resize'\n  ].forEach(function (evt) {\n    window.addEventListener(evt, getThrottleLazyload(25, document.body));\n  });\n  /**\n   * In case the users use the body's overflow to scroll. Then the scroll\n   * event would not be triggered on the window object but on the body.\n   */\n  document.body.addEventListener('scroll', getThrottleLazyload(25, document.body));\n}\n\nvar warned = false;\nvar notePage = 'https://gist.github.com/MrRaindrop/5a805a067146609e5cfd4d64d775d693#file-weex-vue-render-config-for-vue-loader-js';\nfunction warnProcessStyle () {\n  if (!warned) {\n    warned = true;\n    var page = window._process_style_note_page || notePage;\n    console.warn(\"[vue-render]: you should add vue-loader config with $processStyle to enable inline styles's \"\n      + \"normalization. see \" + page + \" If you already did this, please ignore this message.\");\n  }\n}\n\nvar idCnt = 0;\n\nvar base$1 = {\n  beforeCreate: function beforeCreate () {\n    if (!lazyloadWatched) {\n      watchLazyload();\n    }\n  },\n\n  updated: function updated () {\n    if (this._rootId) {\n      var el = this.$el;\n      if (el.nodeType === 1\n        && el.className.indexOf('weex-root') <= -1) {\n        el.classList.add('weex-root');\n        el.setAttribute('data-wx-root-id', this._rootId);\n      }\n    }\n\n    var tagName = this.$options && this.$options._componentTag;\n    var metaUp = weex._meta.updated;\n    if (!metaUp[tagName]) {\n      metaUp[tagName] = 0;\n    }\n    metaUp[tagName]++;\n    /**\n     * since the updating of component may affect the layout, the lazyloading should\n     * be fired.\n     */\n    this._fireLazyload();\n  },\n\n  mounted: function mounted () {\n    var tagName = this.$options && this.$options._componentTag;\n    if (typeof weex._components[tagName] !== 'undefined') {\n      weex._components[tagName]++;\n    }\n    var metaMt = weex._meta.mounted;\n    if (!metaMt[tagName]) {\n      metaMt[tagName] = 0;\n    }\n    metaMt[tagName]++;\n    if (this === this.$root) {\n      var rootId = \"wx-root-\" + (idCnt++);\n      if (!weex._root) {\n        weex._root = {};\n      }\n      weex._root[rootId] = this;\n      this._rootId = rootId;\n      var el = this.$el;\n      if (el.nodeType !== 1) {\n        return\n      }\n      el.classList.add('weex-root');\n      el.setAttribute('data-wx-root-id', rootId);\n      this._fireLazyload(el);\n    }\n\n    // give warning for not using $processStyle in vue-loader config.\n    if (!warned && !window._style_processing_added) {\n      warnProcessStyle();\n    }\n\n    // bind attrs to $el.\n    var i, j;\n    if (this.$el && (i = j = this.$vnode) && (i = i.data) && (j = j.componentOptions)) {\n      this.$el.attrs = extend({}, i.attrs, j.propsData);\n    }\n    watchAppear(this, true);\n  },\n\n  destroyed: function destroyed () {\n    /**\n     * if the destroyed element is above another panel with images inside, and the images\n     * moved into the viewport, then the lazyloading should be triggered.\n     */\n    if (this._rootId) {\n      delete weex._root[this._rootId];\n      delete this._rootId;\n    }\n    var tagName = this.$options && this.$options._componentTag;\n    if (typeof weex._components[tagName] !== 'undefined') {\n      weex._components[tagName]--;\n    }\n    var metaDs = weex._meta.destroyed;\n    if (!metaDs[tagName]) {\n      metaDs[tagName] = 0;\n    }\n    metaDs[tagName]++;\n\n    this._fireLazyload();\n    triggerDisappear(this);\n  },\n\n  methods: {\n    _fireLazyload: function _fireLazyload (el) {\n      getThrottleLazyload(25, el || document.body)();\n    }\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * get a beforeCreate hook, which has a mark to identify the hook function itself.\n */\nfunction getIdentifiedBeforeCreate () {\n  var disposed = {}; // disposed components. Already scanned.\n  function beforeCreate () {\n    /**\n     * get static class style map from document's styleSheets.\n     * Weex.on will create a Vue instance. In this case we'll ignore it, since\n     * it's not sure whether the scoped style has already attached to head or not.\n     */\n    var tagName = this.$options && this.$options._componentTag;\n    /**\n     * For vue-loader ^11.3.x, there's no injectStyle function. The styleSheet\n     * is already injected into the head. Just scan it.\n     */\n    // async component.\n    if ((this.$vnode && this.$vnode.data && this.$vnode.data.tag === 'component')\n      || (this === this.$root && this.$options && !this._firstScanned)) {\n      this._firstScanned = true;\n      extend(weex._styleMap, getHeadStyleMap());\n    }\n    /**\n     * For vue-loader ^12.0, the injectStyle function is hooked. We should scan\n     * style map after the injectStyle hook called.\n     */\n    if (((this === this.$root && this.$options)\n      || (tagName\n      && (typeof weex._components[tagName] === 'undefined')\n      && !disposed[tagName]))\n      && !this._secondScanned) {\n      disposed[tagName] = 1;\n      this._secondScanned = true;\n      var hooks = this.$options.beforeCreate;\n      var len = hooks.length;\n      var thisHookIdx = 0; // index of this hook in the hooks array.\n      for (; thisHookIdx < len; thisHookIdx++) {\n        if (hooks[thisHookIdx]._styleMixin) { break }\n      }\n      if (thisHookIdx !== len - 1) {\n        var func = hooks[len - 1];\n        hooks[len - 1] = function () {\n          // call the original injectStyle hook.\n          func.call(this);\n          // scan the new appended styleSheet.\n          extend(weex._styleMap, getHeadStyleMap());\n          hooks[len - 1] = func;\n        };\n      }\n    }\n  }\n  beforeCreate._styleMixin = true;\n  return beforeCreate\n}\n\nvar style = {\n  beforeCreate: getIdentifiedBeforeCreate(),\n\n  methods: {\n    $processStyle: function $processStyle (style) {\n      window._style_processing_added = true;\n      if (!style) {\n        return\n      }\n      return normalizeStyle(camelizeKeys(style))\n    },\n\n    _getParentRect: function _getParentRect () {\n      var parentElm = this.$options._parentElm;\n      return parentElm && parentElm.getBoundingClientRect()\n    }\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// \n\n// input and textare has some common api and event\nvar findEnterKeyType = function (key) {\n  var keys = ['default', 'go', 'next', 'search', 'send'];\n  if (keys.indexOf(key) > -1) {\n    return key\n  }\n  return 'done'\n};\n\nvar inputCommon = {\n  methods: {\n    focus: function focus () {\n      this.$el && this.$el.focus();\n    },\n    blur: function blur () {\n      this.$el && this.$el.blur();\n    },\n\n    setSelectionRange: function setSelectionRange (start, end) {\n      try {\n        this.$el.setSelectionRange(start, end);\n      }\n      catch (e) {\n        \n      }\n    },\n\n    getSelectionRange: function getSelectionRange (callback) {\n      try {\n        var selection = window.getSelection();\n        var str = selection.toString();\n        var selectionStart = this.$el.value.indexOf(str);\n        var selectionEnd = selectionStart === -1 ? selectionStart : selectionStart + str.length;\n        callback && callback({\n          selectionStart: selectionStart,\n          selectionEnd: selectionEnd\n        });\n      }\n      catch (e) {\n        callback && callback(new Error('[vue-render] getSelection is not supported.'));\n      }\n    },\n\n    getEditSelectionRange: function getEditSelectionRange (callback) {\n      return this.getSelectionRange(callback)\n    },\n\n    // support enter key event\n    createKeyboardEvent: function createKeyboardEvent (events) {\n      var customKeyType = this.returnKeyType;\n      var self = this;\n      if (this._events['return']) {\n        var keyboardEvents = {\n          'keyup': function (ev) {\n            var code = ev.keyCode;\n            var key = ev.key;\n            if (code === 13) {\n              if (!key || key.toLowerCase() === 'tab') {\n                ev.key = 'next';\n              }\n              var rightKeyType = findEnterKeyType(customKeyType);\n              ev.returnKeyType = rightKeyType;\n              ev.value = ev.target.value;\n              self.$emit('return', ev);\n            }\n          }\n        };\n        events = extend(events, keyboardEvents);\n      }\n      return events\n    }\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar sticky = {\n  destroyed: function destroyed () {\n    if (!this._stickyAdded) { return }\n    var scroller = getParentScroller(this);\n    if (!scroller) { return }\n    delete scroller._stickyChildren[this._uid];\n  },\n\n  methods: {\n    _addSticky: function _addSticky () {\n      var el = this.$el;\n      if (!el || el.nodeType === 1) {\n        return\n      }\n      el.classList.add('sticky');\n      if (!this._placeholder) {\n        this._placeholder = el.cloneNode(true);\n      }\n      this._placeholder.style.display = 'block';\n      this._placeholder.style.width = this.$el.offsetWidth + 'px';\n      this._placeholder.style.height = this.$el.offsetHeight + 'px';\n      el.parentNode.insertBefore(this._placeholder, this.$el);\n    },\n\n    _removeSticky: function _removeSticky () {\n      var el = this.$el;\n      if (!el || el.nodeType === 1) {\n        return\n      }\n      el.classList.remove('sticky');\n      if (this._placeholder) {\n        this._placeholder.parentNode.removeChild(this._placeholder);\n      }\n      this._placeholder = null;\n    }\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nwindow.global = window;\nwindow.weex = weex$4;\n\nweex$4._styleMap = {}\n\n; ['getComponentStyle',\n  'extractComponentStyle',\n  'createEventMap',\n  'trimTextVNodes'].forEach(function (method) {\n    weex$4[method] = core$1[method].bind(weex$4);\n  });\n\nweex$4.mixins = {\n  inputCommon: inputCommon\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nfunction setVue (vue) {\n  if (!vue) {\n    throw new Error('[Vue Render] Vue not found. Please make sure vue 2.x runtime is imported.')\n  }\n  global.weex.__vue__ = vue;\n  console.log((\"[Vue Render] install Vue \" + (vue.version) + \".\"));\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar gestureEvents = config.gestureEvents;\nvar nativeEvents = ['click', 'touchstart', 'touchmove', 'touchend'];\nvar needPassive = ['touchmove'];\n\nvar events = gestureEvents.concat(nativeEvents);\n\n/**\n * if el is a `<a>` element.\n * @param {HTMLElement} el\n */\nfunction isANode (el) {\n  return el.tagName.toLowerCase() === 'a'\n}\n\nfunction isInANode (el) {\n  var parent = el.parentElement;\n  while (parent && parent !== document.body) {\n    if (parent.tagName === 'A') { return true }\n    parent = parent.parentElement;\n  }\n  return false\n}\n\n/**\n * get listeners from on config and v-on binding.\n * v-on binding has a priority over on config.\n * @param {vnode} vnode\n * @param {String} evt: event name.\n */\nfunction getListeners$1 (vnode, evt) {\n  var handlers = [];\n  while (vnode) {\n    if (vnode.data && vnode.data.on) {\n      var handler = vnode.data.on[evt];\n      handler && handlers.push(handler);\n    }\n    if (vnode.componentOptions && vnode.componentOptions.listeners) {\n      var handler$1 = vnode.componentOptions.listeners[evt];\n      handler$1 && handlers.push(handler$1);\n    }\n    vnode = vnode.parent;\n  }\n  return handlers\n}\n\nvar _inited$1 = false;\nfunction _init (doc) {\n  if (_inited$1) {\n    return\n  }\n  if (!doc) {\n    return\n  }\n  _inited$1 = true;\n  var _sp = supportsPassive();\n  events.forEach(function (evt) {\n    /**\n     * use capture for click handling, therefore there's a chance to handle\n     * it before any other listeners binding on document or document.body.\n     */\n    var option =\n      evt === 'click'\n      ? true : needPassive.indexOf(evt) > -1 && _sp\n      ? { passive: true } : false;\n    doc.addEventListener(evt, function (e) {\n      var el = e.target;\n      var vm = el.__vue__;\n      while (!vm && el && el !== document.body) {\n        el = el.parentElement;\n        vm = el && el.__vue__;\n      }\n      if (!vm) {  // not a vue component.\n        return\n      }\n      var disposed = false;\n      var evtName = e.type;\n\n      if (evtName === 'tap' && e._for !== 'weex') {\n        return\n      }\n\n      while (vm) {\n        var vnode = vm._vnode || vm.$vnode;\n        var elm = vm.$el;\n        var ons = getListeners$1(vnode, evtName === 'tap' ? 'click' : evtName);\n        var len = ons && ons.length;\n\n        if (len > 0) {\n          if (evtName !== 'click') {\n            for (var i = 0; i < len; i++) {\n              var handler = ons[i];\n              var newEvt = evtName === 'tap'\n                ? createEvent(el, 'click')\n                : e;\n              newEvt._triggered = { target: elm };\n              applyFns(handler.fns, newEvt);\n            }\n          }\n          e._triggered = { target: elm };\n          disposed = true;\n        }\n\n        if (isANode(elm)\n          && (evtName === 'click' || evtName === 'tap')) {\n          var href = elm.getAttribute('href');\n          var voidHrefReg = /^\\s*javascript\\s*:\\s*void\\s*(?:\\(\\s*0\\s*\\)|0)\\s*;?\\s*$/;\n          var prevent = elm.getAttribute('prevent');\n          if (window._should_intercept_a_jump && window._should_intercept_a_jump(elm)) {\n            // e._triggered should not be true since we left the intercepter to handle the event.\n            e._triggered = false;\n            disposed = true;\n          }\n          else if (href.match(voidHrefReg)\n            || prevent === '' || prevent === 'true') {\n            e._triggered = false;\n            e.preventDefault();\n          }\n          else {\n            e._triggered = { target: elm };\n            disposed = true; // handled by default behavior for clicking on a element.\n          }\n        }\n\n        /**\n         * If the click handler is binding on a element inside a <a> element,\n         * then should prevent default.\n         */\n        if (disposed && evtName === 'click' && isInANode(elm)) {\n          e._triggered = { target: elm };\n          e.preventDefault();\n          return\n        }\n\n        if (disposed) {\n          return\n        }\n        vm = vm.$parent;\n      }\n    }, option);\n  });\n}\n\nfunction init$3 () {\n  _init(document);\n}\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * init weex.\n * @param  {Vue$2} Vue: Vue Constructor.\n * @param  {object} options: extend weex plugins.\n *         - components.\n *         - modules.\n */\nvar _inited = false;\nfunction init$1 (Vue/*, options = {}*/) {\n  if (_inited) { return }\n  _inited = true;\n\n  setVue(Vue);\n\n  Vue.prototype.$getConfig = function () {\n    console.warn('[Vue Render] \"this.$getConfig\" is deprecated, please use \"weex.config\" instead.');\n    return weex.config\n  };\n\n  var htmlRegex = /^html:/i;\n  Vue.config.isReservedTag = function (tag) { return htmlRegex.test(tag); };\n  Vue.config.parsePlatformTagName = function (tag) { return tag.replace(htmlRegex, ''); };\n\n  function isWeexTag (tag) {\n    return typeof weex._components[tag] !== 'undefined'\n  }\n  var oldGetTagNamespace = Vue.config.getTagNamespace;\n  Vue.config.getTagNamespace = function (tag) {\n    if (isWeexTag(tag)) {\n      return\n    }\n    return oldGetTagNamespace(tag)\n  };\n\n  Vue.mixin(base$1);\n  Vue.mixin(style);\n  Vue.mixin(sticky);\n\n  init$3();\n}\n\n// auto init in dist mode.\nif (typeof window !== 'undefined' && window.Vue) {\n  init$1(window.Vue);\n}\n\nweex.init = init$1;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// import { validateStyles } from '../validator'\n\nvar _css = \"\\n.weex-a {\\n  text-decoration: none;\\n}\\n\";\n\nfunction getA (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var trimTextVNodes = weex.trimTextVNodes;\n\n  return {\n    name: 'weex-a',\n    props: {\n      href: String\n    },\n    render: function render (createElement) {\n      /* istanbul ignore next */\n      // if (\"production\" === 'development') {\n      //   validateStyles('a', this.$vnode.data && this.$vnode.data.staticStyle)\n      // }\n      return createElement('html:a', {\n        attrs: {\n          'weex-type': 'a',\n          href: this.href\n        },\n        staticClass: 'weex-a weex-ct',\n        staticStyle: extractComponentStyle(this)\n      }, trimTextVNodes(this.$slots.default))\n    },\n    _css: _css\n  }\n}\n\nvar a = {\n  init: function init (weex) {\n    weex.registerComponent('a', getA(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar _css$1 = \"\\nbody > .weex-div {\\n  min-height: 100%;\\n}\\n\";\n\nfunction getDiv (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var trimTextVNodes = weex.trimTextVNodes;\n\n  return {\n    name: 'weex-div',\n    render: function render (createElement) {\n      return createElement('html:div', {\n        attrs: { 'weex-type': 'div' },\n        staticClass: 'weex-div weex-ct',\n        staticStyle: extractComponentStyle(this)\n      }, trimTextVNodes(this.$slots.default))\n    },\n    _css: _css$1\n  }\n}\n\nvar div = {\n  init: function init (weex) {\n    var div = getDiv(weex);\n    weex.registerComponent('div', div);\n    weex.registerComponent('container', div);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar extractComponentStyle$1;\nvar createEventMap$1;\nvar extend$2;\nvar isArray$1;\n\nvar IMG_NAME_BITS = 15;\n\nvar _css$2 = \"\\n.weex-image, .weex-img {\\n  background-repeat: no-repeat;\\n  background-position: 50% 50%;\\n}\\n\";\n/**\n * 1. get sprite style if spritePosition is set.\n * 2. else get resize (stetch|cover|contain) related styles.\n */\nfunction getCustomStyle (context, mergedStyle) {\n  var spritePosition = context.spritePosition;\n  if (spritePosition && !isArray$1(spritePosition)) {\n    spritePosition = (spritePosition + '').split(',').map(function (val) {\n      return val.replace(/[[\\]]/g, '').replace(/^\\s*(\\S[\\s\\S]*?)\\s*$/g, function ($0, $1) {\n        return parseInt($1)\n      })\n    });\n  }\n  if (spritePosition) {\n    var posX = -spritePosition[0];\n    var posY = -spritePosition[1];\n    var scale = weex.config.env.scale;\n    var sizeScale = parseFloat(context.spriteWidth) / parseFloat(mergedStyle.width) * weex.config.env.scale;\n    return {\n      'background-position': ((posX * scale) + \"px \" + (posY * scale) + \"px\"),\n      'background-size': ((sizeScale * 100) + \"%\")\n    }\n  }\n  var stretch = '100% 100%';\n  var resize = context.resize || stretch;\n  var bgSize = ['cover', 'contain', stretch].indexOf(resize) > -1 ? resize : stretch;\n  // compatibility: http://caniuse.com/#search=background-size\n  return { 'background-size': bgSize }\n}\n\nfunction preProcessSrc (context, url, mergedStyle) {\n  // somehow the merged style in _prerender hook is gone.\n  // just return the original src.\n  if (!mergedStyle || !mergedStyle.width || !mergedStyle.height) {\n    return url\n  }\n  var width = mergedStyle.width;\n  var height = mergedStyle.height;\n  return context.processImgSrc && context.processImgSrc(url, {\n    width: parseFloat(width),\n    height: parseFloat(height),\n    quality: context.quality,\n    sharpen: context.sharpen,\n    original: context.original\n  }) || url\n}\n\nfunction download (url, callback) {\n  function success () {\n    callback && callback({\n      success: true\n    });\n  }\n  function fail (err) {\n    callback && callback({\n      success: false,\n      errorDesc: err + ''\n    });\n  }\n  try {\n    var isDataUrl = false;\n    var parts;\n    var name;\n    if (url.match(/data:image\\/[^;]+;base64,/)) {\n      isDataUrl = true;\n      parts = url.split(',');\n    }\n    if (!isDataUrl) {\n      name = url\n        .replace(/\\?[^?]+/, '')\n        .replace(/#[^#]+/, '')\n        .match(/([^/]+)$/);\n    }\n    else {\n      name = parts[1].substr(0, IMG_NAME_BITS);\n    }\n    var aEl = document.createElement('a');\n    aEl.href = url;\n    /**\n     * Not all browser support this 'download' attribute. In these browsers it'll jump\n     * to the photo url page and user have to longpress the photo to save it.\n     */\n    aEl.download = name;\n    var clickEvt = new Event('click', { bubbles: false });\n    aEl.dispatchEvent(clickEvt);\n    success();\n  }\n  catch (err) {\n    fail(err);\n  }\n}\n\nvar image = {\n  name: 'weex-image',\n  props: {\n    src: String,\n    placeholder: String,\n    resize: String,\n    quality: String,\n    sharpen: String,\n    original: [String, Boolean],\n    spriteSrc: String,\n    spritePosition: [String, Array],\n    spriteWidth: [String, Number]\n  },\n\n  updated: function updated () {\n    this._fireLazyload();\n  },\n\n  mounted: function mounted () {\n    this._fireLazyload();\n  },\n\n  methods: {\n    save: function save (callback) {\n      download(this.src, callback);\n    }\n  },\n\n  render: function render (createElement) {\n    var style = extractComponentStyle$1(this);\n    var customStyle = getCustomStyle(this, style);\n    return createElement('figure', {\n      attrs: {\n        'weex-type': 'image',\n        'img-src': this.spriteSrc || preProcessSrc(this, this.src, style),\n        'img-placeholder': preProcessSrc(this, this.placeholder, style),\n        'sprite-src': this.spriteSrc,\n        'sprite-position': this.spritePosition,\n        'sprite-width': this.spriteWidth\n      },\n      on: createEventMap$1(this, ['load', 'error']),\n      staticClass: 'weex-image weex-el',\n      staticStyle: extend$2(style, customStyle)\n    })\n  },\n  _css: _css$2\n};\n\nvar image$1 = {\n  init: function init (weex) {\n    extractComponentStyle$1 = weex.extractComponentStyle;\n    createEventMap$1 = weex.createEventMap;\n    extend$2 = weex.utils.extend;\n    isArray$1 = weex.utils.isArray;\n\n    weex.registerComponent('image', image);\n    weex.registerComponent('img', image);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * @fileOverview Input component.\n * Support v-model only if vue version is larger than 2.2.0\n */\nvar extractComponentStyle$2;\nvar mapFormEvents$1;\nvar appendCss$1;\n\nvar ID_PREFIX_PLACEHOLDER_COLOR = 'wipt_plc_';\nvar ID_PREFIX_INPUT = 'wipt_';\nvar idCount = 0;\n\nvar _css$3 = \"\\n.weex-input, .weex-textarea {\\n  font-size: 0.426667rem;\\n}\\n.weex-input:focus, .weex-textarea:focus {\\n  outline: none;\\n}\\n\";\n\nfunction setPlaceholderColor (inputVm, placeholderColor) {\n  if (!placeholderColor) {\n    return\n  }\n  var vendors = [\n    '::-webkit-input-placeholder',\n    ':-moz-placeholder',\n    '::-moz-placeholder',\n    ':-ms-input-placeholder',\n    ':placeholder-shown'\n  ];\n  var id = inputVm._id;\n  appendCss$1(\n    vendors.map(function (vendor, idx) {\n      return (\"#\" + ID_PREFIX_INPUT + id + (vendors[idx]) + \"{color:\" + placeholderColor + \";}\")\n    }).join(''),\n    (\"\" + ID_PREFIX_PLACEHOLDER_COLOR + id),\n    true);\n}\n\nfunction processStyle (vm) {\n  var styles = extractComponentStyle$2(vm);\n  var phColor = styles.placeholderColor;\n  if (phColor) {\n    setPlaceholderColor(vm, phColor);\n  }\n  return styles\n}\n\nfunction getInput (weex) {\n  var ref = weex.mixins;\n  var inputCommon = ref.inputCommon;\n\n  return {\n    name: 'weex-input',\n    mixins: [inputCommon],\n    props: {\n      type: {\n        type: String,\n        default: 'text',\n        validator: function validator (value) {\n          return [\n            'email', 'number', 'password', 'search', 'tel', 'text', 'url', 'date',\n            'datetime', 'time' ].indexOf(value) !== -1\n        }\n      },\n      value: String,\n      placeholder: String,\n      disabled: {\n        type: [String, Boolean],\n        default: false\n      },\n      autofocus: {\n        type: [String, Boolean],\n        default: false\n      },\n      maxlength: [String, Number],\n      returnKeyType: String\n    },\n\n    render: function render (createElement) {\n      if (!this._id) {\n        this._id = idCount++;\n      }\n      var events = mapFormEvents$1(this);\n      return createElement('html:input', {\n        attrs: {\n          'weex-type': 'input',\n          id: (\"\" + ID_PREFIX_INPUT + (this._id)),\n          type: this.type,\n          value: this.value,\n          disabled: (this.disabled !== 'false' && this.disabled !== false),\n          autofocus: (this.autofocus !== 'false' && this.autofocus !== false),\n          placeholder: this.placeholder,\n          maxlength: this.maxlength,\n          'returnKeyType': this.returnKeyType\n        },\n        domProps: {\n          value: this.value\n        },\n        on: this.createKeyboardEvent(events),\n        staticClass: 'weex-input weex-el',\n        staticStyle: processStyle(this)\n      })\n    },\n    _css: _css$3\n  }\n}\n\nvar input = {\n  init: function init (weex) {\n    extractComponentStyle$2 = weex.extractComponentStyle;\n    mapFormEvents$1 = weex.utils.mapFormEvents;\n    appendCss$1 = weex.utils.appendCss;\n\n    weex.registerComponent('input', getInput(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar _css$4 = \"\\n.weex-switch {\\n  border: 0.013333rem solid #dfdfdf;\\n  cursor: pointer;\\n  display: inline-block;\\n  position: relative;\\n  vertical-align: middle;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  box-sizing: content-box;\\n  background-clip: content-box;\\n  color: #64bd63;\\n  width: 1.333333rem;\\n  height: 0.8rem;\\n  background-color: white;\\n  border-color: #dfdfdf;\\n  box-shadow: #dfdfdf 0 0 0 0 inset;\\n  border-radius: 0.8rem;\\n  -webkit-transition: border 0.4s, box-shadow 0.4s, background-color 1.2s;\\n  -moz-transition: border 0.4s, box-shadow 0.4s, background-color 1.2s;\\n  transition: border 0.4s, box-shadow 0.4s, background-color 1.2s;\\n}\\n\\n.weex-switch-checked {\\n  background-color: #64bd63;\\n  border-color: #64bd63;\\n  box-shadow: #64bd63 0 0 0 0.533333rem inset;\\n}\\n\\n.weex-switch-checked.weex-switch-disabled {\\n  background-color: #A0CCA0;\\n  box-shadow: #A0CCA0 0 0 0 0.533333rem inset;\\n}\\n\\n.weex-switch-disabled {\\n  background-color: #EEEEEE;\\n}\\n\\n.weex-switch-inner {\\n  width: 0.8rem;\\n  height: 0.8rem;\\n  background: #fff;\\n  border-radius: 100%;\\n  box-shadow: 0 0.013333rem 0.04rem rgba(0, 0, 0, 0.4);\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  -webkit-transition: background-color 0.4s, left 0.2s;\\n  -moz-transition: background-color 0.4s, left 0.2s;\\n  transition: background-color 0.4s, left 0.2s;\\n}\\n\\n.weex-switch-checked > .weex-switch-inner {\\n  left: 0.533333rem;\\n}\\n\";\n\nfunction getSwitch (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n\n  return {\n    name: 'weex-switch',\n    props: {\n      checked: {\n        type: [Boolean, String],\n        default: false\n      },\n      disabled: {\n        type: [Boolean, String],\n        default: false\n      }\n    },\n    data: function data () {\n      return {\n        isChecked: (this.checked !== 'false' && this.checked !== false),\n        isDisabled: (this.disabled !== 'false' && this.disabled !== false)\n      }\n    },\n    computed: {\n      wrapperClass: function wrapperClass () {\n        var classArray = ['weex-switch'];\n        this.isChecked && classArray.push('weex-switch-checked');\n        this.isDisabled && classArray.push('weex-switch-disabled');\n        return classArray.join(' ')\n      }\n    },\n    methods: {\n      toggle: function toggle () {\n        // TODO: handle the events\n        if (!this.isDisabled) {\n          this.isChecked = !this.isChecked;\n          this.$emit('change', { value: this.isChecked });\n        }\n      }\n    },\n\n    mounted: function mounted () {\n      var this$1 = this;\n\n      var el = this.$el;\n      if (el && el.nodeType === 1) {\n        if (!this._removeClickHandler) {\n          var handler = function (evt) {\n            this$1.toggle();\n          };\n          this._removeClickHandler = el.removeEventListener.bind(el, 'click', handler);\n          el.addEventListener('click', handler);\n        }\n      }\n    },\n\n    beforeDestroy: function beforeDestroy () {\n      var rm = this._removeClickHandler;\n      if (rm) {\n        rm();\n        delete this._removeClickHandler;\n      }\n    },\n\n    render: function render (createElement) {\n      /* istanbul ignore next */\n      // if (\"production\" === 'development') {\n      //   validateStyles('switch', this.$vnode.data && this.$vnode.data.staticStyle)\n      // }\n      return createElement('span', {\n        attrs: { 'weex-type': 'switch' },\n        staticClass: this.wrapperClass,\n        staticStyle: extractComponentStyle(this)\n      }, [createElement('small', { staticClass: 'weex-switch-inner' })])\n    },\n    _css: _css$4\n  }\n}\n\nvar _switch = {\n  init: function init (weex) {\n    weex.registerComponent('switch', getSwitch(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar DEFAULT_OFFSET_ACCURACY = 10;\nvar DEFAULT_LOADMORE_OFFSET = 0;\n\nfunction getThrottledScroll (context) {\n  var scale = weex.config.env.scale;\n  if (!context._throttleScroll) {\n    var wrapper = context.$refs.wrapper;\n    var inner = context.$refs.inner;\n    var preOffset = (context.scrollDirection === 'horizontal'\n        ? wrapper.scrollLeft\n        : wrapper.scrollTop)\n      || 0;\n    context._throttleScroll = weex.utils.throttle(function (evt) {\n      var offset = context.scrollDirection === 'horizontal'\n        ? wrapper.scrollLeft\n        : wrapper.scrollTop;\n      var indent = parseInt(context.offsetAccuracy) * scale;\n      function triggerScroll () {\n        var rect = inner.getBoundingClientRect();\n        evt.contentSize = { width: rect.width, height: rect.height };\n        evt.contentOffset = {\n          x: wrapper.scrollLeft,\n          /**\n           * positive direciton for y-axis is down.\n           * so should use negative operation on scrollTop.\n           *\n           *  (0,0)---------------> x\n           *       |\n           *       |\n           *       |\n           *       |\n           *       v y\n           *\n           */\n          y: -wrapper.scrollTop\n        };\n        context.$emit('scroll', evt);\n      }\n      if (Math.abs(offset - preOffset) >= indent) {\n        triggerScroll();\n        preOffset = offset;\n      }\n    }, 16, true);\n  }\n  return context._throttleScroll\n}\n\nvar scrollable$1 = {\n  props: {\n    loadmoreoffset: {\n      type: [String, Number],\n      default: DEFAULT_LOADMORE_OFFSET,\n      validator: function validator (value) {\n        var val = parseInt(value);\n        return !isNaN(val) && val >= DEFAULT_LOADMORE_OFFSET\n      }\n    },\n\n    offsetAccuracy: {\n      type: [Number, String],\n      default: DEFAULT_OFFSET_ACCURACY,\n      validator: function validator$1 (value) {\n        var val = parseInt(value);\n        return !isNaN(val) && val >= DEFAULT_OFFSET_ACCURACY\n      }\n    }\n  },\n\n  created: function created () {\n    // should call resetLoadmore() to enable loadmore event.\n    this._loadmoreReset = true;\n  },\n\n  methods: {\n    updateLayout: function updateLayout () {\n      var wrapper = this.$refs.wrapper;\n      if (wrapper) {\n        var rect = wrapper.getBoundingClientRect();\n        this._wrapperWidth = rect.width;\n        this._wrapperHeight = rect.height;\n      }\n      var inner = this.$refs.inner;\n      var children = inner && inner.children;\n      if (inner) {\n        var rect$1 = inner.getBoundingClientRect();\n        this._innerWidth = rect$1.width;\n        this._innerHeight = rect$1.height;\n      }\n      var loadingEl = this._loading && this._loading.$el;\n      var refreshEl = this._refresh && this._refresh.$el;\n      if (loadingEl) {\n        this._innerHeight -= loadingEl.getBoundingClientRect().height;\n      }\n      if (refreshEl) {\n        this._innerHeight -= refreshEl.getBoundingClientRect().height;\n      }\n      // inner width is always the viewport width somehow in horizontal\n      // scoller, therefore the inner width should be reclaculated.\n      if (this.scrollDirection === 'horizontal' && children) {\n        this._innerWidth = weex.utils.getRangeWidth(inner);\n      }\n    },\n\n    resetLoadmore: function resetLoadmore () {\n      this._loadmoreReset = true;\n    },\n\n    /**\n     * process sticky children in scrollable components.\n     * current only support list and vertical scroller.\n     */\n    processSticky: function processSticky () {\n      /**\n       * current browser support 'sticky' or '-webkit-sticky', so there's no need\n       * to do further more.\n       */\n      if (weex.utils.supportSticky()) {\n        return\n      }\n      // current only support list and vertical scroller.\n      if (this.scrollDirection === 'horizontal') {\n        return\n      }\n      var stickyChildren = this._stickyChildren;\n      var len = stickyChildren && stickyChildren.length || 0;\n      if (len <= 0) { return }\n\n      var container = this.$el;\n      if (!container) { return }\n      var scrollTop = container.scrollTop;\n\n      var stickyChild;\n      for (var i = 0; i < len; i++) {\n        stickyChild = stickyChildren[i];\n        if (stickyChild._initOffsetTop < scrollTop) {\n          stickyChild._addSticky();\n        }\n        else {\n          stickyChild._removeSticky();\n        }\n      }\n    },\n\n    handleScroll: function handleScroll (event) {\n      weex.utils.getThrottleLazyload(25, this.$el, 'scroll')();\n      getThrottledScroll(this)(event);\n\n      this.processSticky();\n\n      // fire loadmore event.\n      var inner = this.$refs.inner;\n      if (inner) {\n        var innerLength = this.scrollDirection === 'horizontal'\n          ? this._innerWidth\n          : this._innerHeight;\n        if (!this._innerLength) {\n          this._innerLength = innerLength;\n        }\n        if (this._innerLength !== innerLength) {\n          this._innerLength = innerLength;\n          this._loadmoreReset = true;\n        }\n        if (this._loadmoreReset && this.reachBottom(this.loadmoreoffset)) {\n          this._loadmoreReset = false;\n          this.$emit('loadmore', event);\n        }\n      }\n    },\n\n    reachTop: function reachTop () {\n      var wrapper = this.$refs.wrapper;\n      return (!!wrapper) && (wrapper.scrollTop <= 0)\n    },\n\n    reachBottom: function reachBottom (offset) {\n      var wrapper = this.$refs.wrapper;\n      var inner = this.$refs.inner;\n      offset = parseInt(offset || 0) * weex.config.env.scale;\n\n      if (wrapper && inner) {\n        var key = this.scrollDirection === 'horizontal'\n          ? 'width'\n          : 'height';\n        var innerLength = this[(\"_inner\" + (key[0].toUpperCase()) + (key.substr(1)))];\n        var wrapperLength = this[(\"_wrapper\" + (key[0].toUpperCase()) + (key.substr(1)))];\n        var scrollOffset = this.scrollDirection === 'horizontal'\n          ? wrapper.scrollLeft\n          : wrapper.scrollTop;\n        return scrollOffset >= innerLength - wrapperLength - offset\n      }\n      return false\n    },\n\n    handleTouchStart: function handleTouchStart (event) {\n      if (this._loading || this._refresh) {\n        var touch = event.changedTouches[0];\n        this._touchParams = {\n          reachTop: this.reachTop(),\n          reachBottom: this.reachBottom(),\n          startTouchEvent: touch,\n          startX: touch.pageX,\n          startY: touch.pageY,\n          timeStamp: event.timeStamp\n        };\n      }\n    },\n\n    handleTouchMove: function handleTouchMove (event) {\n      if (!this._touchParams || !this._refresh && !this._loading) {\n        return\n      }\n      var inner = this.$refs.inner;\n      var ref = this._touchParams;\n      var startY = ref.startY;\n      var reachTop = ref.reachTop;\n      var reachBottom = ref.reachBottom;\n      if (inner) {\n        var touch = event.changedTouches[0];\n        var offsetY = touch.pageY - startY;\n        var dir = offsetY > 0 ? 'down' : 'up';\n        this._touchParams.offsetY = offsetY;\n        if (this._refresh && (dir === 'down') && reachTop) {\n          this._refresh.pullingDown(offsetY);\n        }\n        else if (this._loading && (dir === 'up') && reachBottom) {\n          this._loading.pullingUp(-offsetY);\n        }\n      }\n    },\n\n    handleTouchEnd: function handleTouchEnd (event) {\n      if (!this._touchParams || !this._refresh && !this._loading) {\n        return\n      }\n      var inner = this.$refs.inner;\n      var ref = this._touchParams;\n      var startY = ref.startY;\n      var reachTop = ref.reachTop;\n      var reachBottom = ref.reachBottom;\n      if (inner) {\n        var touch = event.changedTouches[0];\n        var offsetY = touch.pageY - startY;\n        var dir = offsetY > 0 ? 'down' : 'up';\n        this._touchParams.offsetY = offsetY;\n        if (this._refresh && (dir === 'down') && reachTop) {\n          this._refresh.pullingEnd();\n        }\n        else if (this._loading && (dir === 'up') && reachBottom) {\n          this._loading.pullingEnd();\n        }\n      }\n      delete this._touchParams;\n    }\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar listMixin = {\n  methods: {\n    handleListScroll: function handleListScroll (event) {\n      this.handleScroll(event);\n\n      if (weex.utils.supportSticky()) {\n        return\n      }\n\n      var scrollTop = this.$el.scrollTop;\n      var h = this.$children.filter(function (vm) { return vm.$refs.header; });\n\n      if (h.length <= 0) {\n        return\n      }\n\n      for (var i = 0; i < h.length; i++) {\n        if (h[i].initTop < scrollTop) {\n          h[i].addSticky();\n        }\n        else {\n          h[i].removeSticky();\n        }\n      }\n    }\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nfunction getList (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var createEventMap = weex.createEventMap;\n\n  return {\n    name: 'weex-list',\n    mixins: [scrollable$1, listMixin],\n    computed: {\n      wrapperClass: function wrapperClass () {\n        var classArray = ['weex-list', 'weex-list-wrapper', 'weex-ct'];\n        this._refresh && classArray.push('with-refresh');\n        this._loading && classArray.push('with-loading');\n        return classArray.join(' ')\n      }\n    },\n\n    methods: {\n      createChildren: function createChildren (h) {\n        var slots = this.$slots.default || [];\n        this._cells = slots.filter(function (vnode) {\n          if (!vnode.tag || !vnode.componentOptions) { return false }\n          return true\n        });\n        return [\n          h('article', {\n            ref: 'inner',\n            staticClass: 'weex-list-inner weex-ct'\n          }, this._cells)\n        ]\n      }\n    },\n\n    render: function render (createElement) {\n      var this$1 = this;\n\n      this.weexType = 'list';\n\n      this.$nextTick(function () {\n        this$1.updateLayout();\n      });\n\n      return createElement('main', {\n        ref: 'wrapper',\n        attrs: { 'weex-type': 'list' },\n        staticClass: this.wrapperClass,\n        on: createEventMap(this, {\n          scroll: this.handleListScroll,\n          touchstart: this.handleTouchStart,\n          touchmove: this.handleTouchMove,\n          touchend: this.handleTouchEnd\n        }),\n        staticStyle: extractComponentStyle(this)\n      }, this.createChildren(createElement))\n    }\n  }\n}\n\nvar list$$1 = {\n  init: function init (weex) {\n    weex.registerComponent('list', getList(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction getScroller (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var createEventMap = weex.createEventMap;\n\n  return {\n    name: 'weex-scroller',\n    mixins: [scrollable$1, listMixin],\n    props: {\n      scrollDirection: {\n        type: [String],\n        default: 'vertical',\n        validator: function validator (value) {\n          return ['horizontal', 'vertical'].indexOf(value) !== -1\n        }\n      },\n      scrollable: {\n        type: [Boolean],\n        default: true\n      }\n    },\n    computed: {\n      wrapperClass: function wrapperClass () {\n        var classArray = ['weex-scroller', 'weex-scroller-wrapper', 'weex-ct'];\n        if (this.scrollDirection === 'horizontal') {\n          classArray.push('weex-scroller-horizontal');\n        }\n        else {\n          classArray.push('weex-scroller-vertical');\n        }\n        if (!this.scrollable) {\n          classArray.push('weex-scroller-disabled');\n        }\n        return classArray.join(' ')\n      }\n    },\n\n    methods: {\n      createChildren: function createChildren (h) {\n        var slots = this.$slots.default || [];\n        this._cells = slots.filter(function (vnode) {\n          if (!vnode.tag || !vnode.componentOptions) { return false }\n          return true\n        });\n        return [\n          h('article', {\n            ref: 'inner',\n            staticClass: 'weex-scroller-inner weex-ct'\n          }, this._cells)\n        ]\n      }\n    },\n\n    render: function render (createElement) {\n      var this$1 = this;\n\n      this.weexType = 'scroller';\n\n      /* istanbul ignore next */\n      // if (\"production\" === 'development') {\n      //   validateStyles('scroller', this.$vnode.data && this.$vnode.data.staticStyle)\n      // }\n\n      this._cells = this.$slots.default || [];\n      this.$nextTick(function () {\n        this$1.updateLayout();\n      });\n\n      return createElement('main', {\n        ref: 'wrapper',\n        attrs: { 'weex-type': 'scroller' },\n        on: createEventMap(this, {\n          scroll: this.handleScroll,\n          touchstart: this.handleTouchStart,\n          touchmove: this.handleTouchMove,\n          touchend: this.handleTouchEnd\n        }),\n        staticClass: this.wrapperClass,\n        staticStyle: extractComponentStyle(this)\n      }, this.createChildren(createElement))\n    }\n  }\n}\n\nvar scroller = {\n  init: function init (weex) {\n    weex.registerComponent('scroller', getScroller(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND,  either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * @fileoverview waterfall\n * NOTE: only support full screen width waterfall.\n */\n\nvar NORMAL_GAP_SIZE = 32;\nvar DEFAULT_COLUMN_COUNT = 1;\n\nfunction getWaterfall (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var createEventMap = weex.createEventMap;\n\n  return {\n    name: 'weex-waterfall',\n    mixins: [scrollable$1],\n    props: {\n      /**\n       * specified gap size.\n       * value can be number or 'normal'. 'normal' (32px) by default.\n       */\n      columnGap: {\n        type: [String, Number],\n        default: 'normal',\n        validator: function validator (val) {\n          if (!val || val === 'normal') {\n            return true\n          }\n          val = parseInt(val);\n          return !isNaN(val) && val > 0\n        }\n      },\n      /**\n       * the maximum column counts.\n       * value can be number or 'auto'. 1 by default.\n       */\n      columnCount: {\n        type: [String, Number],\n        default: DEFAULT_COLUMN_COUNT,\n        validator: function validator$1 (val) {\n          val = parseInt(val);\n          return !isNaN(val) && val > 0\n        }\n      },\n      /**\n       * the mimimum column width.\n       * value can be number or 'auto'. 'auto' by default.\n       */\n      columnWidth: {\n        type: [String, Number],\n        default: 'auto',\n        validator: function validator$2 (val) {\n          if (!val || val === 'auto') {\n            return true\n          }\n          val = parseInt(val);\n          return !isNaN(val) && val > 0\n        }\n      }\n    },\n\n    mounted: function mounted () {\n      this._nextTick();\n    },\n\n    updated: function updated () {\n      this.$nextTick(this._nextTick());\n    },\n\n    methods: {\n      _createChildren: function _createChildren (h, rootStyle) {\n        var this$1 = this;\n\n        var slots = this.$slots.default || [];\n        this._headers = [];\n        this._footers = [];\n        this._others = [];\n        var len = slots.length;\n\n        for (var i = 0; i < len; i++) {\n          var vnode = slots[i];\n          var tag = vnode.componentOptions && vnode.componentOptions.tag;\n          if (tag === 'refresh' || tag === 'loading') {\n            continue\n          }\n          if (tag === 'cell') {\n            break\n          }\n          if (tag === 'header') {\n            this$1._headers.push(vnode);\n          }\n        }\n\n        for (var i$1 = len - 1; i$1 >= 0; i$1--) {\n          var vnode$1 = slots[i$1];\n          var tag$1 = vnode$1.componentOptions && vnode$1.componentOptions.tag;\n          if (tag$1 === 'refresh' || tag$1 === 'loading') {\n            continue\n          }\n          if (tag$1 === 'cell') {\n            break\n          }\n          if (tag$1 === 'header') {\n            this$1._footers.push(vnode$1);\n          }\n        }\n\n        this._cells = slots.filter(function (vnode) {\n          if (!vnode.tag || !vnode.componentOptions) { return false }\n          var tag = vnode.componentOptions.tag;\n          if (tag === 'refresh' || tag === 'loading') {\n            this$1[(\"_\" + tag)] = vnode;\n            return false\n          }\n          if (tag !== 'cell') {\n            this$1._others.push(vnode);\n            return false\n          }\n          return true\n        });\n\n        this._reCalc(rootStyle);\n        this._genColumns(h);\n        var children = [];\n        this._refresh && children.push(this._refresh);\n        children = children.concat(this._headers);\n          // .concat(this._others)\n        children.push(h('html:div', {\n          ref: 'columns',\n          staticClass: 'weex-waterfall-inner-columns weex-ct'\n        }, this._columns));\n        children.push(h('html:div', {\n          ref: 'footers',\n          staticClass: 'weex-waterfall-footers weex-ct'\n        }, this._footers));\n        this._loading && children.push(this._loading);\n        return [\n          h('article', {\n            ref: 'inner',\n            staticClass: 'weex-waterfall-inner weex-ct'\n          }, children)\n        ]\n      },\n\n      _reCalc: function _reCalc (rootStyle) {\n        /**\n         * NOTE: columnGap and columnWidth can't both be auto.\n         * NOTE: the formula:\n         *  totalWidth = n * w + (n - 1) * gap\n         * 1. if columnCount = n then calc w\n         * 2. if columnWidth = w then calc n\n         * 3. if columnWidth = w and columnCount = n then calc totalWidth\n         *    3.1 if totalWidth < ctWidth then increase columnWidth\n         *    3.2 if totalWidth > ctWidth then decrease columnCount\n         */\n        var width, gap, cnt, ctWidth;\n        var scale = weex.config.env.scale;\n        var el = this.$el;\n        function getCtWidth (width, style) {\n          var padding = style.padding\n            ? parseInt(style.padding) * 2\n            : parseInt(style.paddingLeft || 0) + parseInt(style.paddingRight || 0);\n          return width - padding\n        }\n        if (el && el.nodeType === 1) {  // already mounted\n          var cstyle = window.getComputedStyle(el);\n          ctWidth = getCtWidth(el.getBoundingClientRect().width, cstyle);\n        }\n        else {  // not mounted.\n          // only support full screen width for waterfall component.\n          ctWidth = getCtWidth(document.documentElement.clientWidth, rootStyle);\n        }\n\n        gap = this.columnGap;\n        if (gap && gap !== 'normal') {\n          gap = parseInt(gap);\n        }\n        else {\n          gap = NORMAL_GAP_SIZE;\n        }\n        gap = gap * scale;\n\n        width = this.columnWidth;\n        cnt = this.columnCount;\n        if (width && width !== 'auto') {\n          width = parseInt(width) * scale;\n        }\n        if (cnt && cnt !== 'auto') {\n          cnt = parseInt(cnt);\n        }\n\n        // 0. if !columnCount && !columnWidth\n        if (cnt === 'auto' && width === 'auto') {\n          \n        }\n        // 1. if columnCount = n then calc w.\n        else if (cnt !== 'auto' && width === 'auto') {\n          width = (ctWidth - (cnt - 1) * gap) / cnt;\n        }\n        // 2. if columnWidth = w then calc n.\n        else if (cnt === 'auto' && width !== 'auto') {\n          cnt = (ctWidth + gap) / (width + gap);\n        }\n        // 3. if columnWidth = w and columnCount = n then calc totalWidth\n        else if (cnt !== 'auto' && width !== 'auto') {\n          var totalWidth;\n          var adjustCountAndWidth = function () {\n            totalWidth = cnt * width + (cnt - 1) * gap;\n            if (totalWidth < ctWidth) {\n              width += (ctWidth - totalWidth) / cnt;\n            }\n            else if (totalWidth > ctWidth && cnt > 1) {\n              cnt--;\n              adjustCountAndWidth();\n            }\n            else if (totalWidth > ctWidth) {  // cnt === 1\n              width = ctWidth;\n            }\n          };\n          adjustCountAndWidth();\n        }\n        this._columnCount = cnt;\n        this._columnWidth = width;\n        this._columnGap = gap;\n      },\n\n      _genColumns: function _genColumns (createElement) {\n        var this$1 = this;\n\n        this._columns = [];\n        var cells = this._cells;\n        var columnCnt = this._columnCount;\n        var len = cells.length;\n        var columnCells = this._columnCells = Array(columnCnt).join('.').split('.').map(function () { return [] });\n        // spread cells to the columns using simpole polling algorithm.\n        for (var i = 0; i < len; i++) {\n          (cells[i].data.attrs || (cells[i].data.attrs = {}))['data-cell'] = i;\n          columnCells[i % columnCnt].push(cells[i]);\n        }\n        for (var i$1 = 0; i$1 < columnCnt; i$1++) {\n          this$1._columns.push(createElement('html:div', {\n            ref: (\"column\" + i$1),\n            attrs: {\n              'data-column': i$1\n            },\n            staticClass: 'weex-ct',\n            staticStyle: {\n              width: this$1._columnWidth + 'px',\n              marginLeft: i$1 === 0 ? 0 : this$1._columnGap + 'px'\n            }\n          }, columnCells[i$1]));\n        }\n      },\n\n      _nextTick: function _nextTick () {\n        this._reLayoutChildren();\n      },\n\n      _reLayoutChildren: function _reLayoutChildren () {\n        var this$1 = this;\n\n        /**\n         * treat the shortest column bottom as the match standard.\n         * whichever cell exceeded it would be rearranged.\n         * 1. m = shortest column bottom.\n         * 2. get all cell ids who is below m.\n         * 3. calculate which cell should be in which column.\n         */\n        var columnCnt = this._columnCount;\n        var columnDoms = [];\n        var columnAppendFragments = [];\n        var columnBottoms = [];\n        var minBottom = Number.MAX_SAFE_INTEGER;\n        var minBottomColumnIndex = 0;\n\n        // 1. find the shortest column bottom.\n        for (var i = 0; i < columnCnt; i++) {\n          var columnDom = this$1._columns[i].elm;\n          var lastChild = columnDom.lastElementChild;\n          var bottom = lastChild ? lastChild.getBoundingClientRect().bottom : 0;\n          columnDoms.push(columnDom);\n          columnBottoms[i] = bottom;\n          columnAppendFragments.push(document.createDocumentFragment());\n          if (bottom < minBottom) {\n            minBottom = bottom;\n            minBottomColumnIndex = i;\n          }\n        }\n\n        // 2. get all cell ids who is below m.\n        var belowCellIds = [];\n        var belowCells = {};\n        for (var i$1 = 0; i$1 < columnCnt; i$1++) {\n          if (i$1 === minBottomColumnIndex) {\n            continue\n          }\n          var columnDom$1 = columnDoms[i$1];\n          var cellsInColumn = columnDom$1.querySelectorAll('section.weex-cell');\n          var len = cellsInColumn.length;\n          for (var j = len - 1; j >= 0; j--) {\n            var cellDom = cellsInColumn[j];\n            var cellRect = cellDom.getBoundingClientRect();\n            if (cellRect.top > minBottom) {\n              var id = ~~cellDom.getAttribute('data-cell');\n              belowCellIds.push(id);\n              belowCells[id] = { elm: cellDom, height: cellRect.height };\n              columnBottoms[i$1] -= cellRect.height;\n            }\n          }\n        }\n\n        // 3. calculate which cell should be in which column and rearrange them\n        //  in the dom tree.\n        belowCellIds.sort(function (a, b) { return a > b });\n        var cellIdsLen = belowCellIds.length;\n        function addToShortestColumn (belowCell) {\n          // find shortest bottom.\n          minBottom = Math.min.apply(Math, columnBottoms);\n          minBottomColumnIndex = columnBottoms.indexOf(minBottom);\n          var cellElm = belowCell.elm;\n          var cellHeight = belowCell.height;\n          columnAppendFragments[minBottomColumnIndex].appendChild(cellElm);\n          columnBottoms[minBottomColumnIndex] += cellHeight;\n        }\n        for (var i$2 = 0; i$2 < cellIdsLen; i$2++) {\n          addToShortestColumn(belowCells[belowCellIds[i$2]]);\n        }\n        for (var i$3 = 0; i$3 < columnCnt; i$3++) {\n          columnDoms[i$3].appendChild(columnAppendFragments[i$3]);\n        }\n      }\n    },\n\n    render: function render (createElement) {\n      var this$1 = this;\n\n      this.weexType = 'waterfall';\n      this._cells = this.$slots.default || [];\n      this.$nextTick(function () {\n        this$1.updateLayout();\n      });\n      var mergedStyle = extractComponentStyle(this);\n      return createElement('main', {\n        ref: 'wrapper',\n        attrs: { 'weex-type': 'waterfall' },\n        on: createEventMap(this, {\n          scroll: this.handleScroll,\n          touchstart: this.handleTouchStart,\n          touchmove: this.handleTouchMove,\n          touchend: this.handleTouchEnd\n        }),\n        staticClass: 'weex-waterfall weex-waterfall-wrapper weex-ct',\n        staticStyle: mergedStyle\n      }, this._createChildren(createElement, mergedStyle))\n    }\n  }\n}\n\nvar waterfall = {\n  init: function init (weex) {\n    weex.registerComponent('waterfall', getWaterfall(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction getCell (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  return {\n    name: 'weex-cell',\n    render: function render (createElement) {\n      return createElement('section', {\n        attrs: { 'weex-type': 'cell' },\n        staticClass: 'weex-cell weex-ct',\n        staticStyle: extractComponentStyle(this)\n      }, this.$slots.default)\n    }\n  }\n}\n\nvar cell = {\n  init: function init (weex) {\n    weex.registerComponent('cell', getCell(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction getHeader (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var ref = weex.utils;\n  var supportSticky = ref.supportSticky;\n\n  return {\n    data: function data () {\n      return {\n        sticky: false,\n        initTop: 0,\n        placeholder: null,\n        supportSticky: supportSticky()\n      }\n    },\n\n    mounted: function mounted () {\n      this.initTop = this.$el.offsetTop;\n      this.placeholder = window.document.createElement('header');\n    },\n\n    updated: function updated () {\n      if (!this.sticky) {\n        this.initTop = this.$el.offsetTop;\n      }\n    },\n\n    methods: {\n      addSticky: function addSticky () {\n        this.sticky = true;\n        this.placeholder.style.display = 'block';\n        this.placeholder.style.width = this.$el.offsetWidth + 'px';\n        this.placeholder.style.height = this.$el.offsetHeight + 'px';\n        this.$el.parentNode.insertBefore(this.placeholder, this.$el);\n      },\n\n      removeSticky: function removeSticky () {\n        this.sticky = false;\n        try {\n          this.$el.parentNode.removeChild(this.placeholder);\n        }\n        catch (e) {\n        }\n      }\n    },\n\n    render: function render (createElement) {\n      /* istanbul ignore next */\n      // if (\"production\" === 'development') {\n      //   validateStyles('header', this.$vnode.data && this.$vnode.data.staticStyle)\n      // }\n      return createElement('html:header', {\n        attrs: { 'weex-type': 'header' },\n        ref: 'header',\n        staticClass: 'weex-header weex-ct',\n        class: { 'weex-sticky': this.sticky, 'weex-ios-sticky': this.supportSticky },\n        staticStyle: extractComponentStyle(this)\n      }, this.$slots.default)\n    }\n  }\n}\n\nvar header = {\n  init: function init (weex) {\n    weex.registerComponent('header', getHeader(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction getLoading () {\n  var extractComponentStyle = weex.extractComponentStyle;\n\n  return {\n    name: 'weex-loading',\n    props: {\n      display: {\n        type: String,\n        default: 'show',\n        validator: function validator (value) {\n          return ['show', 'hide'].indexOf(value) !== -1\n        }\n      }\n    },\n    data: function data () {\n      return {\n        height: -1,\n        viewHeight: 0\n      }\n    },\n    mounted: function mounted () {\n      this.viewHeight = this.$el.offsetHeight;\n      if (this.display === 'hide') {\n        this.height = 0;\n      }\n      else {\n        this.height = this.viewHeight;\n      }\n    },\n    watch: {\n      height: function height (val) {\n        this.$el.style.height = val + \"px\";\n      },\n      display: function display (val) {\n        if (val === 'hide') {\n          this.height = 0;\n        }\n        else {\n          this.height = this.viewHeight;\n        }\n      }\n    },\n    methods: {\n      pulling: function pulling (offsetY) {\n        if ( offsetY === void 0 ) offsetY = 0;\n\n        this.height = offsetY;\n      },\n      pullingUp: function pullingUp (offsetY) {\n        this.$el.style.transition = \"height 0s\";\n        this.pulling(offsetY);\n      },\n      pullingEnd: function pullingEnd () {\n        this.$el.style.transition = \"height .2s\";\n        if (this.height >= this.viewHeight) {\n          this.pulling(this.viewHeight);\n          this.$emit('loading');\n        }\n        else {\n          this.pulling(0);\n        }\n      },\n      getChildren: function getChildren () {\n        var children = this.$slots.default || [];\n        if (this.display === 'show') {\n          return children\n        }\n        return children.filter(function (vnode) {\n          return vnode.componentOptions\n            && vnode.componentOptions.tag !== 'loading-indicator'\n        })\n      }\n    },\n    render: function render (createElement) {\n      this.$parent._loading = this;\n      return createElement('aside', {\n        ref: 'loading',\n        attrs: { 'weex-type': 'loading' },\n        staticClass: 'weex-loading weex-ct',\n        staticStyle: extractComponentStyle(this)\n      }, this.getChildren())\n    }\n  }\n}\n\nvar loading = {\n  init: function init (weex) {\n    weex.registerComponent('loading', getLoading(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction getRefresh (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var ref = weex.utils;\n  var createEvent = ref.createEvent;\n\n  return {\n    name: 'weex-refresh',\n    props: {\n      display: {\n        type: String,\n        default: 'show',\n        validator: function validator (value) {\n          return ['show', 'hide'].indexOf(value) !== -1\n        }\n      }\n    },\n    data: function data () {\n      return {\n        lastDy: 0,\n        viewHeight: 0,\n        height: -1\n      }\n    },\n    mounted: function mounted () {\n      this.viewHeight = this.$el.offsetHeight;\n      if (this.display === 'hide') {\n        this.height = 0;\n      }\n      else {\n        this.height = this.viewHeight;\n      }\n    },\n    watch: {\n      height: function height (val) {\n        this.$el.style.height = val + \"px\";\n      },\n      display: function display (val) {\n        if (val === 'hide') {\n          this.height = 0;\n        }\n        else {\n          this.height = this.viewHeight;\n        }\n      }\n    },\n    methods: {\n      pulling: function pulling (offsetY) {\n        if ( offsetY === void 0 ) offsetY = 0;\n\n        this.height = offsetY;\n        this.$emit('pullingdown', createEvent(this, 'pullingdown', {\n          dy: offsetY - this.lastDy,\n          pullingDistance: offsetY,\n          viewHeight: this.viewHeight\n        }));\n        this.lastDy = offsetY;\n      },\n      pullingDown: function pullingDown (offsetY) {\n        this.$el.style.transition = \"height 0s\";\n        this.pulling(offsetY);\n      },\n      pullingEnd: function pullingEnd () {\n        this.$el.style.transition = \"height .2s\";\n        if (this.height >= this.viewHeight) {\n          this.pulling(this.viewHeight);\n          this.$emit('refresh');\n        }\n        else {\n          this.pulling(0);\n        }\n      },\n      getChildren: function getChildren () {\n        var children = this.$slots.default || [];\n        if (this.display === 'show') {\n          return children\n        }\n        return children.filter(function (vnode) {\n          return vnode.componentOptions\n            && vnode.componentOptions.tag !== 'loading-indicator'\n        })\n      }\n    },\n    render: function render (createElement) {\n      this.$parent._refresh = this;\n      return createElement('aside', {\n        ref: 'refresh',\n        attrs: { 'weex-type': 'refresh' },\n        staticClass: 'weex-refresh weex-ct',\n        staticStyle: extractComponentStyle(this)\n      }, this.getChildren())\n    }\n  }\n}\n\nvar refresh = {\n  init: function init (weex) {\n    weex.registerComponent('refresh', getRefresh(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar extractComponentStyle$3;\nvar getRgb$1;\nvar loopArray$1;\nvar getStyleSheetById$1;\n\nvar _css$5 = \"\\n.weex-refresh-indicator,\\n.weex-loading-indicator {\\n  width: 1rem !important;\\n  height: 1rem !important;\\n  -webkit-box-align: center;\\n  -moz-box-align: center;\\n  -webkit-align-items: center;\\n  -ms-flex-align: center;\\n  align-items: center;\\n  -webkit-box-pack: center;\\n  -moz-box-pack: center;\\n  -webkit-justify-content: center;\\n  -ms-flex-pack: center;\\n  justify-content: center;\\n  overflow: visible;\\n  background: none;\\n}\\n.weex-refresh-indicator:before,\\n.weex-loading-indicator:before {\\n  display: block;\\n  content: '';\\n  font-size: 0.16rem;\\n  width: 0.5em;\\n  height: 0.5em;\\n  left: 0;\\n  top: 0;\\n  border-radius: 50%;\\n  position: relative;\\n  text-indent: -9999em;\\n  -webkit-animation: weex-spinner 1.1s infinite ease;\\n  -moz-animation: weex-spinner 1.1s infinite ease;\\n  animation: weex-spinner 1.1s infinite ease;\\n}\\n\\n@-webkit-keyframes weex-spinner {\\n  0%,\\n  100% {\\n    box-shadow: 0em -1.3em 0em 0em #ffffff, 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.5), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7);\\n  }\\n  11.25% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.7), 0.9em -0.9em 0 0em #ffffff, 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5);\\n  }\\n  25% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.5), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7), 1.25em 0em 0 0em #ffffff, 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  37.5% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5), 1.25em 0em 0 0em rgba(255, 255, 255, 0.7), 0.875em 0.875em 0 0em #ffffff, 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  50% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.5), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.7), 0em 1.25em 0 0em #ffffff, -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  61.25% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.5), 0em 1.25em 0 0em rgba(255, 255, 255, 0.7), -0.9em 0.9em 0 0em #ffffff, -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  75% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.5), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.7), -1.3em 0em 0 0em #ffffff, -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  87.5% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.5), -1.3em 0em 0 0em rgba(255, 255, 255, 0.7), -0.9em -0.9em 0 0em #ffffff;\\n  }\\n}\\n\\n@keyframes weex-spinner {\\n  0%,\\n  100% {\\n    box-shadow: 0em -1.3em 0em 0em #ffffff, 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.5), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7);\\n  }\\n  11.25% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.7), 0.9em -0.9em 0 0em #ffffff, 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5);\\n  }\\n  25% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.5), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7), 1.25em 0em 0 0em #ffffff, 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  37.5% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5), 1.25em 0em 0 0em rgba(255, 255, 255, 0.7), 0.875em 0.875em 0 0em #ffffff, 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  50% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.5), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.7), 0em 1.25em 0 0em #ffffff, -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  61.25% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.5), 0em 1.25em 0 0em rgba(255, 255, 255, 0.7), -0.9em 0.9em 0 0em #ffffff, -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  75% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.5), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.7), -1.3em 0em 0 0em #ffffff, -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\\n  }\\n  87.5% {\\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.5), -1.3em 0em 0 0em rgba(255, 255, 255, 0.7), -0.9em -0.9em 0 0em #ffffff;\\n  }\\n}\\n\";\n\nfunction getStyleSheet (spinnerVm) {\n  if (spinnerVm._styleSheet) {\n    return\n  }\n  spinnerVm._styleSheet = getStyleSheetById$1('weex-cmp-loading-indicator');\n}\n\nfunction setKeyframeColor (spinnerVm, val) {\n  getStyleSheet(spinnerVm);\n  var keyframeRules = computeKeyFrameRules(val);\n  var rules = spinnerVm._styleSheet.rules || spinnerVm._styleSheet.cssRules;\n  for (var i = 0, l = rules.length; i < l; i++) {\n    var item = rules.item(i);\n    if ((item.type === CSSRule.KEYFRAMES_RULE\n          || item.type === CSSRule.WEBKIT_KEYFRAMES_RULE)\n        && item.name === 'weex-spinner') {\n      var cssRules = item.cssRules;\n      for (var j = 0, m = cssRules.length; j < m; j++) {\n        var keyframe = cssRules[j];\n        if (keyframe.type === CSSRule.KEYFRAME_RULE\n          || keyframe.type === CSSRule.WEBKIT_KEYFRAME_RULE) {\n          keyframe.style.boxShadow = keyframeRules[j];\n        }\n      }\n    }\n  }\n}\n\nfunction computeKeyFrameRules (rgb) {\n  if (!rgb) {\n    return\n  }\n  var scaleArr = [\n    '0em -1.3em 0em 0em',\n    '0.9em -0.9em 0 0em',\n    '1.25em 0em 0 0em',\n    '0.875em 0.875em 0 0em',\n    '0em 1.25em 0 0em',\n    '-0.9em 0.9em 0 0em',\n    '-1.3em 0em 0 0em',\n    '-0.9em -0.9em 0 0em'];\n  var colorArr = [\n    '1',\n    '0.2',\n    '0.2',\n    '0.2',\n    '0.2',\n    '0.2',\n    '0.5',\n    '0.7'].map(function (e) {\n      return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + e + ')'\n    });\n  var rules = [];\n  var loop = function ( i ) {\n    var tmpColorArr = loopArray$1(colorArr, i, 'r');\n    rules.push(scaleArr.map(function (scaleStr, i) {\n      return scaleStr + ' ' + tmpColorArr[i]\n    }).join(', '));\n  };\n\n  for (var i = 0; i < scaleArr.length; i++) loop( i );\n  return rules\n}\n\nfunction processStyle$1 (vm) {\n  var style = extractComponentStyle$3(vm);\n  var color = style.color;\n  var rgb = color && getRgb$1(color);\n  if (rgb) {\n    setKeyframeColor(vm, rgb);\n  }\n  return style\n}\n\nvar loadingIndicator = {\n  name: 'weex-loading-indicator',\n  render: function render (createElement) {\n    this.weexType = 'loading-indicator';\n    return createElement('mark', {\n      attrs: { 'weex-type': 'loading-indicator' },\n      staticClass: 'weex-loading-indicator weex-ct',\n      staticStyle: processStyle$1(this)\n    })\n  },\n  _css: _css$5\n};\n\nvar loadingIndicator$1 = {\n  init: function init (weex) {\n    extractComponentStyle$3 = weex.extractComponentStyle;\n    getRgb$1 = weex.utils.getRgb;\n    loopArray$1 = weex.utils.loopArray;\n    getStyleSheetById$1 = weex.utils.getStyleSheetById;\n    weex.registerComponent('loading-indicator', loadingIndicator);\n  }\n};\n\n__$styleInject(\"/*\\n * Licensed to the Apache Software Foundation (ASF) under one\\n * or more contributor license agreements.  See the NOTICE file\\n * distributed with this work for additional information\\n * regarding copyright ownership.  The ASF licenses this file\\n * to you under the Apache License, Version 2.0 (the\\n * \\\"License\\\"); you may not use this file except in compliance\\n * with the License.  You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n * KIND, either express or implied.  See the License for the\\n * specific language governing permissions and limitations\\n * under the License.\\n */\\n\\nbody > .weex-list,\\nbody > .weex-scroller,\\nbody > .weex-waterfall {\\n  max-height: 100%;\\n}\\n\\n.weex-list-wrapper,\\n.weex-scroller-wrapper,\\n.weex-waterfall-wrapper {\\n  -webkit-overflow-scrolling: touch;\\n}\\n\\n.weex-list-wrapper,\\n.weex-waterfall-wrapper {\\n  overflow-y: scroll !important;\\n  overflow-x: hidden !important;\\n}\\n\\n.weex-list-inner,\\n.weex-scroller-inner,\\n.weex-waterfall-inner {\\n  -webkit-overflow-scrolling: touch;\\n}\\n\\n.weex-waterfall-inner-columns {\\n  -webkit-flex-direction: row;\\n  -moz-box-orient: horizontal;\\n  -moz-box-direction: normal;\\n  -ms-flex-direction: row;\\n  flex-direction: row;\\n  -webkit-box-orient: horizontal;\\n}\\n\\n.weex-scroller-wrapper.weex-scroller-vertical {\\n  overflow-x: hidden;\\n  overflow-y: scroll;\\n}\\n\\n.weex-scroller-wrapper.weex-scroller-horizontal {\\n  overflow-x: scroll;\\n  overflow-y: hidden;\\n}\\n\\n.weex-scroller-wrapper.weex-scroller-disabled {\\n  overflow-x: hidden;\\n  overflow-y: hidden;\\n}\\n\\n.weex-scroller-horizontal .weex-scroller-inner {\\n  -webkit-flex-direction: row;\\n  -ms-flex-direction: row;\\n  -moz-box-orient: horizontal;\\n  -moz-box-direction: normal;\\n  flex-direction: row;\\n  -webkit-box-orient: horizontal;\\n  height: 100%;\\n}\\n\\n.weex-cell {\\n  width: 100%;\\n}\\n\\n.weex-refresh,\\n.weex-loading {\\n  -webkit-box-align: center;\\n  -webkit-align-items: center;\\n  -moz-box-align: center;\\n  -ms-flex-align: center;\\n  align-items: center;\\n  -webkit-box-pack: center;\\n  -webkit-justify-content: center;\\n  -moz-box-pack: center;\\n  -ms-flex-pack: center;\\n  justify-content: center;\\n  width: 100%;\\n  overflow: hidden;\\n}\\n\",undefined);\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar modules = [\n  list$$1,\n  scroller,\n  waterfall,\n  cell,\n  header,\n  loading,\n  refresh,\n  loadingIndicator$1\n];\n\nvar scrollable = {\n  init: function init (weex) {\n    modules.forEach(function (mod) {\n      weex.install(mod);\n    });\n  }\n};\n\n__$styleInject(\"/*\\n * Licensed to the Apache Software Foundation (ASF) under one\\n * or more contributor license agreements.  See the NOTICE file\\n * distributed with this work for additional information\\n * regarding copyright ownership.  The ASF licenses this file\\n * to you under the Apache License, Version 2.0 (the\\n * \\\"License\\\"); you may not use this file except in compliance\\n * with the License.  You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n * KIND, either express or implied.  See the License for the\\n * specific language governing permissions and limitations\\n * under the License.\\n */\\n \\n.weex-slider-wrapper {\\n  overflow-x: hidden;\\n  overflow-y: visible;\\n}\\n\\n.weex-slider-inner {\\n  width: 100%;\\n  height: 100%;\\n  overflow: visible;\\n  -webkit-flex-direction: row;\\n  -moz-box-orient: horizontal;\\n  -moz-box-direction: normal;\\n  -ms-flex-direction: row;\\n  flex-direction: row;\\n  -webkit-box-orient: horizontal;\\n}\\n\\n.weex-slider-cell {\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  background: transparent !important;\\n  overflow: hidden;\\n  -webkit-box-align: center;\\n  -webkit-align-items: center;\\n  -moz-box-align: center;\\n  -ms-flex-align: center;\\n  align-items: center;\\n  -webkit-box-pack: center;\\n  -webkit-justify-content: center;\\n  -moz-box-pack: center;\\n  -ms-flex-pack: center;\\n  justify-content: center;\\n}\\n\\n.neighbor-cell {\\n  overflow: visible !important;\\n}\",undefined);\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar TRANSITION_TIME = 400;\nvar NEIGHBOR_SCALE_TIME = 100;\nvar MAIN_SLIDE_OPACITY = 1;\nvar THROTTLE_SCROLL_TIME = 25;\nvar INTERVAL_MINIMUM = 200;\n\nvar slideMixin = {\n  created: function created () {\n    this._clones = [];\n    this.innerOffset = 0;\n    this._indicator = null;\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    this._getWrapperSize();\n  },\n\n  updated: function updated () {\n    var children = this.$children;\n    var len = children && children.length;\n    var frameCount = this.frameCount;\n    if (frameCount !== this._prevFrameCount) {\n      var inner = this.$refs.inner;\n      if (inner) {\n        inner.style.webkitTransform = \"translate3d(\" + (0) + \"px, 0, 0)\";\n        inner.style.mozTransform = \"translate3d(\" + (0) + \"px, 0, 0)\";\n        inner.style.transform = \"translate3d(\" + (0) + \"px, 0, 0)\";\n      }\n    }\n    if (children && len > 0) {\n      for (var i = 0; i < len; i++) {\n        var vm = children[i];\n        if (vm.$options._componentTag === 'indicator'\n          || vm.$vnode.data.ref === 'indicator') {\n          vm._watcher.get();\n          break\n        }\n      }\n    }\n    weex.utils.fireLazyload(this.$el, true);\n    if (this._preIndex !== this.currentIndex) {\n      this._slideTo(this.currentIndex);\n    }\n  },\n\n  mounted: function mounted () {\n    this._getWrapperSize();\n    this._slideTo(this.currentIndex);\n    weex.utils.fireLazyload(this.$el, true);\n  },\n\n  methods: {\n    _getWrapperSize: function _getWrapperSize () {\n      var wrapper = this.$refs.wrapper;\n      if (wrapper) {\n        var rect = wrapper.getBoundingClientRect();\n        this._wrapperWidth = rect.width;\n        this._wrapperHeight = rect.height;\n      }\n    },\n\n    _formatChildren: function _formatChildren (createElement) {\n      var this$1 = this;\n\n      var children = this.$slots.default || [];\n      var indicatorVnode;\n      var cells = children.filter(function (vnode) {\n        if (!vnode.tag) { return false }\n        if (vnode.componentOptions && vnode.componentOptions.tag === 'indicator') {\n          indicatorVnode = vnode;\n          return false\n        }\n        return true\n      }).map(function (vnode) {\n        return createElement('li', {\n          ref: 'cells',\n          staticClass: (\"weex-slider-cell weex-ct\" + (this$1.isNeighbor ? ' neighbor-cell' : ''))\n        }, [vnode])\n      });\n      if (indicatorVnode) {\n        indicatorVnode.data.attrs = indicatorVnode.data.attrs || {};\n        indicatorVnode.data.attrs.count = cells.length;\n        indicatorVnode.data.attrs.active = this.currentIndex;\n        this._indicator = indicatorVnode;\n      }\n      return cells\n    },\n\n    _renderSlides: function _renderSlides (createElement) {\n      this._cells = this._formatChildren(createElement);\n      this.frameCount = this._cells.length;\n      return createElement(\n        'nav',\n        {\n          ref: 'wrapper',\n          attrs: { 'weex-type': this.isNeighbor ? 'slider-neighbor' : 'slider' },\n          on: weex.createEventMap(\n            this,\n            ['scroll', 'scrollstart', 'scrollend'],\n            {\n              touchstart: this._handleTouchStart,\n              touchmove: weex.utils.throttle(weex.utils.bind(this._handleTouchMove, this), 25),\n              touchend: this._handleTouchEnd,\n              touchcancel: this._handleTouchCancel\n            }\n          ),\n          staticClass: 'weex-slider weex-slider-wrapper weex-ct',\n          staticStyle: weex.extractComponentStyle(this)\n        },\n        [\n          createElement('ul', {\n            ref: 'inner',\n            staticClass: 'weex-slider-inner weex-ct'\n          }, this._cells),\n          this._indicator\n        ]\n      )\n    },\n\n    // get standard index\n    _normalizeIndex: function _normalizeIndex (index) {\n      var newIndex = (index + this.frameCount) % this.frameCount;\n      return Math.min(Math.max(newIndex, 0), this.frameCount - 1)\n    },\n\n    _startAutoPlay: function _startAutoPlay () {\n      if (!this.autoPlay || this.autoPlay === 'false') {\n        return\n      }\n      if (this._autoPlayTimer) {\n        clearTimeout(this._autoPlayTimer);\n        this._autoPlayTimer = null;\n      }\n      var interval = parseInt(this.interval - TRANSITION_TIME - NEIGHBOR_SCALE_TIME);\n      interval = interval > INTERVAL_MINIMUM ? interval : INTERVAL_MINIMUM;\n      this._autoPlayTimer = setTimeout(weex.utils.bind(this._next, this), interval);\n    },\n\n    _stopAutoPlay: function _stopAutoPlay () {\n      if (this._autoPlayTimer) {\n        clearTimeout(this._autoPlayTimer);\n        this._autoPlayTimer = null;\n      }\n    },\n\n    _slideTo: function _slideTo (index, isTouchScroll) {\n      var this$1 = this;\n\n      if (this.frameCount <= 0) {\n        return\n      }\n      if (!this.infinite || this.infinite === 'false') {\n        if (index === -1 || index > (this.frameCount - 1)) {\n          this._slideTo(this.currentIndex);\n          return\n        }\n      }\n\n      if (!this._preIndex && this._preIndex !== 0) {\n        if (this._showNodes && this._showNodes[0]) {\n          this._preIndex = this._showNodes[0].index;\n        }\n        else {\n          this._preIndex = this.currentIndex;\n        }\n      }\n\n      if (this._sliding) {\n        return\n      }\n      this._sliding = true;\n\n      var newIndex = this._normalizeIndex(index);\n      var inner = this.$refs.inner;\n      var step = this._step = this.frameCount <= 1 ? 0 : this._preIndex - index;\n\n      if (inner) {\n        this._prepareNodes();\n        var translate = weex.utils.getTransformObj(inner).translate;\n        var match = translate && translate.match(/translate[^(]+\\(([+-\\d.]+)/);\n        var innerX = match && match[1] || 0;\n        var dist = innerX - this.innerOffset;\n        this.innerOffset += step * this._wrapperWidth;\n        // transform the whole slides group.\n        inner.style.webkitTransition = \"-webkit-transform \" + (TRANSITION_TIME / 1000) + \"s ease-in-out\";\n        inner.style.mozTransition = \"transform \" + (TRANSITION_TIME / 1000) + \"s ease-in-out\";\n        inner.style.transition = \"transform \" + (TRANSITION_TIME / 1000) + \"s ease-in-out\";\n        inner.style.webkitTransform = \"translate3d(\" + (this.innerOffset) + \"px, 0, 0)\";\n        inner.style.mozTransform = \"translate3d(\" + (this.innerOffset) + \"px, 0, 0)\";\n        inner.style.transform = \"translate3d(\" + (this.innerOffset) + \"px, 0, 0)\";\n\n        // emit scroll events.\n        if (!isTouchScroll) {\n          this._emitScrollEvent('scrollstart');\n        }\n        setTimeout(function () {\n          this$1._throttleEmitScroll(dist, function () {\n            this$1._emitScrollEvent('scrollend');\n          });\n        }, THROTTLE_SCROLL_TIME);\n\n        this._loopShowNodes(step);\n\n        setTimeout(function () {\n          if (this$1.isNeighbor) {\n            this$1._setNeighbors();\n          }\n\n          setTimeout(function () {\n            inner.style.webkitTransition = '';\n            inner.style.mozTransition = '';\n            inner.style.transition = '';\n            for (var i = this$1._showStartIdx; i <= this$1._showEndIdx; i++) {\n              var node = this$1._showNodes[i];\n              if (!node) { continue }\n              var elm = node.firstElementChild;\n              elm.style.webkitTransition = '';\n              elm.style.mozTransition = '';\n              elm.style.transition = '';\n            }\n            // clean cloned nodes and rearrange slide cells.\n            this$1._rearrangeNodes(newIndex);\n          }, NEIGHBOR_SCALE_TIME);\n        }, TRANSITION_TIME);\n      }\n\n      if (newIndex !== this._preIndex) {\n        this.$emit('change', weex.utils.createEvent(this.$el, 'change', {\n          index: newIndex\n        }));\n      }\n    },\n\n    _clearNodesOffset: function _clearNodesOffset () {\n      var this$1 = this;\n\n      var end = this._showEndIdx;\n      for (var i = this._showStartIdx; i <= end; i++) {\n        var node = this$1._showNodes[i];\n        node = node && node.firstElementChild;\n        if (!node) { continue }\n        weex.utils.addTransform(this$1._showNodes[i].firstElementChild, {\n          translate: 'translate3d(0px, 0px, 0px)'\n        });\n      }\n    },\n\n    _loopShowNodes: function _loopShowNodes (step) {\n      var this$1 = this;\n\n      if (!step || this.frameCount <= 1) {\n        return\n      }\n      var sign = step > 0 ? 1 : -1;\n      var i = step <= 0 ? this._showStartIdx : this._showEndIdx;\n      var end = step <= 0 ? this._showEndIdx : this._showStartIdx;\n      for (; i !== end - sign; i -= sign) {\n        var nextIdx = i + step;\n        this$1._showNodes[nextIdx] = this$1._showNodes[i];\n        this$1._showNodes[nextIdx]._showIndex = nextIdx;\n        delete this$1._showNodes[i];\n      }\n      this._showStartIdx += step;\n      this._showEndIdx += step;\n    },\n\n    _prepareNodes: function _prepareNodes () {\n      // test if the next slide towards the direction exists.\n      // e.g. currentIndex 0 -> 1: should prepare 4 slides: -1, 0, 1, 2\n      // if not, translate a node to here, or just clone it.\n      var step = this._step;\n      var prevCount = this._prevFrameCount;\n      var curCount = this.frameCount;\n      // frameCount updated in runtime, should init again.\n      if (prevCount !== curCount) {\n        this._prevFrameCount = curCount;\n        this._inited = false;\n      }\n      if (!this._inited) {\n        this._initNodes();\n        this._inited = true;\n        this._showNodes = {};\n      }\n      if (curCount <= 1) {\n        this._showStartIdx = this._showEndIdx = 0;\n        var node = this._cells[0].elm;\n        node.style.opacity = 1;\n        node.style.zIndex = 99;\n        node.index = 0;\n        this._showNodes[0] = node;\n        node._inShow = true;\n        node._showIndex = 0;\n        return\n      }\n      var showCount = this._showCount = Math.abs(step) + 3;\n      this._showStartIdx = step <= 0 ? -1 : 2 - showCount;\n      this._showEndIdx = step <= 0 ? showCount - 2 : 1;\n      this._clearNodesOffset();\n      this._positionNodes(this._showStartIdx, this._showEndIdx, step);\n    },\n\n    _initNodes: function _initNodes () {\n      var total = this.frameCount;\n      var cells = this._cells;\n      for (var i = 0; i < total; i++) {\n        var node = cells[i].elm;\n        node.index = i;\n        node._inShow = false;\n        node.style.zIndex = 0;\n        node.style.opacity = 0;\n      }\n    },\n\n    _positionNodes: function _positionNodes (begin, end, step, anim) {\n      var this$1 = this;\n\n      var cells = this._cells;\n      var start = step <= 0 ? begin : end;\n      var stop = step <= 0 ? end : begin;\n      var sign = step <= 0 ? -1 : 1;\n      var cellIndex = this._preIndex + sign;\n      for (var i = start; i !== stop - sign; i = i - sign) {\n        var node = cells[this$1._normalizeIndex(cellIndex)].elm;\n        cellIndex = cellIndex - sign;\n        this$1._positionNode(node, i);\n      }\n    },\n\n    /**\n     * index: position index in the showing cells' view.\n     */\n    _positionNode: function _positionNode (node, index) {\n      var holder = this._showNodes[index];\n      if (node._inShow && holder !== node) {\n        if (holder) { this._removeClone(holder); }\n        node = this._getClone(node.index);\n      }\n      else if (node._inShow) {\n        return\n      }\n\n      node._inShow = true;\n      var translateX = index * this._wrapperWidth - this.innerOffset;\n      weex.utils.addTransform(node, {\n        translate: (\"translate3d(\" + translateX + \"px, 0px, 0px)\")\n      });\n      node.style.zIndex = 99 - Math.abs(index);\n      node.style.opacity = 1;\n      node._showIndex = index;\n      this._showNodes[index] = node;\n    },\n\n    _getClone: function _getClone (index) {\n      var arr = this._clones[index];\n      if (!arr) {\n        this._clones[index] = arr = [];\n      }\n      if (arr.length <= 0) {\n        var origNode = this._cells[index].elm;\n        var clone = origNode.cloneNode(true);\n        clone._isClone = true;\n        clone._inShow = origNode._inShow;\n        clone.index = origNode.index;\n        clone.style.opacity = 0;\n        clone.style.zIndex = 0;\n        var ct = this.$refs.inner;\n        ct.appendChild(clone);\n        arr.push(clone);\n      }\n      return arr.pop()\n    },\n\n    _removeClone: function _removeClone (node) {\n      var idx = node.index;\n      this._hideNode(node);\n      var arr = this._clones[idx];\n      arr.push(node);\n    },\n\n    _hideNode: function _hideNode (node) {\n      node._inShow = false;\n      node.style.opacity = 0;\n      node.style.zIndex = 0;\n    },\n\n    /**\n     * hide nodes from begin to end in showArray.\n     * if it is clone node, just move the clone node to the buffer.\n     */\n    _clearNodes: function _clearNodes (begin, end) {\n      var this$1 = this;\n\n      for (var i = begin; i <= end; i++) {\n        var node = this$1._showNodes[i];\n        if (!node) { return }\n        if (node._isClone) {\n          this$1._removeClone(node);\n        }\n        else if (!node._inShow) {\n          this$1._hideNode(node);\n        }\n        delete this$1._showNodes[i];\n      }\n    },\n\n    /**\n     * copy node style props (opacity and zIndex) and transform status from\n     * one element to another.\n     */\n    _copyStyle: function _copyStyle (from, to, styles, transformExtra) {\n      if ( styles === void 0 ) styles = ['opacity', 'zIndex'];\n      if ( transformExtra === void 0 ) transformExtra = {};\n\n      weex.utils.extendKeys(to.style, from.style, styles);\n      var transObj = weex.utils.getTransformObj(from);\n      for (var k in transformExtra) {\n        transObj[k] = transformExtra[k];\n      }\n      weex.utils.addTransform(to, transObj);\n      var fromInner = from.firstElementChild;\n      var toInner = to.firstElementChild;\n      toInner.style.opacity = fromInner.style.opacity;\n      weex.utils.copyTransform(fromInner, toInner);\n    },\n\n    /**\n     * replace a clone node with the original node if it's not in use.\n     */\n    _replaceClone: function _replaceClone (clone, pos) {\n      var this$1 = this;\n\n      var origNode = this._cells[clone.index].elm;\n      if (origNode._inShow) {\n        return\n      }\n      var origShowIndex = origNode._showIndex;\n      var styleProps = ['opacity', 'zIndex'];\n      var cl;\n      if (Math.abs(origShowIndex) <= 1) {\n        // leave a clone to replace the origNode in the show zone(-1 ~ 1).\n        cl = this._getClone(origNode.index);\n        this._copyStyle(origNode, cl);\n        this._showNodes[origShowIndex] = cl;\n      }\n      origNode._inShow = true;\n      var transObj = weex.utils.getTransformObj(clone);\n      transObj.translate = transObj.translate.replace(/[+-\\d.]+[pw]x/, function ($0) {\n        return pos * this$1._wrapperWidth - this$1.innerOffset + 'px'\n      });\n      this._copyStyle(clone, origNode, styleProps, transObj);\n      this._removeClone(clone);\n      if (!cl) {\n        delete this._showNodes[origShowIndex];\n      }\n      this._showNodes[pos] = origNode;\n      origNode._showIndex = pos;\n    },\n\n    _rearrangeNodes: function _rearrangeNodes (newIndex) {\n      var this$1 = this;\n\n      if (this.frameCount <= 1) {\n        this._sliding = false;\n        this.currentIndex = 0;\n        return\n      }\n\n      // clear autoPlay timer (and restart after updated hook).\n      this._startAutoPlay();\n\n      /**\n       * clean nodes. replace current node with non-cloned node.\n       * set current index to the new index.\n       */\n      var shows = this._showNodes;\n      for (var i = this._showStartIdx; i <= this._showEndIdx; i++) {\n        shows[i]._inShow = false;\n      }\n      for (var i$1 = -1; i$1 <= 1; i$1++) {\n        var node = shows[i$1];\n        if (!node._isClone) {\n          node._inShow = true;\n        }\n        else {\n          this$1._replaceClone(node, i$1);\n        }\n      }\n\n      this._clearNodes(this._showStartIdx, -2);\n      this._showStartIdx = -1;\n      this._clearNodes(2, this._showEndIdx);\n      this._showEndIdx = 1;\n      this._sliding = false;\n\n      // set current index to the new index.\n      this.currentIndex = newIndex;\n      this._preIndex = newIndex;\n    },\n\n    /**\n     * according to the attrs: neighborScale, neighborAlpha, neighborSpace.\n     * 1. apply the main cell transform effects.\n     * 2. set the previous cell and the next cell's positon, scale and alpha.\n     * 3. set other cells' scale and alpha.\n     */\n    _setNeighbors: function _setNeighbors () {\n      var this$1 = this;\n\n      for (var i = this._showStartIdx; i <= this._showEndIdx; i++) {\n        var elm = this$1._showNodes[i].firstElementChild;\n        elm.style.webkitTransition = \"all \" + (NEIGHBOR_SCALE_TIME / 1000) + \"s ease\";\n        elm.style.mozTransition = \"all \" + (NEIGHBOR_SCALE_TIME / 1000) + \"s ease\";\n        elm.style.transition = \"all \" + (NEIGHBOR_SCALE_TIME / 1000) + \"s ease\";\n        var transObj = {\n          scale: (\"scale(\" + (i === 0 ? this$1.currentItemScale : this$1.neighborScale) + \")\")\n        };\n        var translateX = (void 0);\n        if (!this$1._neighborWidth) {\n          this$1._neighborWidth = parseFloat(elm.style.width) || elm.getBoundingClientRect().width;\n        }\n        // calculate position offsets according to neighbor scales.\n        if (Math.abs(i) === 1) {\n          var dist = ((this$1._wrapperWidth - this$1._neighborWidth * this$1.neighborScale) / 2\n            + this$1.neighborSpace * weex.config.env.scale) / this$1.neighborScale;\n          translateX = -i * dist;\n        }\n        else {\n          // clear position offsets.\n          translateX = 0;\n        }\n        transObj.translate = \"translate3d(\" + translateX + \"px, 0px, 0px)\";\n        weex.utils.addTransform(elm, transObj);\n        elm.style.opacity = i === 0 ? MAIN_SLIDE_OPACITY : this$1.neighborAlpha;\n      }\n    },\n\n    _next: function _next () {\n      var next = this.currentIndex + 1;\n      if (this.frameCount <= 1) {\n        next--;\n      }\n      this._slideTo(next);\n    },\n\n    _prev: function _prev () {\n      var prev = this.currentIndex - 1;\n      if (this.frameCount <= 1) {\n        prev++;\n      }\n      this._slideTo(prev);\n    },\n\n    _handleTouchStart: function _handleTouchStart (event) {\n      var touch = event.changedTouches[0];\n      this._stopAutoPlay();\n      var inner = this.$refs.inner;\n      this._touchParams = {\n        originalTransform: inner.style.webkitTransform\n          || inner.style.mozTransform\n          || inner.style.transform,\n        startTouchEvent: touch,\n        startX: touch.pageX,\n        startY: touch.pageY,\n        timeStamp: event.timeStamp\n      };\n    },\n\n    _handleTouchMove: function _handleTouchMove (event) {\n      var tp = this._touchParams;\n      if (!tp) { return }\n      if (this._sliding) {\n        return\n      }\n      var ref = this._touchParams;\n      var startX = ref.startX;\n      var startY = ref.startY;\n      var touch = event.changedTouches[0];\n      var offsetX = touch.pageX - startX;\n      var offsetY = touch.pageY - startY;\n      tp.offsetX = offsetX;\n      tp.offsetY = offsetY;\n      var isV = tp.isVertical;\n      if (typeof isV === 'undefined') {\n        isV = tp.isVertical = Math.abs(offsetX) < Math.abs(offsetY);\n        if (!isV) {\n          this._emitScrollEvent('scrollstart');\n        }\n      }\n      // vertical scroll. just ignore it.\n      if (isV) {\n        return\n      }\n      // horizontal scroll. trigger scroll event.\n      event.preventDefault();\n      var inner = this.$refs.inner;\n      if (inner && offsetX) {\n        if (!this._nodesOffsetCleared) {\n          this._nodesOffsetCleared = true;\n          this._clearNodesOffset();\n        }\n        this._emitScrollEvent('scroll', {\n          offsetXRatio: offsetX / this._wrapperWidth\n        });\n        inner.style.webkitTransform = \"translate3d(\" + (this.innerOffset + offsetX) + \"px, 0, 0)\";\n        inner.style.mozTransform = \"translate3d(\" + (this.innerOffset + offsetX) + \"px, 0, 0)\";\n        inner.style.transform = \"translate3d(\" + (this.innerOffset + offsetX) + \"px, 0, 0)\";\n      }\n    },\n\n    _handleTouchEnd: function _handleTouchEnd (event) {\n      this._startAutoPlay();\n      var tp = this._touchParams;\n      if (!tp) { return }\n      var isV = tp.isVertical;\n      if (typeof isV === 'undefined') {\n        return\n      }\n      var inner = this.$refs.inner;\n      var offsetX = tp.offsetX;\n      if (inner) {\n        this._nodesOffsetCleared = false;\n        // TODO: test the velocity if it's less than 0.2.\n        var reset = Math.abs(offsetX / this._wrapperWidth) < 0.2;\n        var direction = offsetX > 0 ? 1 : -1;\n        var newIndex = reset ? this.currentIndex : (this.currentIndex - direction);\n        this._slideTo(newIndex, true);\n      }\n      delete this._touchParams;\n    },\n\n    _handleTouchCancel: function _handleTouchCancel (event) {\n      return this._handleTouchEnd(event)\n    },\n\n    _emitScrollEvent: function _emitScrollEvent (type, data) {\n      if ( data === void 0 ) data = {};\n\n      this.$emit(type, weex.utils.createEvent(this.$el, type, data));\n    },\n\n    _throttleEmitScroll: function _throttleEmitScroll (offset, callback) {\n      var this$1 = this;\n\n      var i = 0;\n      var throttleTime = THROTTLE_SCROLL_TIME;\n      var cnt = parseInt(TRANSITION_TIME / throttleTime) - 1;\n      var sign = offset > 0 ? 1 : -1;\n      var r = Math.abs(offset / this._wrapperWidth);\n      var throttledScroll = function () {\n        if (++i > cnt) {\n          return callback && callback.call(this$1)\n        }\n        var ratio = this$1._step === 0\n          ? sign * r * (1 - i / cnt)\n          : sign * (r + (1 - r) * i / cnt);\n        this$1._emitScrollEvent('scroll', {\n          offsetXRatio: ratio\n        });\n        setTimeout(throttledScroll, THROTTLE_SCROLL_TIME);\n      };\n      throttledScroll();\n    }\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// import { validateStyles } from '../../validator'\n// import indicator from './indicator'\nvar slider$1 = {\n  mixins: [slideMixin],\n  props: {\n    index: {\n      type: [String, Number],\n      default: 0\n    },\n    'auto-play': {\n      type: [String, Boolean],\n      default: false\n    },\n    interval: {\n      type: [String, Number],\n      default: 3000\n    },\n    infinite: {\n      type: [String, Boolean],\n      default: true\n    }\n  },\n\n  watch: {\n    index: function index () {\n      this.currentIndex = this._normalizeIndex(this.index);\n    }\n  },\n\n  data: function data () {\n    return {\n      frameCount: 0,\n      currentIndex: this.index\n    }\n  },\n\n  beforeCreate: function beforeCreate () {\n    this.weexType = 'slider';\n  },\n\n  render: function render (createElement) {\n    /* istanbul ignore next */\n    // if (\"production\" === 'development') {\n    //   validateStyles('slider', this.$vnode.data && this.$vnode.data.staticStyle)\n    // }\n    return this._renderSlides(createElement)\n  }\n};\n\nvar slider$2 = {\n  init: function init (weex) {\n    weex.registerComponent('slider', slider$1);\n    weex.registerComponent('cycleslider', slider$1);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar DEFAULT_NEIGHBOR_SPACE = 20;\nvar DEFAULT_NEIGHBOR_ALPHA = 0.6;\nvar DEFAULT_NEIGHBOR_SCALE = 0.8;\nvar DEFAULT_CURRENT_ITEM_SCALE = 0.9;\n\nvar sliderNeighbor = {\n  mixins: [slideMixin],\n  props: {\n    index: {\n      type: [String, Number],\n      default: 0\n    },\n    autoPlay: {\n      type: [String, Boolean],\n      default: false\n    },\n    interval: {\n      type: [String, Number],\n      default: 3000\n    },\n    infinite: {\n      type: [String, Boolean],\n      default: true\n    },\n    neighborSpace: {\n      type: [String, Number],\n      validator: function (val) {\n        val = parseFloat(val);\n        return !isNaN(val) && val > 0\n      },\n      default: DEFAULT_NEIGHBOR_SPACE\n    },\n    neighborAlpha: {\n      type: [String, Number],\n      validator: function (val) {\n        val = parseFloat(val);\n        return !isNaN(val) && val >= 0 && val <= 1\n      },\n      default: DEFAULT_NEIGHBOR_ALPHA\n    },\n    neighborScale: {\n      type: [String, Number],\n      validator: function (val) {\n        val = parseFloat(val);\n        return !isNaN(val) && val >= 0 && val <= 1\n      },\n      default: DEFAULT_NEIGHBOR_SCALE\n    },\n    currentItemScale: {\n      type: [String, Number],\n      validator: function (val) {\n        val = parseFloat(val);\n        return !isNaN(val) && val >= 0 && val <= 1\n      },\n      default: DEFAULT_CURRENT_ITEM_SCALE\n    }\n  },\n\n  watch: {\n    index: function index () {\n      this.currentIndex = this._normalizeIndex(this.index);\n    }\n  },\n\n  data: function data () {\n    return {\n      currentIndex: this.index,\n      frameCount: 0\n    }\n  },\n\n  beforeCreate: function beforeCreate () {\n    this.isNeighbor = true;\n    this.weexType = 'slider-neighbor';\n  },\n\n  render: function render (createElement) {\n    return this._renderSlides(createElement)\n  }\n};\n\nvar neighbor = {\n  init: function init (weex) {\n    weex.registerComponent('slider-neighbor', sliderNeighbor);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar _css$6 = \"\\n.weex-indicator {\\n  position: absolute;\\n  z-index: 10;\\n  -webkit-flex-direction: row;\\n  -ms-flex-direction: row;\\n  -moz-box-orient: horizontal;\\n  -moz-box-direction: normal;\\n  flex-direction: row;\\n  -webkit-box-orient: horizontal;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.weex-indicator-item {\\n  display: inline-block;\\n  position: relative;\\n  border-radius: 50%;\\n  width: 0.266667rem;\\n  height: 0.266667rem;\\n  background-color: #BBBBBB;\\n}\\n.weex-indicator-item + .weex-indicator-item {\\n  margin-left: 0.133333rem;\\n}\\n\\n.weex-indicator-item-active {\\n  background-color: blue;\\n}\\n\";\n\nvar extractComponentStyle$4;\nvar extend$3;\nvar extendKeys$1;\n\nfunction getIndicatorItemStyle (spec, isActive) {\n  var style = {};\n  style['background-color'] = spec[isActive ? 'itemSelectedColor' : 'itemColor'];\n  style['width'] = style['height'] = spec['itemSize'];\n  return style\n}\n\nfunction _render (context, h) {\n  var children = [];\n  var mergedStyle = extractComponentStyle$4(context);\n  var indicatorSpecStyle = extendKeys$1(\n      {},\n      mergedStyle,\n      ['itemColor', 'itemSelectedColor', 'itemSize']\n    );\n  for (var i = 0; i < Number(context.count); ++i) {\n    var classNames = ['weex-indicator-item weex-el'];\n    var isActive = false;\n    if (i === Number(context.active)) {\n      classNames.push('weex-indicator-item-active');\n      isActive = true;\n    }\n    children.push(h('mark', {\n      staticClass: classNames.join(' '),\n      staticStyle: getIndicatorItemStyle(indicatorSpecStyle, isActive)\n    }));\n  }\n  context.$nextTick(function () {\n    _reLayout(this, _getVirtualRect(this, mergedStyle), _getLtbr(this, mergedStyle));\n  });\n  return h('nav', {\n    attrs: { 'weex-type': 'indicator' },\n    staticClass: 'weex-indicator weex-ct',\n    staticStyle: mergedStyle\n  }, children)\n}\n\n/**\n * get indicator's virtual rect (width, height), which is the .\n */\nfunction _getVirtualRect (context, mergedStyle) {\n  var ct = context._getParentRect();\n  var rect = ['width', 'height'].reduce(function (pre, key) {\n    var msv = mergedStyle && mergedStyle[key];\n    pre[key] = msv ? parseFloat(msv) : ct[key];\n    return pre\n  }, {});\n  return rect\n}\n\n/**\n * get indicator's ltbr values (without units).\n */\nfunction _getLtbr (context, mergedStyle) {\n  return ['left', 'top', 'bottom', 'right'].reduce(function (pre, key) {\n    var msv = mergedStyle && mergedStyle[key];\n    if (!msv && msv !== 0) { return pre }\n    pre[key] = parseFloat(msv);\n    return pre\n  }, {})\n}\n\n/**\n * get indicator's rect (width, height).\n */\nfunction _getIndicatorRect (el) {\n  var width, height;\n  if (el.children.length === 1) {\n    var itemComputedStyle = window.getComputedStyle(el.children[0]);\n    width = parseFloat(itemComputedStyle.width);\n    height = parseFloat(itemComputedStyle.height);\n  }\n  else {\n    var itemComputedStyle$1 = window.getComputedStyle(el.children[1]);\n    var padding = parseFloat(itemComputedStyle$1.marginLeft);\n    height = parseFloat(itemComputedStyle$1.height);\n    width = el.children.length * (height + padding) - padding;\n  }\n  return { width: width, height: height }\n}\n\n/**\n * calculate and reset indicator's width, height, and ltbr.\n * @param {object} virtualRect. width and height of indicator's virtual rect box.\n * @param {object} ltbr. the user specified left, top, bottom, right pixels (without units).\n */\nfunction _reLayout (context, virtualRect, ltbr) {\n  var el = context.$el;\n  var rect = _getIndicatorRect(el);\n  var rectWithPx = Object.keys(rect).reduce(function (pre, key) {\n    pre[key] = rect[key] + 'px';\n    return pre\n  }, {});\n  extend$3(el.style, rectWithPx);\n  var axisMap = [{\n    dir: ltbr.left || ltbr.left === 0\n      ? 'left' : ltbr.right || ltbr.right === 0\n      ? 'right' : 'left',\n    scale: 'width'\n  }, {\n    dir: ltbr.top || ltbr.top === 0\n      ? 'top' : ltbr.bottom || ltbr.bottom === 0\n      ? 'bottom' : 'top',\n    scale: 'height'\n  }];\n  Object.keys(axisMap).forEach(function (key) {\n    var ref = axisMap[key];\n    var dir = ref.dir;\n    var scale = ref.scale;\n    el.style[dir] = (ltbr[dir] || 0) + virtualRect[scale] / 2 - rect[scale] / 2 + 'px';\n  });\n}\n\nvar indicator = {\n  name: 'weex-indicator',\n  methods: {\n    show: function () {\n      this.$el.style.visibility = 'visible';\n    }\n  },\n  data: function data () {\n    return {\n      count: 0,\n      active: 0\n    }\n  },\n  render: function render (createElement) {\n    var ref = this.$vnode.data.attrs || {};\n    var count = ref.count;\n    var active = ref.active;\n    this.count = count;\n    this.active = active;\n    if (!this.count) { return }\n    return _render(this, createElement)\n  },\n  _css: _css$6\n};\n\nvar indicator$1 = {\n  init: function init (weex) {\n    extractComponentStyle$4 = weex.extractComponentStyle;\n    extend$3 = weex.utils.extend;\n    extendKeys$1 = weex.utils.extendKeys;\n    weex.registerComponent('indicator', indicator);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar slider = {\n  init: function init (weex) {\n    weex.install(slider$2);\n    weex.install(neighbor);\n    weex.install(indicator$1);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * @fileOverview Impl of text component.\n *\n * Notes about the style 'height' and 'lines':\n * if the computed value of 'height' is bigger than 'lines', than the text will\n * be clipped according to the 'lines'. Otherwise, it'll be the 'height'.\n */\n\nvar _css$7 = \"\\n.weex-text {\\n  display: -webkit-box;\\n  display: -moz-box;\\n  -webkit-box-orient: vertical;\\n  -moz-box-orient: vertical;\\n  -moz-box-direction: normal;\\n  position: relative;\\n  white-space: pre-wrap;  /* not using 'pre': support auto line feed. */\\n  font-size: 0.426667rem;\\n  word-wrap: break-word;\\n  overflow: hidden; /* it'll be clipped if the height is not high enough. */\\n}\\n\";\n\n/**\n * Get text special styles (lines and text-overflow).\n */\nfunction getTextSpecStyle (ms) {\n  if ( ms === void 0 ) ms = {};\n\n  var lines = parseInt(ms.lines) || 0;\n  var overflow = ms['text-overflow'] || 'ellipsis';\n  if (lines > 0) {\n    return {\n      overflow: 'hidden',\n      'text-overflow': overflow,\n      '-webkit-line-clamp': lines\n    }\n  }\n}\n\nfunction getText (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var createEventMap = weex.createEventMap;\n  var ref = weex.utils;\n  var extend = ref.extend;\n\n  return {\n    name: 'weex-text',\n    props: {\n      lines: [Number, String],\n      value: [String]\n    },\n\n    render: function render (createElement) {\n      var style = extractComponentStyle(this);\n      var textSpecStyle = getTextSpecStyle(style);\n      return createElement('p', {\n        attrs: { 'weex-type': 'text' },\n        on: createEventMap(this),\n        staticClass: 'weex-text weex-el',\n        staticStyle: extend(style, textSpecStyle)\n      }, this.$slots.default || [this.value])\n    },\n    _css: _css$7\n  }\n}\n\nvar text = {\n  init: function init (weex) {\n    weex.registerComponent('text', getText(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar _css$8 = \"\\n.weex-textarea {\\n  font-size: 0.426667rem\\n}\\n.weex-textarea:focus {\\n  outline: none;\\n}\\n\";\n\nfunction getTextarea (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var createEventMap = weex.createEventMap;\n  var ref = weex.mixins;\n  var inputCommon = ref.inputCommon;\n  var ref$1 = weex.utils;\n  var extend = ref$1.extend;\n  var mapFormEvents = ref$1.mapFormEvents;\n\n  return {\n    name: 'weex-textarea',\n    mixins: [inputCommon],\n    props: {\n      value: String,\n      placeholder: String,\n      disabled: {\n        type: [String, Boolean],\n        default: false\n      },\n      autofocus: {\n        type: [String, Boolean],\n        default: false\n      },\n      rows: {\n        type: [String, Number],\n        default: 2\n      },\n      returnKeyType: String\n    },\n\n    render: function render (createElement) {\n      /* istanbul ignore next */\n      // if (\"production\" === 'development') {\n      //   validateStyles('textarea', this.$vnode.data && this.$vnode.data.staticStyle)\n      // }\n      var events = extend(createEventMap(this), mapFormEvents(this));\n      return createElement('html:textarea', {\n        attrs: {\n          'weex-type': 'textarea',\n          value: this.value,\n          disabled: (this.disabled !== 'false' && this.disabled !== false),\n          autofocus: (this.autofocus !== 'false' && this.autofocus !== false),\n          placeholder: this.placeholder,\n          rows: this.rows,\n          'return-key-type': this.returnKeyType\n        },\n        domProps: {\n          value: this.value\n        },\n        on: this.createKeyboardEvent(events),\n        staticClass: 'weex-textarea weex-el',\n        staticStyle: extractComponentStyle(this)\n      })\n    },\n    _css: _css$8\n  }\n}\n\nvar textarea = {\n  init: function init (weex) {\n    weex.registerComponent('textarea', getTextarea(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nfunction getVideo (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var createEventMap = weex.createEventMap;\n\n  return {\n    name: 'weex-video',\n    props: {\n      src: String,\n      playStatus: {\n        type: String,\n        default: 'pause',\n        validator: function validator (value) {\n          return ['play', 'pause'].indexOf(value) !== -1\n        }\n      },\n      autoplay: {\n        type: [String, Boolean],\n        default: false\n      },\n      autoPlay: {\n        type: [String, Boolean],\n        default: false\n      },\n      playsinline: {\n        type: [String, Boolean],\n        default: true\n      },\n      controls: {\n        type: [String, Boolean],\n        default: false\n      }\n    },\n\n    render: function render (createElement) {\n      if (this.playStatus === 'play') {\n        this.$nextTick(function () {\n          this.$el && this.$el.play();\n        });\n      }\n      else if (this.playStatus === 'pause') {\n        this.$nextTick(function () {\n          this.$el && this.$el.pause();\n        });\n      }\n\n      return createElement('html:video', {\n        attrs: {\n          'weex-type': 'video',\n          autoplay: ((this.autoplay !== 'false' && this.autoplay !== false)\n            || (this.autoPlay !== 'false' && this.autoPlay !== false)),\n          'webkit-playsinline': this.playsinline,\n          controls: this.controls,\n          src: this.src\n        },\n        on: createEventMap(this, ['start', 'pause', 'finish', 'fail']),\n        staticClass: 'weex-video weex-el',\n        staticStyle: extractComponentStyle(this)\n      })\n    }\n  }\n}\n\nvar video = {\n  init: function init (weex) {\n    weex.registerComponent('video', getVideo(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar _css$9 = \"\\n.weex-web {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  border: none;\\n  box-sizing: border-box;\\n}\\n\";\n\nfunction getWeb (weex) {\n  var extractComponentStyle = weex.extractComponentStyle;\n  var createEventMap = weex.createEventMap;\n  var ref = weex.utils;\n  var createEvent = ref.createEvent;\n\n  return {\n    name: 'weex-web',\n    props: {\n      src: String\n    },\n    methods: {\n      // TODO: check cross-origin\n      goBack: function goBack () {\n        if (this.$el) {\n          this.$el.contentWindow.history.back();\n        }\n      },\n      goForward: function goForward () {\n        if (this.$el) {\n          this.$el.contentWindow.history.forward();\n        }\n      },\n      reload: function reload () {\n        if (this.$el) {\n          this.$el.contentWindow.history.reload();\n        }\n      }\n    },\n\n    mounted: function mounted () {\n      var this$1 = this;\n\n      if (this.$el) {\n        this.$emit('pagestart', createEvent(this.$el, 'pagestart', { url: this.src }));\n        this.$el.addEventListener('load', function (event) {\n          this$1.$emit('pagefinish', createEvent(this$1.$el, 'pagefinish', { url: this$1.src }));\n        });\n      }\n    },\n\n    render: function render (createElement) {\n      /* istanbul ignore next */\n      // if (\"production\" === 'development') {\n      //   validateStyles('web', this.$vnode.data && this.$vnode.data.staticStyle)\n      // }\n      return createElement('iframe', {\n        attrs: {\n          'weex-type': 'web',\n          src: this.src\n        },\n        on: createEventMap(this, ['error']),\n        staticClass: 'weex-web weex-el',\n        staticStyle: extractComponentStyle(this)\n      })\n    },\n    _css: _css$9\n  }\n}\n\nvar web = {\n  init: function init (weex) {\n    weex.registerComponent('web', getWeb(weex));\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar components = [\n  a,\n  div,\n  image$1,\n  input,\n  _switch,\n  scrollable,\n  slider,\n  text,\n  textarea,\n  video,\n  web\n];\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar supportGeolocation = 'geolocation' in navigator;\nvar errorMsg = \"[h5-render]: browser doesn't support geolocation.\";\n\nvar geolocation = {\n  // options:\n  //   - enableHighAccuracy optional, value is true or false, false by default.\n  //   - timeout [none-native] optional, value is a number (milliseconds), default vaule is FINFINITY.\n  //   - maximumAge [none-native] optional, value is a number (milliseconds), default value is 0.\n  getCurrentPosition: function getCurrentPosition (successCbId, errorCbId, options) {\n    var this$1 = this;\n\n    var successCb = function (pos) { return this$1.sender.performCallback(successCbId, pos); };\n    var errorCb = function (err) { return this$1.sender.performCallback(errorCbId, err); };\n    if (supportGeolocation) {\n      navigator.geolocation.getCurrentPosition(successCb, errorCb, options);\n    }\n    else {\n      console.warn(errorMsg);\n      errorCb(new Error(errorMsg));\n    }\n  },\n\n  // options: the same with `getCurrentPosition`.\n  watchPosition: function watchPosition (successCbId, errorCbId, options) {\n    var this$1 = this;\n\n    var successCb = function (pos) { return this$1.sender.performCallback(successCbId, pos, true); };\n    var errorCb = function (err) { return this$1.sender.performCallback(errorCbId, err); };\n    if (supportGeolocation) {\n      var id = navigator.geolocation.watchPosition(function (pos) {\n        pos.watchId = id;\n        successCb(pos);\n      }, errorCb, options);\n    }\n    else {\n      console.warn(errorMsg);\n      errorCb(new Error(errorMsg));\n    }\n  },\n\n  clearWatch: function clearWatch (watchId) {\n    if (supportGeolocation) {\n      navigator.geolocation.clearWatch(watchId);\n    }\n    else {\n      console.warn(errorMsg);\n    }\n  }\n};\n\nvar meta = {\n  geolocation: [{\n    name: 'getCurrentPosition',\n    args: ['function', 'function', 'object']\n  }, {\n    name: 'watchPosition',\n    args: ['function', 'function', 'object']\n  }, {\n    name: 'clearWatch',\n    args: ['string']\n  }]\n};\n\nvar geolocation$1 = {\n  init: function init (Weex) {\n    Weex.registerApiModule('geolocation', geolocation, meta);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* global localStorage */\n\nvar supportLocalStorage = false;\ntry {\n  supportLocalStorage = typeof localStorage !== 'undefined';\n}\ncatch (err) {\n  // not support.\n}\n\nvar SUCCESS = 'success';\nvar FAILED = 'failed';\nvar INVALID_PARAM = 'invalid_param';\nvar UNDEFINED = 'undefined';\n\nfunction callFail (sender, callbackId, errorMsg) {\n  sender.performCallback(callbackId, {\n    result: FAILED,\n    data: errorMsg || UNDEFINED\n  });\n}\n\nfunction callNotSupportFail (sender, callbackId) {\n  sender.performCallback(callbackId, {\n    result: FAILED,\n    data: 'localStorage is disabled or not supported.'\n  });\n}\n\nvar storage = {\n\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   * @param {string} key\n   * @param {string} value not null nor undifined，but 0 works.\n   * @param {function} callbackId\n   */\n  setItem: function (key, value, callbackId) {\n    var sender = this.sender;\n    if (!supportLocalStorage) {\n      return callNotSupportFail(sender, callbackId)\n    }\n    if (!key || (!value && value !== 0)) {\n      sender.performCallback(callbackId, {\n        result: 'failed',\n        data: INVALID_PARAM\n      });\n      return\n    }\n    try {\n      localStorage.setItem(key, value);\n      sender.performCallback(callbackId, {\n        result: SUCCESS,\n        data: UNDEFINED\n      });\n    }\n    catch (e) {\n      // accept any exception thrown during a storage attempt as a quota error\n      callFail(sender, callbackId);\n    }\n  },\n\n  /**\n   * When passed a key name, will return that key's value.\n   * @param {string} key\n   * @param {function} callbackId\n   */\n  getItem: function (key, callbackId) {\n    var sender = this.sender;\n    if (!supportLocalStorage) {\n      return callNotSupportFail(sender, callbackId)\n    }\n    if (!key) {\n      sender.performCallback(callbackId, {\n        result: FAILED,\n        data: INVALID_PARAM\n      });\n      return\n    }\n    try {\n      var val = localStorage.getItem(key);\n      sender.performCallback(callbackId, {\n        result: val ? SUCCESS : FAILED,\n        data: val || UNDEFINED\n      });\n    }\n    catch (e) {\n      // accept any exception thrown during a storage attempt as a quota error\n      callFail(sender, callbackId);\n    }\n  },\n\n  /**\n   *When passed a key name, will remove that key from the storage.\n   * @param {string} key\n   * @param {function} callbackId\n   */\n  removeItem: function (key, callbackId) {\n    var sender = this.sender;\n    if (!supportLocalStorage) {\n      return callNotSupportFail(sender, callbackId)\n    }\n    if (!key) {\n      sender.performCallback(callbackId, {\n        result: FAILED,\n        data: INVALID_PARAM\n      });\n      return\n    }\n    try {\n      localStorage.removeItem(key);\n      sender.performCallback(callbackId, {\n        result: SUCCESS,\n        data: UNDEFINED\n      });\n    }\n    catch (e) {\n      // accept any exception thrown during a storage attempt as a quota error\n      callFail(sender, callbackId);\n    }\n  },\n\n  /**\n   * Returns an integer representing the number of data items stored in the Storage object.\n   * @param {function} callbackId\n   */\n  length: function (callbackId) {\n    var sender = this.sender;\n    if (!supportLocalStorage) {\n      return callNotSupportFail(sender, callbackId)\n    }\n    try {\n      var len = localStorage.length;\n      sender.performCallback(callbackId, {\n        result: SUCCESS,\n        data: len\n      });\n    }\n    catch (e) {\n      // accept any exception thrown during a storage attempt as a quota error\n      callFail(sender, callbackId);\n    }\n  },\n\n  /**\n   * Returns an array that contains all keys stored in Storage object.\n   * @param {function} callbackId\n   */\n  getAllKeys: function (callbackId) {\n    var sender = this.sender;\n    if (!supportLocalStorage) {\n      return callNotSupportFail(sender, callbackId)\n    }\n    try {\n      var _arr = [];\n      for (var i = 0; i < localStorage.length; i++) {\n        _arr.push(localStorage.key(i));\n      }\n      sender.performCallback(callbackId, {\n        result: SUCCESS,\n        data: _arr\n      });\n    }\n    catch (e) {\n      // accept any exception thrown during a storage attempt as a quota error\n      callFail(sender, callbackId);\n    }\n  }\n};\n\nvar meta$1 = {\n  storage: [{\n    name: 'setItem',\n    args: ['string', 'string', 'function']\n  }, {\n    name: 'getItem',\n    args: ['string', 'function']\n  }, {\n    name: 'removeItem',\n    args: ['string', 'function']\n  }, {\n    name: 'length',\n    args: ['function']\n  }, {\n    name: 'getAllKeys',\n    args: ['function']\n  }]\n};\n\nvar storage$1 = {\n  init: function (Weex) {\n    Weex.registerApiModule('storage', storage, meta$1);\n  }\n};\n\n(typeof window === 'undefined') && (window = {ctrl: {}, lib: {}});!window.ctrl && (window.ctrl = {});!window.lib && (window.lib = {});!function(a,b){function c(a){var b={};Object.defineProperty(this,\"params\",{set:function(a){if(\"object\"==typeof a){for(var c in b){ delete b[c]; }for(var c in a){ b[c]=a[c]; }}},get:function(){return b},enumerable:!0}),Object.defineProperty(this,\"search\",{set:function(a){if(\"string\"==typeof a){0===a.indexOf(\"?\")&&(a=a.substr(1));var c=a.split(\"&\");for(var d in b){ delete b[d]; }for(var e=0;e<c.length;e++){var f=c[e].split(\"=\");if(void 0!==f[1]&&(f[1]=f[1].toString()),f[0]){ try{b[decodeURIComponent(f[0])]=decodeURIComponent(f[1]);}catch(g){b[f[0]]=f[1];} }}}},get:function(){var a=[];for(var c in b){ if(void 0!==b[c]){ if(\"\"!==b[c]){ try{a.push(encodeURIComponent(c)+\"=\"+encodeURIComponent(b[c]));}catch(d){a.push(c+\"=\"+b[c]);} }else { try{a.push(encodeURIComponent(c));}catch(d){a.push(c);} } } }return a.length?\"?\"+a.join(\"&\"):\"\"},enumerable:!0});var c;Object.defineProperty(this,\"hash\",{set:function(a){\"string\"==typeof a&&(a&&a.indexOf(\"#\")<0&&(a=\"#\"+a),c=a||\"\");},get:function(){return c},enumerable:!0}),this.set=function(a){a=a||\"\";var b;if(!(b=a.match(new RegExp(\"^([a-z0-9-]+:)?[/]{2}(?:([^@/:?]+)(?::([^@/:]+))?@)?([^:/?#]+)(?:[:]([0-9]+))?([/][^?#;]*)?(?:[?]([^#]*))?([#][^?]*)?$\",\"i\")))){ throw new Error(\"Wrong uri scheme.\"); }this.protocol=b[1]||(\"object\"==typeof location?location.protocol:\"\"),this.username=b[2]||\"\",this.password=b[3]||\"\",this.hostname=this.host=b[4],this.port=b[5]||\"\",this.pathname=b[6]||\"/\",this.search=b[7]||\"\",this.hash=b[8]||\"\",this.origin=this.protocol+\"//\"+this.hostname;},this.toString=function(){var a=this.protocol+\"//\";return this.username&&(a+=this.username,this.password&&(a+=\":\"+this.password),a+=\"@\"),a+=this.host,this.port&&\"80\"!==this.port&&(a+=\":\"+this.port),this.pathname&&(a+=this.pathname),this.search&&(a+=this.search),this.hash&&(a+=this.hash),a},a&&this.set(a.toString());}b.httpurl=function(a){return new c(a)};}(window,window.lib||(window.lib={}));\n\nvar index$5 = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty$1 = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject$2(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nvar index$7 = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar arguments$1 = arguments;\n\n\tvar from;\n\tvar to = toObject$2(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments$1[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty$1.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\nvar strictUriEncode = index$5;\nvar objectAssign = index$7;\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nvar extract = function (str) {\n\treturn str.split('?')[1] || '';\n};\n\nvar parse = function (str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^(\\?|#|&)/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeURIComponent(val);\n\n\t\tformatter(decodeURIComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n};\n\nvar stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort().map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nvar index$4 = {\n\textract: extract,\n\tparse: parse,\n\tstringify: stringify\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* global lib, XMLHttpRequest */\n/* deps: httpurl */\n\nvar utils$1;\n\nvar jsonpCnt = 0;\nvar ERROR_STATE = -1;\n\nfunction _jsonp (config, callback, progressCallback) {\n  var cbName = config.jsonpCallbackName || 'jsonp_' + (++jsonpCnt);\n  var url;\n\n  if (!config.url) {\n    console.error('[h5-render] config.url should be set in _jsonp for \\'fetch\\' API.');\n  }\n\n  global[cbName] = (function (cb) {\n    return function (response) {\n      callback({\n        status: 200,\n        ok: true,\n        statusText: 'OK',\n        data: response\n      });\n      delete global[cb];\n    }\n  })(cbName);\n\n  var script = document.createElement('script');\n  try {\n    url = lib.httpurl(config.url);\n  }\n  catch (err) {\n    console.error('[h5-render] invalid config.url in _jsonp for \\'fetch\\' API: '\n      + config.url);\n  }\n  url.params.callback = cbName;\n  script.type = 'text/javascript';\n  script.src = url.toString();\n  // script.onerror is not working on IE or safari.\n  // but they are not considered here.\n  script.onerror = (function (cb) {\n    return function (err) {\n      console.error('[h5-render] unexpected error in _jsonp for \\'fetch\\' API', err);\n      callback({\n        status: ERROR_STATE,\n        ok: false,\n        statusText: '',\n        data: ''\n      });\n      delete global[cb];\n    }\n  })(cbName);\n  var head = document.getElementsByTagName('head')[0];\n  head.insertBefore(script, null);\n}\n\nfunction _xhr (config, callback, progressCallback) {\n  var xhr = new XMLHttpRequest();\n  xhr.responseType = config.type;\n  xhr.open(config.method, config.url, true);\n\n  // cors cookie support\n  if (config.withCredentials === true) {\n    xhr.withCredentials = true;\n  }\n\n  var headers = config.headers || {};\n  for (var k in headers) {\n    xhr.setRequestHeader(k, headers[k]);\n  }\n\n  xhr.onload = function (res) {\n    callback({\n      status: xhr.status,\n      ok: xhr.status >= 200 && xhr.status < 300,\n      statusText: xhr.statusText,\n      data: xhr.response,\n      headers: xhr.getAllResponseHeaders().split('\\n')\n        .reduce(function (obj, headerStr) {\n          var headerArr = headerStr.match(/(.+): (.+)/);\n          if (headerArr) {\n            obj[headerArr[1]] = headerArr[2];\n          }\n          return obj\n        }, {})\n    });\n  };\n\n  if (progressCallback) {\n    xhr.onprogress = function (e) {\n      progressCallback({\n        readyState: xhr.readyState,\n        status: xhr.status,\n        length: e.loaded,\n        total: e.total,\n        statusText: xhr.statusText,\n        headers: xhr.getAllResponseHeaders().split('\\n')\n          .reduce(function (obj, headerStr) {\n            var headerArr = headerStr.match(/(.+): (.+)/);\n            if (headerArr) {\n              obj[headerArr[1]] = headerArr[2];\n            }\n            return obj\n          }, {})\n      });\n    };\n  }\n\n  xhr.onerror = function (err) {\n    console.error('[h5-render] unexpected error in _xhr for \\'fetch\\' API', err);\n    callback({\n      status: ERROR_STATE,\n      ok: false,\n      statusText: '',\n      data: ''\n    });\n  };\n\n  xhr.send(config.body || null);\n}\n\nvar stream = {\n\n  /**\n   * sendHttp\n   * @deprecated\n   * Note: This API is deprecated. Please use stream.fetch instead.\n   * send a http request through XHR.\n   * @param  {obj} params\n   *  - method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'PATCH',\n   *  - url: url requested\n   * @param  {string} callbackId\n   */\n  sendHttp: function (param, callbackId) {\n    if (typeof param === 'string') {\n      try {\n        param = JSON.parse(param);\n      }\n      catch (e) {\n        return\n      }\n    }\n    if (typeof param !== 'object' || !param.url) {\n      return console.error(\n        '[h5-render] invalid config or invalid config.url for sendHttp API')\n    }\n\n    var sender = this.sender;\n    var method = param.method || 'GET';\n    var xhr = new XMLHttpRequest();\n    xhr.open(method, param.url, true);\n    xhr.onload = function () {\n      sender.performCallback(callbackId, this.responseText);\n    };\n    xhr.onerror = function (error) {\n      return console.error('[h5-render] unexpected error in sendHttp API', error)\n      // sender.performCallback(\n      //   callbackId,\n      //   new Error('unexpected error in sendHttp API')\n      // )\n    };\n    xhr.send();\n  },\n\n  /**\n   * fetch\n   * use stream.fetch to request for a json file, a plain text file or\n   * a arraybuffer for a file stream. (You can use Blob and FileReader\n   * API implemented by most modern browsers to read a arraybuffer.)\n   * @param  {object} options config options\n   *   - method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'PATCH'\n   *   - headers {obj}\n   *   - url {string}\n   *   - mode {string} 'cors' | 'no-cors' | 'same-origin' | 'navigate'\n   *   - withCredentials {boolean}\n   *   - body\n   *   - type {string} 'json' | 'jsonp' | 'text'\n   * @param  {string} callbackId\n   * @param  {string} progressCallbackId\n   */\n  fetch: function (options, callbackId, progressCallbackId) {\n    var DEFAULT_METHOD = 'GET';\n    var DEFAULT_MODE = 'cors';\n    var DEFAULT_TYPE = 'text';\n\n    var methodOptions = ['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'PATCH'];\n    var modeOptions = ['cors', 'no-cors', 'same-origin', 'navigate'];\n    var typeOptions = ['text', 'json', 'jsonp', 'arraybuffer'];\n\n    // const fallback = false  // fallback from 'fetch' API to XHR.\n    var sender = this.sender;\n\n    var config = utils$1.extend({}, options);\n\n    // validate options.method\n    if (typeof config.method === 'undefined') {\n      config.method = DEFAULT_METHOD;\n      console.warn('[h5-render] options.method for \\'fetch\\' API has been set to '\n        + 'default value \\'' + config.method + '\\'');\n    }\n    else if (methodOptions.indexOf((config.method + '')\n        .toUpperCase()) === -1) {\n      return console.error('[h5-render] options.method \\''\n        + config.method\n        + '\\' for \\'fetch\\' API should be one of '\n        + methodOptions + '.')\n    }\n\n    // validate options.url\n    if (!config.url) {\n      return console.error('[h5-render] options.url should be set for \\'fetch\\' API.')\n    }\n\n    // validate body content for method 'GET'.\n    if (config.method.toUpperCase() === 'GET') {\n      var body = config.body;\n      if (utils$1.isPlainObject(body)) {\n        body = index$4.stringify(body);\n      }\n      var url = config.url;\n      var hashIdx = url.indexOf('#');\n      hashIdx <= -1 && (hashIdx = url.length);\n      var hash = url.substr(hashIdx);\n      if (hash && hash[0] === '#') {\n        hash = hash.substr(1);\n      }\n      url = url.substring(0, hashIdx);\n      if (body) {\n        url += (config.url.indexOf('?') <= -1 ? '?' : '&') + body;\n      }\n      url += '#' + hash;\n      config.url = url;\n    }\n\n    // validate options.mode\n    if (typeof config.mode === 'undefined') {\n      config.mode = DEFAULT_MODE;\n    }\n    else if (modeOptions.indexOf((config.mode + '').toLowerCase()) === -1) {\n      return console.error('[h5-render] options.mode \\''\n        + config.mode\n        + '\\' for \\'fetch\\' API should be one of '\n        + modeOptions + '.')\n    }\n\n    // validate options.type\n    if (typeof config.type === 'undefined') {\n      config.type = DEFAULT_TYPE;\n      console.warn('[h5-render] options.type for \\'fetch\\' API has been set to '\n        + 'default value \\'' + config.type + '\\'.');\n    }\n    else if (typeOptions.indexOf((config.type + '').toLowerCase()) === -1) {\n      return console.error('[h5-render] options.type \\''\n          + config.type\n          + '\\' for \\'fetch\\' API should be one of '\n          + typeOptions + '.')\n    }\n\n    // validate options.headers\n    config.headers = config.headers || {};\n    if (!utils$1.isPlainObject(config.headers)) {\n      return console.error('[h5-render] options.headers should be a plain object')\n    }\n\n    // validate options.timeout\n    config.timeout = parseInt(config.timeout, 10) || 2500;\n\n    var _callArgs = [config, function (res) {\n      sender.performCallback(callbackId, res);\n    }];\n    if (progressCallbackId) {\n      _callArgs.push(function (res) {\n        // Set 'keepAlive' to true for sending continuous callbacks\n        sender.performCallback(progressCallbackId, res, true);\n      });\n    }\n\n    if (config.type === 'jsonp') {\n      _jsonp.apply(this, _callArgs);\n    }\n    else {\n      _xhr.apply(this, _callArgs);\n    }\n  }\n\n};\n\nvar meta$2 = {\n  stream: [{\n    name: 'sendHttp',\n    args: ['object', 'function']\n  }, {\n    name: 'fetch',\n    args: ['object', 'function', 'function']\n  }]\n};\n\nvar stream$1 = {\n  init: function (Weex) {\n    utils$1 = Weex.utils;\n    Weex.registerApiModule('stream', stream, meta$2);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n\nAUCTION:\ntaskQueue\nClipboard.setString()  NOW not works, facing to user-act lose of taskQueue.\n\nworks in Chrome Firefox Opera. but not in Safari.\n@see https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand#Browser_compatibility\n\nClipboard.getString() unimplemented. There is no easy way to do paste from clipboard to js variable.\n\nSo look out your app behavior, when downgrade to html5 render.\nAny idea is welcome.\n**/\n\nvar WEEX_CLIPBOARD_ID = '__weex_clipboard_id__';\n\nvar clipboard = {\n\n  getString: function (callbackId) {\n    // not supported in html5\n    console.log('clipboard.getString() is not supported now.');\n  },\n\n  setString: function (text) {\n    // not support safari\n    if (typeof text === 'string' && text !== '' && document.execCommand) {\n      var tempInput = element();\n      tempInput.value = text;\n\n      tempInput.select();\n      document.execCommand('copy');\n      // var out = document.execCommand('copy');\n      // console.log(\"execCommand out is \" + out);\n      tempInput.value = '';\n      tempInput.blur();\n    }\n    else {\n      console.log('only support string input now');\n    }\n  }\n\n};\n\nfunction element () {\n  var tempInput = document.getElementById(WEEX_CLIPBOARD_ID);\n  if (!tempInput) {\n    tempInput = document.createElement('input');\n    tempInput.setAttribute('id', WEEX_CLIPBOARD_ID);\n    tempInput.style.cssText = 'height:1px;width:1px;border:none;';\n    // tempInput.style.cssText = \"height:40px;width:300px;border:solid;\"\n    document.body.appendChild(tempInput);\n  }\n  return tempInput\n}\n\nvar meta$3 = {\n  clipboard: [{\n    name: 'getString',\n    args: ['function']\n  }, {\n    name: 'setString',\n    args: ['string']\n  }]\n};\n\nvar clipboard$1 = {\n  init: function (Weex) {\n    Weex.registerApiModule('clipboard', clipboard, meta$3);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar event$1 = {\n  /**\n   * openUrl\n   * @param  {string} url\n   */\n  openURL: function (url) {\n    location.href = url;\n  }\n\n};\n\nvar meta$4 = {\n  event: [{\n    name: 'openURL',\n    args: ['string']\n  }]\n};\n\nvar eventModule = {\n  init: function (Weex) {\n    Weex.registerApiModule('event', event$1, meta$4);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar utils$2 = {};\nvar endEvent;\nvar styleName;\n\nvar EVENT_NAME_MAP = {\n  transition: 'transitionend',\n  WebkitTransition: 'webkitTransitionEnd',\n  MozTransition: 'mozTransitionEnd',\n  OTransition: 'oTransitionEnd',\n  msTransition: 'MSTransitionEnd'\n};\n\nfunction detectEvents () {\n  var testEl = document.createElement('div');\n  var style = testEl.style;\n  for (var name in EVENT_NAME_MAP) {\n    if (name in style) {\n      endEvent = EVENT_NAME_MAP[name];\n      styleName = name;\n      break\n    }\n  }\n}\n\ndetectEvents();\n\nfunction transitionOnce (vnode, config, callback) {\n  var nextFrame = utils$2.nextFrame;\n  var toCSSText = utils$2.toCSSText;\n  var autoPrefix = utils$2.autoPrefix;\n  var camelizeKeys = utils$2.camelizeKeys;\n  var normalizeStyle = utils$2.normalizeStyle;\n  var isArray = utils$2.isArray;\n\n  if (isArray(vnode)) {\n    vnode = vnode[0];\n  }\n\n  var duration = config.duration || 0; // ms\n  var timing = config.timingFunction || 'linear';\n  var delay = config.delay || 0;  // ms\n\n  // TODO: parse transition properties\n  var transitionValue = \"all \" + duration + \"ms \" + timing + \" \" + delay + \"ms\";\n\n  var dom = vnode.$el;\n  // trigger image lazyloading by force.\n  dom && weex.utils.fireLazyload(dom, true);\n\n  var transitionEndHandler = function (event) {\n    event && event.stopPropagation();\n    if (endEvent) {\n      dom.removeEventListener(endEvent, transitionEndHandler);\n      dom.style[styleName] = '';\n    }\n    callback();\n  };\n  if (endEvent) {\n    dom.style[styleName] = transitionValue;\n    dom.addEventListener(endEvent, transitionEndHandler);\n  }\n  nextFrame(function () {\n    dom.style.cssText\n      += toCSSText(autoPrefix(normalizeStyle(camelizeKeys(config.styles))) || {});\n  });\n}\n\nvar animation = {\n  /**\n   * transition\n   * @param  {String} vnode\n   * @param  {Object} config\n   * @param  {String} callback\n   */\n  transition: function transition (vnode, config, callback) {\n    if (!config.styles) { return }\n    return transitionOnce(vnode, config, function () {\n      callback && callback();\n    })\n  }\n};\n\nvar animation$1 = {\n  init: function init (weex) {\n    var extendKeys = weex.utils.extendKeys;\n    extendKeys(utils$2, weex.utils, [\n      'nextFrame',\n      'toCSSText',\n      'autoPrefix',\n      'camelizeKeys',\n      'normalizeStyle',\n      'isArray'\n    ]);\n\n    weex.registerModule('animation', animation);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar utils$3 = {};\n\nfunction getParentScroller$1 (vnode) {\n  if (!vnode) { return null }\n  var vm = vnode.$el\n  ? vnode : vnode.elm\n  ? vnode.componentInstance || vnode.context : null;\n  if (!vm) { return null }\n  var type = vm.$el && vm.$el.getAttribute('weex-type');\n  if (config.scrollableTypes.indexOf(type) > -1) {\n    return vm\n  }\n  return getParentScroller$1(vm.$parent)\n}\n\nfunction now () {\n  var now = window.performance && window.performance.now\n  ? window.performance.now.bind(window.performance) : Date.now;\n  return now()\n}\n\nfunction scrollElement (dSuffix, position) {\n  if ((this === document.body) || (this === window)\n    && window.scrollTo) {\n    return window.scrollTo(0, position)\n  }\n  this[(\"scroll\" + dSuffix)] = position;\n}\n/**\n * self invoked function that, given a context, steps through scrolling\n * @method step\n * @param {Object} context\n */\nfunction step$1 (context) {\n  // call method again on next available frame\n  context.frame = window.requestAnimationFrame(step$1.bind(window, context));\n  var time = now();\n  var elapsed = (time - context.startTime) / 468;\n  // avoid elapsed times higher than one\n  elapsed = elapsed > 1 ? 1 : elapsed;\n  // apply easing to elapsed time\n  var value = ease(elapsed);\n  var currentPosition = context.startPosition + (context.position - context.startPosition) * value;\n  context.method.call(context.scrollable, context.dSuffix, currentPosition);\n  // return when end points have been reached\n  /**\n    * NOTE: should use ~~ to parse position number into integer. Otherwise\n    * this two float numbers maybe have a slicely little difference, which\n    * will cause this function never to stop.\n  */\n  if (~~currentPosition === ~~context.position) {\n    window.cancelAnimationFrame(context.frame);\n    return\n  }\n}\n/**\n * returns result of applying ease math function to a number\n * @method ease\n * @param {Number} k\n * @returns {Number}\n */\nfunction ease (k) {\n  return 0.5 * (1 - Math.cos(Math.PI * k))\n}\nvar dom = {\n  /**\n   * scrollToElement\n   * @param  {Vnode | VComponent} vnode\n   * @param  {Object} options {offset:Number}\n   *   ps: scroll-to has 'ease' and 'duration'(ms) as options.\n   */\n  scrollToElement: function (vnode, options) {\n    var isArray = utils$3.isArray;\n    if (isArray(vnode)) {\n      vnode = vnode[0];\n    }\n    var scroller = getParentScroller$1(vnode);\n    var scrollDirection = scroller && scroller.scrollDirection || 'vertical';\n    var isWindow = !scroller;\n    var ct = isWindow ? document.body : scroller.$el;\n    var el = vnode.$el || vnode.elm;\n    if (ct && el) {\n      // if it's a list, then the listVnode.scrollDirection is undefined. just\n      // assum it is the default value 'vertical'.\n      var dSuffix = ({\n        horizontal: 'Left',\n        vertical: 'Top'\n      })[scrollDirection];\n      var ctRect = ct.getBoundingClientRect();\n      var elRect = el.getBoundingClientRect();\n      /**\n        * if it's a waterfall, and you want to scroll to a header, then just\n        * scroll to the top.\n      */\n      if (scroller && scroller.weexType === 'waterfall' && scroller._headers && scroller._headers.indexOf(vnode.$vnode || vnode) > -1) {\n        // it's in waterfall. just scroll to the top.\n        elRect = ct.firstElementChild.getBoundingClientRect();\n      }\n      var dir = dSuffix.toLowerCase();\n      var offset = (isWindow ? 0 : ct[(\"scroll\" + dSuffix)]) + elRect[dir] - ctRect[dir];\n      if (options) {\n        offset += options.offset && options.offset * weex.config.env.scale || 0;\n        // offset *= weex.config.env.scale /* adapt offset to different screen scales. */\n      }\n      else {}\n      if (options && options.animated === false) {\n        return scrollElement.call(ct, dSuffix, offset)\n      }\n      step$1({\n        scrollable: ct,\n        startTime: now(),\n        frame: null,\n        startPosition: isWindow ? window.pageYOffset : ct[(\"scroll\" + dSuffix)],\n        position: offset,\n        method: scrollElement,\n        dSuffix: dSuffix\n      });\n    }\n  },\n  /**\n   * getComponentRect\n   * @param {String} vnode\n   * @param {Function} callback\n   */\n  getComponentRect: function (vnode, callback) {\n    var isArray = utils$3.isArray;\n    if (isArray(vnode)) {\n      vnode = vnode[0];\n    }\n    var scale = window.weex.config.env.scale;\n    var info = {\n      result: false\n    };\n    var rectKeys = ['width', 'height', 'top', 'bottom', 'left', 'right'];\n\n    function recalc (rect) {\n      var res = {};\n      rectKeys.forEach(function (key) {\n        if (rect[key]) {\n          res[key] = rect[key] / scale;\n        }\n      });\n      return res\n    }\n    if (vnode && vnode === 'viewport') {\n      info.result = true;\n      info.size = recalc({\n        width: document.documentElement.clientWidth,\n        height: document.documentElement.clientHeight,\n        top: 0,\n        left: 0,\n        right: document.documentElement.clientWidth,\n        bottom: document.documentElement.clientHeight\n      });\n      info.contentSize = recalc({\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      });\n    }\n    else if (vnode && vnode.$el) {\n      info.result = true;\n      info.size = recalc(vnode.$el.getBoundingClientRect());\n      if (vnode.$refs.inner) {\n        info.contentSize = recalc({\n          width: vnode.$refs.inner.offsetWidth,\n          height: vnode.$refs.inner.offsetHeight\n        });\n      }\n      else {\n        info.contentSize = recalc({\n          width: vnode.$el.offsetWidth,\n          height: vnode.$el.offsetHeight\n        });\n      }\n    }\n    var message = info.result ? info : {\n      result: false,\n      errMsg: 'Illegal parameter'\n    };\n    callback && callback(message);\n    return message\n  },\n  /**\n   * for adding fontFace\n   * @param {string} key fontFace\n   * @param {object} styles rules\n   */\n  addRule: function (key, styles) {\n    var camelToKebab = utils$3.camelToKebab;\n    var appendCss = utils$3.appendCss;\n    key = camelToKebab(key);\n    var stylesText = '';\n    for (var k in styles) {\n      if (styles.hasOwnProperty(k)) {\n        stylesText += camelToKebab(k) + ':' + styles[k] + ';';\n      }\n    }\n    var styleText = \"@\" + key + \"{\" + stylesText + \"}\";\n    appendCss(styleText, 'dom-added-rules');\n  }\n};\nvar dom$1 = {\n  init: function init (weex) {\n    var extendKeys = weex.utils.extendKeys;\n    extendKeys(utils$3, weex.utils, ['camelToKebab', 'appendCss', 'isArray']);\n    weex.registerModule('dom', dom);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * globalEvent API:\n * @doc http://weex.apache.org/cn/references/modules/globalevent.html\n */\n// track varies kinds of events and listeners.\nvar handlerTraker = {};\n\nvar globalEvent = {\n  /**\n   * addEventListener\n   * NOTE: one callback can only be bound to the same event once. Bind a callback twice doesn't\n   *  mean it will be called twice when the event fired once.\n   * @param {string} evt - the event name to add a listener on.\n   */\n  addEventListener: function addEventListener (evt, callback) {\n    if (!callback) {\n      return\n    }\n    var handlers = handlerTraker[evt];\n    if (!handlers) {\n      handlers = handlerTraker[evt] = [];\n    }\n    var len = handlers.length;\n    for (var i = 0; i < len; i++) {\n      if (handlers[i] === callback) {\n        // this callback is already bound. no need to bind it again.\n        return\n      }\n    }\n    handlers.push(callback);\n    document.addEventListener(evt, callback);\n  },\n\n  /**\n   * removeEventListener\n   * NOTE: remove all the event handlers for the specified event type.\n   * @param {string} evt - the event name to remove a listener from.\n   */\n  removeEventListener: function removeEventListener (evt) {\n    var handlers = handlerTraker[evt];\n    if (!handlers) {\n      // evt handlers has been already removed.\n      return\n    }\n    handlers.forEach(function (cb) { return document.removeEventListener(evt, cb); });\n    delete handlerTraker[evt];\n  }\n};\n\nvar globalEvent$1 = {\n  init: function init (weex) {\n    weex.registerModule('globalEvent', globalEvent);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar queue$1 = [];\nvar isProcessing = false;\nvar toastWin;\nvar TOAST_WIN_CLASS_NAME = 'weex-toast';\nvar TOAST_TRANSITION_DURATION = 0.4;\n\nvar DEFAULT_DURATION = 0.8;\n\nfunction showToastWindow (msg, callback) {\n  if (!toastWin) {\n    toastWin = document.createElement('div');\n    toastWin.classList.add(TOAST_WIN_CLASS_NAME);\n    toastWin.classList.add('hide');\n    document.body.appendChild(toastWin);\n  }\n  toastWin.textContent = msg;\n  setTimeout(function () {\n    toastWin.classList.remove('hide');\n    callback && callback();\n  }, 16);\n}\n\nfunction hideToastWindow (callback) {\n  if (!toastWin) {\n    return\n  }\n  toastWin.classList.add('hide');\n  setTimeout(function () {\n    callback && callback();\n  }, TOAST_TRANSITION_DURATION * 1000);\n}\n\nvar toast = {\n  push: function (msg, duration) {\n    queue$1.push({\n      msg: msg,\n      duration: duration || DEFAULT_DURATION\n    });\n    this.show();\n  },\n\n  show: function () {\n    var that = this;\n\n    // All messages had been toasted already, so remove the toast window,\n    if (!queue$1.length) {\n      toastWin && toastWin.parentNode.removeChild(toastWin);\n      toastWin = null;\n      return\n    }\n\n    // the previous toast is not ended yet.\n    if (isProcessing) {\n      return\n    }\n    isProcessing = true;\n\n    var toastInfo = queue$1.shift();\n    showToastWindow(toastInfo.msg, function () {\n      setTimeout(function () {\n        hideToastWindow(function () {\n          isProcessing = false;\n          that.show();\n        });\n      }, toastInfo.duration * 1000);\n    });\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// there will be only one instance of modal.\nvar MODAL_WRAP_CLASS = 'weex-modal-wrap';\nvar MODAL_NODE_CLASS = 'weex-modal-node';\n\nfunction Modal () {\n  this.wrap = document.querySelector(MODAL_WRAP_CLASS);\n  this.node = document.querySelector(MODAL_NODE_CLASS);\n  if (!this.wrap) {\n    this.createWrap();\n  }\n  if (!this.node) {\n    this.createNode();\n  }\n  this.clearNode();\n  this.createNodeContent();\n  this.bindEvents();\n}\n\nModal.prototype = {\n\n  show: function () {\n    this.wrap.style.display = 'block';\n    this.node.classList.remove('hide');\n  },\n\n  destroy: function () {\n    document.body.removeChild(this.wrap);\n    document.body.removeChild(this.node);\n    this.wrap = null;\n    this.node = null;\n  },\n\n  createWrap: function () {\n    this.wrap = document.createElement('div');\n    this.wrap.className = MODAL_WRAP_CLASS;\n    document.body.appendChild(this.wrap);\n  },\n\n  createNode: function () {\n    this.node = document.createElement('div');\n    this.node.classList.add(MODAL_NODE_CLASS, 'hide');\n    document.body.appendChild(this.node);\n  },\n\n  clearNode: function () {\n    this.node.innerHTML = '';\n  },\n\n  createNodeContent: function () {\n\n    // do nothing.\n    // child classes can override this method.\n  },\n\n  bindEvents: function () {\n    this.wrap.addEventListener('click', function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    });\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar CONTENT_CLASS = 'content';\nvar MSG_CLASS = 'content-msg';\nvar BUTTON_GROUP_CLASS = 'btn-group';\nvar BUTTON_CLASS = 'btn';\n\nfunction Alert (config) {\n  this.msg = config.message || '';\n  this.callback = config.callback;\n  this.okTitle = config.okTitle || 'OK';\n  Modal.call(this);\n  this.node.classList.add('weex-alert');\n}\n\nAlert.prototype = Object.create(Modal.prototype);\n\nAlert.prototype.createNodeContent = function () {\n  var content = document.createElement('div');\n  content.classList.add(CONTENT_CLASS);\n  this.node.appendChild(content);\n\n  var msg = document.createElement('div');\n  msg.classList.add(MSG_CLASS);\n  msg.appendChild(document.createTextNode(this.msg));\n  content.appendChild(msg);\n\n  var buttonGroup = document.createElement('div');\n  buttonGroup.classList.add(BUTTON_GROUP_CLASS);\n  this.node.appendChild(buttonGroup);\n  var button = document.createElement('div');\n  button.classList.add(BUTTON_CLASS, 'alert-ok');\n  button.appendChild(document.createTextNode(this.okTitle));\n  buttonGroup.appendChild(button);\n};\n\nAlert.prototype.bindEvents = function () {\n  Modal.prototype.bindEvents.call(this);\n  var button = this.node.querySelector('.' + BUTTON_CLASS);\n  button.addEventListener('click', function () {\n    this.destroy();\n    this.callback && this.callback();\n  }.bind(this));\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar CONTENT_CLASS$1 = 'content';\nvar MSG_CLASS$1 = 'content-msg';\nvar BUTTON_GROUP_CLASS$1 = 'btn-group';\nvar BUTTON_CLASS$1 = 'btn';\n\nfunction Confirm (config) {\n  this.msg = config.message || '';\n  this.callback = config.callback;\n  this.okTitle = config.okTitle || 'OK';\n  this.cancelTitle = config.cancelTitle || 'Cancel';\n  Modal.call(this);\n  this.node.classList.add('weex-confirm');\n}\n\nConfirm.prototype = Object.create(Modal.prototype);\n\nConfirm.prototype.createNodeContent = function () {\n  var content = document.createElement('div');\n  content.classList.add(CONTENT_CLASS$1);\n  this.node.appendChild(content);\n\n  var msg = document.createElement('div');\n  msg.classList.add(MSG_CLASS$1);\n  msg.appendChild(document.createTextNode(this.msg));\n  content.appendChild(msg);\n\n  var buttonGroup = document.createElement('div');\n  buttonGroup.classList.add(BUTTON_GROUP_CLASS$1);\n  this.node.appendChild(buttonGroup);\n  var btnOk = document.createElement('div');\n  btnOk.appendChild(document.createTextNode(this.okTitle));\n  btnOk.classList.add('btn-ok', BUTTON_CLASS$1);\n  var btnCancel = document.createElement('div');\n  btnCancel.appendChild(document.createTextNode(this.cancelTitle));\n  btnCancel.classList.add('btn-cancel', BUTTON_CLASS$1);\n  buttonGroup.appendChild(btnOk);\n  buttonGroup.appendChild(btnCancel);\n  this.node.appendChild(buttonGroup);\n};\n\nConfirm.prototype.bindEvents = function () {\n  Modal.prototype.bindEvents.call(this);\n  var btnOk = this.node.querySelector('.' + BUTTON_CLASS$1 + '.btn-ok');\n  var btnCancel = this.node.querySelector('.' + BUTTON_CLASS$1 + '.btn-cancel');\n  btnOk.addEventListener('click', function () {\n    this.destroy();\n    this.callback && this.callback(this.okTitle);\n  }.bind(this));\n  btnCancel.addEventListener('click', function () {\n    this.destroy();\n    this.callback && this.callback(this.cancelTitle);\n  }.bind(this));\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar CONTENT_CLASS$2 = 'content';\nvar MSG_CLASS$2 = 'content-msg';\nvar BUTTON_GROUP_CLASS$2 = 'btn-group';\nvar BUTTON_CLASS$2 = 'btn';\nvar INPUT_WRAP_CLASS = 'input-wrap';\nvar INPUT_CLASS = 'input';\n\nfunction Prompt (config) {\n  this.msg = config.message || '';\n  this.defaultMsg = config.default || '';\n  this.callback = config.callback;\n  this.okTitle = config.okTitle || 'OK';\n  this.cancelTitle = config.cancelTitle || 'Cancel';\n  Modal.call(this);\n  this.node.classList.add('weex-prompt');\n}\n\nPrompt.prototype = Object.create(Modal.prototype);\n\nPrompt.prototype.createNodeContent = function () {\n  var content = document.createElement('div');\n  content.classList.add(CONTENT_CLASS$2);\n  this.node.appendChild(content);\n\n  var msg = document.createElement('div');\n  msg.classList.add(MSG_CLASS$2);\n  msg.appendChild(document.createTextNode(this.msg));\n  content.appendChild(msg);\n\n  var inputWrap = document.createElement('div');\n  inputWrap.classList.add(INPUT_WRAP_CLASS);\n  content.appendChild(inputWrap);\n  var input = document.createElement('input');\n  input.classList.add(INPUT_CLASS);\n  input.type = 'text';\n  input.autofocus = true;\n  input.placeholder = this.defaultMsg;\n  inputWrap.appendChild(input);\n\n  var buttonGroup = document.createElement('div');\n  buttonGroup.classList.add(BUTTON_GROUP_CLASS$2);\n  var btnOk = document.createElement('div');\n  btnOk.appendChild(document.createTextNode(this.okTitle));\n  btnOk.classList.add('btn-ok', BUTTON_CLASS$2);\n  var btnCancel = document.createElement('div');\n  btnCancel.appendChild(document.createTextNode(this.cancelTitle));\n  btnCancel.classList.add('btn-cancel', BUTTON_CLASS$2);\n  buttonGroup.appendChild(btnOk);\n  buttonGroup.appendChild(btnCancel);\n  this.node.appendChild(buttonGroup);\n};\n\nPrompt.prototype.bindEvents = function () {\n  Modal.prototype.bindEvents.call(this);\n  var btnOk = this.node.querySelector('.' + BUTTON_CLASS$2 + '.btn-ok');\n  var btnCancel = this.node.querySelector('.' + BUTTON_CLASS$2 + '.btn-cancel');\n  var that = this;\n  btnOk.addEventListener('click', function () {\n    var val = document.querySelector('input').value;\n    this.destroy();\n    this.callback && this.callback({\n      result: that.okTitle,\n      data: val\n    });\n  }.bind(this));\n  btnCancel.addEventListener('click', function () {\n    var val = document.querySelector('input').value;\n    this.destroy();\n    this.callback && this.callback({\n      result: that.cancelTitle,\n      data: val\n    });\n  }.bind(this));\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar _css$10 = \"\\n.weex-toast {\\n  font-size: 0.426667rem;\\n  line-height: 0.426667rem;\\n  position: fixed;\\n  z-index: 1999999999;\\n  box-sizing: border-box;\\n  max-width: 80%;\\n  bottom: 50%;\\n  left: 50%;\\n  padding: 0.213333rem;\\n  background-color: #000;\\n  color: #fff;\\n  text-align: center;\\n  opacity: 0.7;\\n  -webkit-transition: all 0.4s ease-in-out;\\n  -moz-transition: all 0.4s ease-in-out;\\n  -ms-transition: all 0.4s ease-in-out;\\n  transition: all 0.4s ease-in-out;\\n  border-radius: 0.066667rem;\\n  -webkit-transform: translateX(-50%);\\n  -moz-transform: translateX(-50%);\\n  -ms-transform: translateX(-50%);\\n  transform: translateX(-50%);\\n}\\n\\n.weex-toast.hide {\\n  opacity: 0;\\n}\\n\\n.weex-alert .weex-alert-ok {\\n  width: 100%;\\n}\\n\\n.weex-confirm .btn-group .btn {\\n  float: left;\\n  width: 50%;\\n}\\n\\n.weex-confirm .btn-group .btn.btn-ok {\\n  border-right: 0.013333rem solid #ddd;\\n}\\n\\n.weex-modal-wrap {\\n  display: none;\\n  position: fixed;\\n  z-index: 999999999;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: #000;\\n  opacity: 0.5;\\n}\\n\\n.weex-modal-node {\\n  position: fixed;\\n  z-index: 9999999999;\\n  top: 50%;\\n  left: 50%;\\n  width: 6.666667rem;\\n  min-height: 2.666667rem;\\n  border-radius: 0.066667rem;\\n  -webkit-transform: translate(-50%, -50%);\\n  -moz-transform: translate(-50%, -50%);\\n  -ms-transform: translate(-50%, -50%);\\n  transform: translate(-50%, -50%);\\n  background-color: #fff;\\n}\\n\\n.weex-modal-node.hide {\\n  display: none;\\n}\\n\\n.weex-modal-node .content {\\n  display: -webkit-box;\\n  display: -webkit-flex;\\n  display: -moz-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-flex-direction: column;\\n  -moz-box-orient: vertical;\\n  -moz-box-direction: normal;\\n  -ms-flex-direction: column;\\n      flex-direction: column;\\n  -webkit-box-align: center;\\n  -webkit-align-items: center;\\n  -ms-flex-align: center;\\n  -moz-box-align: center;\\n  -ms-flex-align: center;\\n  align-items: center;\\n  -webkit-box-pack: center;\\n  -webkit-justify-content: center;\\n  -moz-box-pack: center;\\n  -ms-flex-pack: center;\\n  justify-content: center;\\n  width: 100%;\\n  min-height: 1.866667rem;\\n  box-sizing: border-box;\\n  font-size: 0.426667rem;\\n  line-height: 0.426667rem;\\n  padding: 0.213333rem;\\n  border-bottom: 0.013333rem solid #ddd;\\n}\\n\\n.weex-modal-node .btn-group {\\n  width: 100%;\\n  height: 0.8rem;\\n  font-size: 0.373333rem;\\n  text-align: center;\\n  margin: 0;\\n  padding: 0;\\n  border: none;\\n}\\n\\n.weex-modal-node .btn-group .btn {\\n  text-align: center;\\n}\\n\\n.weex-modal-node .btn-group .btn {\\n  box-sizing: border-box;\\n  height: 0.8rem;\\n  line-height: 0.8rem;\\n  margin: 0;\\n  padding: 0;\\n  border: none;\\n  background: none;\\n  text-align: center;\\n}\\n\\n.weex-prompt .input-wrap {\\n  box-sizing: border-box;\\n  width: 100%;\\n  margin-top: 0.133333rem;\\n  height: 0.96rem;\\n}\\n\\n.weex-prompt .input-wrap .input {\\n  box-sizing: border-box;\\n  width: 100%;\\n  height: 0.56rem;\\n  line-height: 0.56rem;\\n  font-size: 0.426667rem;\\n  border: 0.013333rem solid #999;\\n}\\n\\n.weex-prompt .btn-group .btn {\\n  float: left;\\n  width: 50%;\\n}\\n\\n.weex-prompt .btn-group .btn.btn-ok {\\n  border-right: 0.013333rem solid #ddd;\\n}\\n\";\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: rewrite the modal styles\nvar modal = {\n\n  // duration: default is 0.8 seconds.\n  toast: function (config) {\n    toast.push(config.message, config.duration);\n  },\n\n  // config:\n  //  - message: string\n  //  - okTitle: title of ok button\n  //  - callback\n  alert: function (config, callback) {\n    config.callback = function () {\n      callback && callback();\n    };\n    new Alert(config).show();\n  },\n\n  // config:\n  //  - message: string\n  //  - okTitle: title of ok button\n  //  - cancelTitle: title of cancel button\n  //  - callback\n  confirm: function (config, callback) {\n    config.callback = function (val) {\n      callback && callback(val);\n    };\n    new Confirm(config).show();\n  },\n\n  // config:\n  //  - message: string\n  //  - okTitle: title of ok button\n  //  - cancelTitle: title of cancel button\n  //  - callback\n  prompt: function (config, callback) {\n    config.callback = function (val) {\n      callback && callback(val);\n    };\n    new Prompt(config).show();\n  }\n};\n\nvar modal$1 = {\n  init: function (Weex) {\n    Weex.utils.appendCss(_css$10, 'weex-mud-modal');\n    Weex.registerModule('modal', modal);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Navigator module\n */\nvar navigatorModule = {\n  push: function (config, callback) {\n    window.location.href = config.url;\n    callback && callback();\n  },\n\n  pop: function (config, callback) {\n    window.history.back();\n    callback && callback();\n  }\n};\n\nvar navigatorModule$1 = {\n  init: function init (weex) {\n    weex.registerModule('navigator', navigatorModule);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Webview module\n */\nvar isArray$2;\n\nvar webview = {\n  goBack: function goBack (vnode) {\n    if (isArray$2(vnode)) {\n      vnode = vnode[0];\n    }\n    if (vnode && typeof vnode.goBack === 'function') {\n      vnode.goBack();\n    }\n  },\n  goForward: function goForward (vnode) {\n    if (isArray$2(vnode)) {\n      vnode = vnode[0];\n    }\n    if (vnode && typeof vnode.goForward === 'function') {\n      vnode.goForward();\n    }\n  },\n  reload: function reload (vnode) {\n    if (isArray$2(vnode)) {\n      vnode = vnode[0];\n    }\n    if (vnode && typeof vnode.reload === 'function') {\n      vnode.reload();\n    }\n  }\n};\n\nvar webview$1 = {\n  init: function init (weex) {\n    isArray$2 = weex.utils.isArray;\n    weex.registerModule('webview', webview);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * websocket module\n */\n/*global WebSocket*/\nvar websocket$1 = (function () {\n  var registerListeners = ['onopen', 'onmessage', 'onerror', 'onclose'];\n  var ws = {\n    INSTANCE: null,\n    WebSocket: function (url, protocol) {\n      if (!url) {\n        ws.INSTANCE = null;\n        return\n      }\n      if (!protocol) {\n        ws.INSTANCE = new WebSocket(url);\n      }\n      else {\n        ws.INSTANCE = new WebSocket(url, protocol);\n      }\n      return ws.INSTANCE\n    },\n    send: function (messages) {\n      ws.INSTANCE && ws.INSTANCE.send(messages);\n    },\n    close: function () {\n      ws.INSTANCE && ws.INSTANCE.close();\n    }\n  };\n  var loop = function ( i ) {\n    if (registerListeners.hasOwnProperty(i)) {\n      Object.defineProperty(ws, registerListeners[i], {\n        get: function () {\n          return ws.INSTANCE && ws.INSTANCE[registerListeners[i]]\n        },\n        set: function (fn) {\n          if (ws.INSTANCE) {\n            ws.INSTANCE[registerListeners[i]] = fn;\n          }\n        }\n      });\n    }\n  };\n\n  for (var i in registerListeners) loop( i );\n  return ws\n})();\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: rewrite the module meta\nvar websocket = {\n  init: function (Weex) {\n    Weex.registerModule('webSocket', websocket$1, { mountType: 'full' });\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar meta$5 = {\n  /**\n   * setViewport\n   * Changing viewport width at runtime is not supported. Please use weex-viewport meta\n   * tag to specify your viewport in your html file.\n   */\n  setViewport: function setViewport (options) {\n    console.warn(\"[vue-render] meta.setViewport doesn't works as expected in web platform.\"\n    + \" Please use <meta name=\\\"weex-viewport\\\" content=\\\"xxx\\\"> to specify your viewport width.\");\n  }\n};\n\nvar meta$6 = {\n  init: function init (weex) {\n    weex.registerModule('meta', meta$5);\n  }\n};\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// modules from render/browesr (legacy modules)\n\n// custom modules\nvar modules$1 = [\n  geolocation$1,\n  storage$1,\n  stream$1,\n  clipboard$1,\n  eventModule,\n  modal$1,\n  websocket,\n  animation$1,\n  dom$1,\n  globalEvent$1,\n  navigatorModule$1,\n  webview$1,\n  meta$6\n];\n\nvar preInit = weex.init;\n\nweex.init = function () {\n  preInit.apply(weex, arguments);\n  var plugins = components.concat(modules$1);\n\n  plugins.forEach(function (plugin) {\n    weex.install(plugin);\n  });\n};\n\nif (global.Vue) {\n  weex.init(global.Vue);\n}\n\nmodule.exports = weex;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 数据请求\nvar mm = __webpack_require__(0);\nmm.http = {\n    resetSession: function (callback) {\n        mm.build({\n            common: ['http', 'resetSession', {}, callback]\n        })\n    },\n    /**\n     拉取json数据\n     @param {String} url\n     @param {Object} param 请求参数\n     - method: 客户端请求均为post\n     - timeout: 超时时间，默认无超时时间\n     */\n    request: function (param, callback) {\n        param.method = 'post';\n\n        var is_encode;\n\n        if (mm.is_o_webview) {\n            is_encode = true;\n        } else if (mm.compare('7.0.9') >= 0 && mm.compare({ ios: '7.4.1', android: '7.7' }) < 0) {\n            is_encode = true;\n        }\n        if (is_encode) {\n            param.encode = 1;\n        }\n\n        var newCallback = function (info) {\n            if (is_encode) {\n                try {\n                    var codeInfo = window.atob(info);\n                    codeInfo = escape(codeInfo);  // atob鍚庯紝澶勭悊涓枃\n                    codeInfo = decodeURIComponent(codeInfo);\n                    info = JSON.parse(codeInfo);\n                } catch (err) {\n                }\n            } else {\n                if (typeof info == 'string' && mm.platform == 'android') {\n                    try {\n                        var codeInfo = decodeURIComponent(info);\n                        info = JSON.parse(codeInfo);\n                    } catch (err) {\n                    }\n                }\n                if (typeof info == 'string') {\n                    try {\n                        var codeInfo = info.replace(/\\\\/g, '\\\\\\\\')\n                            .replace(/\\t/g, '\\\\t')\n                            .replace(/\\n/g, '\\\\n')\n                            .replace(/\\f/g, '\\\\f')\n                            .replace(/\\r/g, '\\\\r')\n                            .replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, '');\n                        info = JSON.parse(codeInfo);\n                    } catch (err) {\n\n                    }\n                }\n            }\n\n\n            callback && callback.call(null, info);\n        }\n\n        mm.build({\n            common: ['http', 'request', param, newCallback]\n        })\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0BmZXMvbW8tYnJpZGdlL2xpYi9odHRwLmpzPzY5MWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8g5pWw5o2u6K+35rGCXG52YXIgbW0gPSByZXF1aXJlKCcuL2NvcmUuanMnKTtcbm1tLmh0dHAgPSB7XG4gICAgcmVzZXRTZXNzaW9uOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgbW0uYnVpbGQoe1xuICAgICAgICAgICAgY29tbW9uOiBbJ2h0dHAnLCAncmVzZXRTZXNzaW9uJywge30sIGNhbGxiYWNrXVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgLyoqXG4gICAgIOaLieWPlmpzb27mlbDmja5cbiAgICAgQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgICBAcGFyYW0ge09iamVjdH0gcGFyYW0g6K+35rGC5Y+C5pWwXG4gICAgIC0gbWV0aG9kOiDlrqLmiLfnq6/or7fmsYLlnYfkuLpwb3N0XG4gICAgIC0gdGltZW91dDog6LaF5pe25pe26Ze077yM6buY6K6k5peg6LaF5pe25pe26Ze0XG4gICAgICovXG4gICAgcmVxdWVzdDogZnVuY3Rpb24gKHBhcmFtLCBjYWxsYmFjaykge1xuICAgICAgICBwYXJhbS5tZXRob2QgPSAncG9zdCc7XG5cbiAgICAgICAgdmFyIGlzX2VuY29kZTtcblxuICAgICAgICBpZiAobW0uaXNfb193ZWJ2aWV3KSB7XG4gICAgICAgICAgICBpc19lbmNvZGUgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG1tLmNvbXBhcmUoJzcuMC45JykgPj0gMCAmJiBtbS5jb21wYXJlKHsgaW9zOiAnNy40LjEnLCBhbmRyb2lkOiAnNy43JyB9KSA8IDApIHtcbiAgICAgICAgICAgIGlzX2VuY29kZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzX2VuY29kZSkge1xuICAgICAgICAgICAgcGFyYW0uZW5jb2RlID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdDYWxsYmFjayA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgICAgICBpZiAoaXNfZW5jb2RlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvZGVJbmZvID0gd2luZG93LmF0b2IoaW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIGNvZGVJbmZvID0gZXNjYXBlKGNvZGVJbmZvKTsgIC8vIGF0b2LpjZrluq/ntJ3mvrbli63mgormtpPuhZ/mnoNcbiAgICAgICAgICAgICAgICAgICAgY29kZUluZm8gPSBkZWNvZGVVUklDb21wb25lbnQoY29kZUluZm8pO1xuICAgICAgICAgICAgICAgICAgICBpbmZvID0gSlNPTi5wYXJzZShjb2RlSW5mbyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGluZm8gPT0gJ3N0cmluZycgJiYgbW0ucGxhdGZvcm0gPT0gJ2FuZHJvaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29kZUluZm8gPSBkZWNvZGVVUklDb21wb25lbnQoaW5mbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvID0gSlNPTi5wYXJzZShjb2RlSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5mbyA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvZGVJbmZvID0gaW5mby5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcdC9nLCAnXFxcXHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxmL2csICdcXFxcZicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx4MDAtXFx4MUZcXHg3Ri1cXHg5Rl0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mbyA9IEpTT04ucGFyc2UoY29kZUluZm8pO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwobnVsbCwgaW5mbyk7XG4gICAgICAgIH1cblxuICAgICAgICBtbS5idWlsZCh7XG4gICAgICAgICAgICBjb21tb246IFsnaHR0cCcsICdyZXF1ZXN0JywgcGFyYW0sIG5ld0NhbGxiYWNrXVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AZmVzL21vLWJyaWRnZS9saWIvaHR0cC5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 本地存储\nvar mm = __webpack_require__(0);\nmm.storage = {\n    // 获取某条数据\n    /*\n        @param params {Object}\n        //callid: String    // 用来标示请求id, 返回时把该值传回\n        host: String  // 如果host不为空, 且是该页面的域名的父域名, 则往host写, 如果为空则往页面的域名写, 其他为错误\n        path: String  // 区分业务\n        key: String     // 数据对应的key\n        */\n    getItem: function(param,callback){\n        /*{\n            host:\n            path:\n            key: '',\n            value: ''\n        }*/\n        if(!mm.is_mk){\n            var _val = localStorage.getItem(param.key);\n            callback(_val);\n            return;\n        }\n\n        mm.build({\n            common: ['storage','getItem',param,callback]\n        })\n    },\n    setItem: function(param){\n        param.value += '';\n        if(!mm.is_mk){\n            localStorage.setItem(param.key, param.value);\n            return;\n        }\n        if(param.value.length > 100 && mm.compare(7.6) >= 0){\n            throw \"setItem 字符超长\"\n        }\n        mm.build({\n            common: ['storage','setItem',param]\n        })\n    },\n    removeItem: function(param){\n        if(!mm.is_mk){\n            localStorage.removeItem(param.path+param.key);\n            return;\n        }\n        mm.build({\n            common: ['storage','removeItem',param]\n        })\n    },\n    clearItem: function(param){\n        if(!mm.is_mk){\n            localStorage.clear();\n            return;\n        }\n        var name = 'clearItem';\n        if (mm.platform == 'ios' && mm.compare(6.8) <= 0) {\n            name = 'clear';\n        }\n        mm.build({\n            common: ['storage',name,param]\n        })\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0BmZXMvbW8tYnJpZGdlL2xpYi9zdG9yYWdlLmpzP2U2ZjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8g5pys5Zyw5a2Y5YKoXG52YXIgbW0gPSByZXF1aXJlKCcuL2NvcmUuanMnKTtcbm1tLnN0b3JhZ2UgPSB7XG4gICAgLy8g6I635Y+W5p+Q5p2h5pWw5o2uXG4gICAgLypcbiAgICAgICAgQHBhcmFtIHBhcmFtcyB7T2JqZWN0fVxuICAgICAgICAvL2NhbGxpZDogU3RyaW5nICAgIC8vIOeUqOadpeagh+ekuuivt+axgmlkLCDov5Tlm57ml7bmioror6XlgLzkvKDlm55cbiAgICAgICAgaG9zdDogU3RyaW5nICAvLyDlpoLmnpxob3N05LiN5Li656m6LCDkuJTmmK/or6XpobXpnaLnmoTln5/lkI3nmoTniLbln5/lkI0sIOWImeW+gGhvc3TlhpksIOWmguaenOS4uuepuuWImeW+gOmhtemdoueahOWfn+WQjeWGmSwg5YW25LuW5Li66ZSZ6K+vXG4gICAgICAgIHBhdGg6IFN0cmluZyAgLy8g5Yy65YiG5Lia5YqhXG4gICAgICAgIGtleTogU3RyaW5nICAgICAvLyDmlbDmja7lr7nlupTnmoRrZXlcbiAgICAgICAgKi9cbiAgICBnZXRJdGVtOiBmdW5jdGlvbihwYXJhbSxjYWxsYmFjayl7XG4gICAgICAgIC8qe1xuICAgICAgICAgICAgaG9zdDpcbiAgICAgICAgICAgIHBhdGg6XG4gICAgICAgICAgICBrZXk6ICcnLFxuICAgICAgICAgICAgdmFsdWU6ICcnXG4gICAgICAgIH0qL1xuICAgICAgICBpZighbW0uaXNfbWspe1xuICAgICAgICAgICAgdmFyIF92YWwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwYXJhbS5rZXkpO1xuICAgICAgICAgICAgY2FsbGJhY2soX3ZhbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBtbS5idWlsZCh7XG4gICAgICAgICAgICBjb21tb246IFsnc3RvcmFnZScsJ2dldEl0ZW0nLHBhcmFtLGNhbGxiYWNrXVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgc2V0SXRlbTogZnVuY3Rpb24ocGFyYW0pe1xuICAgICAgICBwYXJhbS52YWx1ZSArPSAnJztcbiAgICAgICAgaWYoIW1tLmlzX21rKXtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHBhcmFtLmtleSwgcGFyYW0udmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKHBhcmFtLnZhbHVlLmxlbmd0aCA+IDEwMCAmJiBtbS5jb21wYXJlKDcuNikgPj0gMCl7XG4gICAgICAgICAgICB0aHJvdyBcInNldEl0ZW0g5a2X56ym6LaF6ZW/XCJcbiAgICAgICAgfVxuICAgICAgICBtbS5idWlsZCh7XG4gICAgICAgICAgICBjb21tb246IFsnc3RvcmFnZScsJ3NldEl0ZW0nLHBhcmFtXVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgcmVtb3ZlSXRlbTogZnVuY3Rpb24ocGFyYW0pe1xuICAgICAgICBpZighbW0uaXNfbWspe1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0ocGFyYW0ucGF0aCtwYXJhbS5rZXkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1tLmJ1aWxkKHtcbiAgICAgICAgICAgIGNvbW1vbjogWydzdG9yYWdlJywncmVtb3ZlSXRlbScscGFyYW1dXG4gICAgICAgIH0pXG4gICAgfSxcbiAgICBjbGVhckl0ZW06IGZ1bmN0aW9uKHBhcmFtKXtcbiAgICAgICAgaWYoIW1tLmlzX21rKXtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lID0gJ2NsZWFySXRlbSc7XG4gICAgICAgIGlmIChtbS5wbGF0Zm9ybSA9PSAnaW9zJyAmJiBtbS5jb21wYXJlKDYuOCkgPD0gMCkge1xuICAgICAgICAgICAgbmFtZSA9ICdjbGVhcic7XG4gICAgICAgIH1cbiAgICAgICAgbW0uYnVpbGQoe1xuICAgICAgICAgICAgY29tbW9uOiBbJ3N0b3JhZ2UnLG5hbWUscGFyYW1dXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AZmVzL21vLWJyaWRnZS9saWIvc3RvcmFnZS5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 界面\nvar mm = __webpack_require__(0);\n\nmm.init = function () {\n    mm.ui.setUIBtn();\n}\n\nvar hasRefreshed = true;\nmm.ui = {\n    setBackBtn: function (callback) {\n        mm.build({\n            common: ['ui', 'setBackBtn', {}, callback]\n        })\n    },\n    /*\n        打开链接\n        */\n\n    openUrl: function (param) {\n        var url = param.url;\n        var is_old = mm.compare('6.11') < 0;\n        if (param.target == 3) {\n            if (is_old) {\n                location.href = 'momochat://immomo.com?goto=' + encodeURIComponent(url);\n                return false;\n            }\n\n            mm.ui.openGoto({\n                param: url\n            })\n            return false;\n        }\n\n        if (!mm.is_webview) {\n            setTimeout(function () {\n                window.location.href = url;\n            }, 20);\n            return false;\n        }\n\n        if (/^momochat/.test(url)) {\n            if (is_old) {\n                location.href = url;\n                return false;\n            }\n            var reg = new RegExp(\"(^|&)goto=([^&]*)(&|$)\");\n            var pos = url.indexOf('?');\n            var r = url.indexOf('?') >= 0 ? url.substring(pos + 1).match(reg) : null;\n            if (r != null) {\n                mm.ui.openGoto({\n                    param: decodeURIComponent(r[2])\n                })\n            } else {\n                console.warn('openUrl参数出错');\n            }\n            return false;\n        }\n\n        var is_http = /^http/.test(url);\n\n        if (!is_http) {\n            var hashIndex = url.indexOf('#');\n            var hash = hashIndex > -1 ? url.substring(hashIndex) : '';\n\n            url = url.replace(hash, '');\n\n            var n = url.indexOf('?');\n            var search = n > -1 ? url.substring(n) : '';\n            /*\n             * 如果当前为mk webview，\n             * url参数不包含_bid，\n             * 当前页面的bid参数不为空，\n             * 则添加_bid参数\n             * */\n            if (mm.is_mk && search.indexOf('_bid=') == -1 && mm.bid !== '') {\n                url += url.indexOf('?') == -1 ? '?' : '&';\n                url += '_bid=' + mm.bid;\n            }\n            /*\n             * 如果在新webview、外部浏览器打开url\n             * 则添加域名和路径\n             * */\n            if (param.target > 0) {\n                if (!/^\\//.test(url)) {\n                    var len = mm.pathname.lastIndexOf('/');\n                    if (len > 0) {\n                        var str = mm.pathname.substring(len + 1);\n                        url = mm.pathname.replace(str, '') + url;\n                    } else {\n                        url = '/' + url;\n                    }\n                }\n                url = mm.protocol + '//' + mm.host + url;\n            }\n            url += hash;\n            param.url = url;\n        }\n\n        switch (param.target) {\n            case 0:\n                /*\n                 * 如果是跟目录路径，\n                 * 则添加域名\n                 * */\n                if (!is_http && /^\\//.test(url)) {\n                    url = mm.protocol + '//' + mm.host + url;\n                }\n                window.location.href = url;\n                return false;\n                break;\n            case 1:\n                if (param.pass) {\n                    param.url = 'https://passport.immomo.com/authorize?redirect_uri=' + encodeURIComponent(param.url);\n                }\n                if (is_old) {\n                    location.href = 'momochat://immomo.com?goto=[momo|url|' + encodeURIComponent(param.url) + ']';\n                    return;\n                }\n                if (!mm.is_mk) {\n                    mm.build({\n                        common: ['ui', 'directGoto', {\n                            param: '[momo|url|' + param.url + ']'\n                        }]\n                    });\n                    return;\n                }\n                break;\n            case 2:\n                if (!mm.is_mk) {\n                    mm.build({\n                        common: ['ui', 'openExternalBrowser', {\n                            url: param.url\n                        }]\n                    })\n                    return false;\n                }\n                break;\n        }\n        mm.build({\n            common: ['ui', 'openUrl', param]\n        })\n    },\n    /*\n        title: '文本',    // goto 规则中的title\n        type: 'goto_select_user',    // goto 的具体客户端页面。\n        param: { 'tab':'0','multi_select': 0},  // 传送给客户端页面的参数。\n        //   可以是一个 字符串 或者 对象\n        */\n    openGoto: function (param) {\n\n        var endParam = param.param;\n\n        if (mm.is_mk && mm.platform == 'ios') {\n            mm.build({\n                common: ['ui', 'openGoto', {\n                    goto: endParam\n                }]\n            });\n        } else {\n            mm.build({\n                common: ['ui', 'directGoto', {\n                    param: endParam\n                }]\n            });\n        }\n    },\n    openLinkInExternalBrowser: function (param) {\n        var name = mm.is_mk ? 'openLinkInExternalBrowser' : 'openExternalBrowser';\n        mm.build({\n            common: ['ui', name, param]\n        })\n    },\n    goBack: function (param) {\n        mm.build({\n            common: ['ui', 'goBack', param]\n        })\n    },\n    reload: function (param) {\n        if (mm.is_mk) {\n            mm.build({\n                common: ['ui', 'reload', param]\n            })\n        } else {\n            location.reload();\n        }\n    },\n    close: function (param) {\n        if (/momoPopup/.test(navigator.userAgent)) {\n            mm.ui.closePopup(param);\n            return;\n        }\n        var name = mm.is_mk ? 'close' : 'closeWindow';\n        //ios6.5.4 android 6.5.2 开始可以关闭多个webview\n        if (mm.platform == 'ios' && mm.compare('6.5.19') < 0) {\n            param = {};\n        };\n        if (mm.platform == 'android' && mm.compare('6.5.2') < 0) {\n            param = null;\n        };\n        mm.build({\n            common: ['ui', name, param]\n        })\n    },\n    closePopup: function (param) {\n        mm.build({\n            common: ['ui', 'closePopup', param]\n        })\n    },\n    showNavBar: function () {\n        var name = mm.is_mk ? 'showNavBar' : 'showTitleBar';\n        mm.build({\n            common: ['ui', name, {}]\n        })\n    },\n    hideNavBar: function () {\n        var name = mm.is_mk ? 'hideNavBar' : 'hideTitleBar';\n        mm.build({\n            common: ['ui', name, {}]\n        })\n    },\n    postMessage: function (param) {\n        if (!/^bn/.test(param.name) && !param.target) {\n            param.target = '*';\n        }\n        mm.build({\n            common: ['ui', 'postMessage', param]\n        })\n    },\n    showKeyboard: function (param) {\n        mm.build({\n            common: ['ui', 'showKeyboard', param]\n        })\n    },\n    showMessage: function (param) {\n        mm.build({\n            common: ['ui', 'showMessage', param]\n        })\n    },\n    showConfirm: function (param) {\n        var newCallback = function (resp) {\n            if (!resp) return;\n            switch (resp.button) {\n                case 0:\n                    param.cancel && param.cancel();\n                    break;\n                case 1:\n                    param.callback1 && param.callback1();\n                    break;\n                case 2:\n                    param.callback2 && param.callback2();\n                    break;\n                default:\n                    break;\n            }\n            param.finish && param.finish(resp);\n        }\n\n        mm.build({\n            common: ['ui', 'showConfirm', param, newCallback]\n        })\n    },\n    setUI: function (param) {\n        var name = mm.is_mk ? 'setUI' : 'setTitleBarUI';\n        mm.build({\n            common: ['ui', name, param],\n            version: {\n                ios: '6.5.1',\n                android: '6.5.1'\n            }\n        })\n    },\n    setTitle: function (param) {\n        if (param && param.title) {\n            document.title = param.title;\n        }\n        mm.build({\n            common: ['ui', 'setTitle', param]\n        })\n    },\n    setPulldown: function (param) {\n        mm.build({\n            common: ['ui', 'setPulldown', param]\n        })\n    },\n    setUIBtn: function (param, callback) {\n        if (mm.is_mk) {\n            /*\n                如果是mk的webview，使用新方法 setActBtn\n                */\n            mm.build({\n                common: ['ui', 'setUIBtn', param, callback]\n            })\n        } else {\n            /*\n                如果不是mk的webview，使用init方法\n                */\n            if (param) {\n                var cb;\n                if (callback) {\n                    cb = {\n                        callback: mm.createCallback('init', callback)\n                    };\n                } else {\n                    cb = {};\n                }\n                var newParam = {\n                    enable: {\n                        back: 0, // 后退按钮\n                        forward: 0, // 前进\n                        refresh: 0, // 刷新\n                        share: param.action || 0, // 分享按钮\n                        scrollbar: 1, // 原生滚动条显隐 (注：这里对垂直和水平滚动条都不显示)\n                        ui_btn: 1 // 右上角复合按钮显隐。(最高优先级，和share互斥)\n                    },\n                    ui_btn: {\n                        title: param.title,\n                        buttons: [{\n                            text: param.title,\n                            action: param.action || 0,\n                            param: cb\n                        }]\n                    }\n                };\n                mm.build({\n                    common: ['ui', 'init', newParam]\n                })\n            } else {\n                /*\n                    如果param为空，清空右上角按钮\n                    */\n                mm.build({\n                    android: ['ui', 'init', {\n                        enable: {\n                            back: 0,\n                            forward: 0,\n                            refresh: 0,\n                            share: 0,\n                            scrollbar: 0,\n                            ui_btn: 0\n                        },\n                        ui_btn: {\n                            buttons: [{\n                                text: '',\n                                action: 0\n                            }]\n                        }\n                    }],\n                    ios: ['ui', 'init', {\n                        enable: {\n                            back: 0,\n                            forward: 0,\n                            refresh: 0,\n                            share: 0,\n                            scrollbar: 0,\n                            ui_btn: 0\n                        }\n                    }]\n                })\n            }\n        }\n    },\n    setUIGroup: function (param) {\n        var newCallback = function (resp) {\n            if (resp && typeof resp.btn != 'undefined') {\n                param.btns[resp.btn].callback(resp)\n            }\n        }\n        mm.build({\n            common: ['ui', 'setUIGroup', param, newCallback],\n            need_mk: true,\n            version: {\n                ios: '7.3.9',\n                android: '7.3.9'\n            }\n        })\n    },\n    clearPageCover: function (callback) {\n        if (!mm.is_mk || mm.platform != 'ios') return;\n\n        mm.build({\n            common: ['ui', 'clearPageCover', {}, callback]\n        })\n    },\n    getVisibility: function (callback) {\n        mm.build({\n            common: ['ui', 'getVisibility', {}, callback],\n            version: {\n                ios: '6.6.3',\n                android: '6.6.1'\n            }\n        })\n    },\n    /* 下拉刷新 */\n    refresh: function (callback) {\n        hasRefreshed = true;\n        var t;\n        var reTime = function () {\n            if (!hasRefreshed) {\n                mm.ui.refreshEnd();\n            }\n        }\n        var newCallback = function () {\n            hasRefreshed = false;\n            clearTimeout(t);\n            t = setTimeout(reTime, 16000);\n\n            setTimeout(function () {\n                callback && callback.call(null);\n            }, 0)\n        }\n        mm.build({\n            common: ['ui', 'refresh', {}, newCallback]\n        })\n    },\n    /* 下拉刷新结束 */\n    refreshEnd: function () {\n        hasRefreshed = true;\n        mm.build({\n            common: ['ui', 'refreshEnd', {}]\n        })\n    }\n}\n\n// 分享\nmm.share = {\n    showPanel: function (param, callback) {\n        if (typeof callback == 'undefined') {\n            callback = function () {};\n        }\n        var name = mm.is_mk ? 'showPanel' : 'callShare';\n\n        if (param) {\n            var projectArr = ['title', 'text', 'url', 'pic'];\n            var configs = param.configs;\n\n            if (configs) {\n                /*\n                    分享到动态，如果没有参数sdk：\n                    1. 如果有大图，默认走服务器下发 sdk=0\n                    2. 如果没有大图，默认走sdk分享 sdk=1，分享的默认文字为参数sdk_text\n                */\n\n                if (configs.momo_feed) {\n                    var feed = configs.momo_feed;\n\n                    if (typeof feed.sdk == 'undefined' && !feed.pic && feed.resource) {\n                        feed.sdk = 1;\n                    }\n                }\n\n                for (var k in configs) {\n                    projectArr.forEach(function (pro) {\n                        if (!configs[k].hasOwnProperty(pro) && param[pro]) {\n                            configs[k][pro] = param[pro];\n                        }\n                    });\n                }\n                if (configs.momo_contacts) {\n                    !configs.momo_friend && (configs.momo_friend = configs.momo_contacts);\n                    !configs.momo_discuss && (configs.momo_discuss = configs.momo_contacts);\n                    !configs.momo_group && (configs.momo_group = configs.momo_contacts);\n                }\n            }\n        }\n\n        mm.build({\n            common: ['share', name, param, callback]\n        })\n    },\n    toApp: function (param, callback) {\n        var name = mm.is_mk ? 'toApp' : 'shareOne';\n\n        if (param.app == 'momo_feed') {\n            /*\n                分享到动态，如果没有参数sdk：\n                1. 如果有大图，默认走服务器下发 sdk=0\n                2. 如果没有大图，默认走sdk分享 sdk=1，分享的默认文字为参数sdk_text\n            */\n\n            if (typeof param.sdk == 'undefined' && !param.pic && param.resource) {\n                param.sdk = 1;\n            }\n        }\n        mm.build({\n            common: ['share', name, param, callback]\n        })\n    },\n    // showPanel: function (param, callback) {\n    //     mm.build({\n    //         common: ['ui', 'showPanel', param, callback]\n    //     })\n    // },\n    displayGift: function (param, callback) {\n        mm.build({\n            common: ['ui', 'displayGift', param, callback]\n        })\n    },\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _vueRuntime = __webpack_require__(16);\n\nvar _vueRuntime2 = _interopRequireDefault(_vueRuntime);\n\nvar _core = __webpack_require__(14);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _weexVueRender = __webpack_require__(17);\n\nvar _weexVueRender2 = _interopRequireDefault(_weexVueRender);\n\nvar _moBridge = __webpack_require__(13);\n\nvar _moBridge2 = _interopRequireDefault(_moBridge);\n\nvar _App = __webpack_require__(15);\n\nvar _App2 = _interopRequireDefault(_App);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_weexVueRender2.default.init(_vueRuntime2.default);\n_vueRuntime2.default.use(_moBridge2.default);\n_vueRuntime2.default.use(_core2.default);\n\n_App2.default.el = '#root';\nnew _vueRuntime2.default(_App2.default);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2VudHJpZXMvQXBwL0FwcC53ZWIuanM/MGZkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmNvbW1vbidcbmltcG9ydCBtd3MgZnJvbSAnQGZlcy9td3MtdnVlLWxvYWRlci9saWIvcHJvZmlsZXIvY29yZS5qcydcbmltcG9ydCB3ZWV4IGZyb20gJ3dlZXgtdnVlLXJlbmRlcidcbmltcG9ydCBtb0JyaWRnZSBmcm9tICdAZmVzL21vLWJyaWRnZSdcbndlZXguaW5pdChWdWUpXG5WdWUudXNlKG1vQnJpZGdlKVxuVnVlLnVzZShtd3MpXG5pbXBvcnQgQXBwIGZyb20gJy4uLy4uL3BhZ2VzL0FwcC52dWUnXG5BcHAuZWwgPSAnI3Jvb3QnXG5uZXcgVnVlKEFwcClcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvZW50cmllcy9BcHAvQXBwLndlYi5qcz9lbnRyeT10cnVlIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUdBO0FBQ0E7Ozs7O0FBSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(23), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzP2U2Y2EiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ25cIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(49);\nmodule.exports = __webpack_require__(2).Object.assign;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzPzgwZTQiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports) {

eval("module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzP2Q1M2UiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(6);\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanM/MGRhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

eval("// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(12);\nvar toLength = __webpack_require__(45);\nvar toAbsoluteIndex = __webpack_require__(44);\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcz82MTk5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanM/NDhlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

eval("// optional / simple context binding\nvar aFunction = __webpack_require__(24);\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanM/Y2UwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(6);\nvar document = __webpack_require__(5).document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzP2FiNDQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

eval("// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzPzc1OTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

eval("var global = __webpack_require__(5);\nvar core = __webpack_require__(2);\nvar ctx = __webpack_require__(28);\nvar hide = __webpack_require__(32);\nvar has = __webpack_require__(9);\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanM/ZWNlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

eval("var dP = __webpack_require__(36);\nvar createDesc = __webpack_require__(41);\nmodule.exports = __webpack_require__(3) ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzP2E2ZGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = !__webpack_require__(3) && !__webpack_require__(4)(function () {\n  return Object.defineProperty(__webpack_require__(29)('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcz9iZDFmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports) {

eval("module.exports = true;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzPzJjODAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = __webpack_require__(39);\nvar gOPS = __webpack_require__(37);\nvar pIE = __webpack_require__(40);\nvar toObject = __webpack_require__(46);\nvar IObject = __webpack_require__(10);\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __webpack_require__(4)(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzPzVjMGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

eval("var anObject = __webpack_require__(25);\nvar IE8_DOM_DEFINE = __webpack_require__(33);\nvar toPrimitive = __webpack_require__(47);\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(3) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanM/NDExNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanNcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

eval("exports.f = Object.getOwnPropertySymbols;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcz9hNWZiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

eval("var has = __webpack_require__(9);\nvar toIObject = __webpack_require__(12);\nvar arrayIndexOf = __webpack_require__(26)(false);\nvar IE_PROTO = __webpack_require__(42)('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcz9mY2VhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = __webpack_require__(38);\nvar enumBugKeys = __webpack_require__(30);\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcz9mNWJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports) {

eval("exports.f = {}.propertyIsEnumerable;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzP2QwZDIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports) {

eval("module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzPzFlODYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

eval("var shared = __webpack_require__(43)('keys');\nvar uid = __webpack_require__(48);\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzPzJhNmMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

eval("var core = __webpack_require__(2);\nvar global = __webpack_require__(5);\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: __webpack_require__(34) ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanM/N2I2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

eval("var toInteger = __webpack_require__(11);\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcz8yOTAwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.15 ToLength\nvar toInteger = __webpack_require__(11);\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanM/NjJhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(8);\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanM/YjVjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(6);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanM/NDlhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, exports) {

eval("var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanM/ZThjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.3.1 Object.assign(target, source)\nvar $export = __webpack_require__(31);\n\n$export($export.S + $export.F, 'Object', { assign: __webpack_require__(35) });\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzPzkwMDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(51)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"\", {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"App.vue\",\"sourceRoot\":\"\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvQXBwLnZ1ZT8yMjRiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJmaWxlXCI6XCJBcHAudnVlXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi05OTIwOTJhNlwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvcGFnZXMvQXBwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function() {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\tvar result = [];\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar item = this[i];\n\t\t\tif(item[2]) {\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\n\t\t\t} else {\n\t\t\t\tresult.push(item[1]);\n\t\t\t}\n\t\t}\n\t\treturn result.join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXN1bHQucHVzaChcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGl0ZW1bMV0gKyBcIn1cIik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, exports) {

eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHJhd1NjcmlwdEV4cG9ydHMsXG4gIGNvbXBpbGVkVGVtcGxhdGUsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyIC8qIHNlcnZlciBvbmx5ICovXG4pIHtcbiAgdmFyIGVzTW9kdWxlXG4gIHZhciBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgfHwge31cblxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXG4gIHZhciB0eXBlID0gdHlwZW9mIHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVzTW9kdWxlID0gcmF3U2NyaXB0RXhwb3J0c1xuICAgIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgfVxuXG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAoY29tcGlsZWRUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gY29tcGlsZWRUZW1wbGF0ZS5yZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICB2YXIgZnVuY3Rpb25hbCA9IG9wdGlvbnMuZnVuY3Rpb25hbFxuICAgIHZhciBleGlzdGluZyA9IGZ1bmN0aW9uYWxcbiAgICAgID8gb3B0aW9ucy5yZW5kZXJcbiAgICAgIDogb3B0aW9ucy5iZWZvcmVDcmVhdGVcblxuICAgIGlmICghZnVuY3Rpb25hbCkge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb2FsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBleGlzdGluZyhoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXNNb2R1bGU6IGVzTW9kdWxlLFxuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"h1\", [_vm._v(\"MWS测试页面\")]),\n      _vm._v(\" \"),\n      _c(\"polygon\", [_vm._v(\"111\")]),\n      _vm._v(\" \"),\n      _c(\"richText\", { attrs: { tel: \"12305\" } }, [_vm._v(\"12305\")])\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-992092a6\", esExports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvQXBwLnZ1ZT82MWZjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICBbXG4gICAgICBfYyhcImgxXCIsIFtfdm0uX3YoXCJNV1PmtYvor5XpobXpnaJcIildKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcInBvbHlnb25cIiwgW192bS5fdihcIjExMVwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwicmljaFRleHRcIiwgeyBhdHRyczogeyB0ZWw6IFwiMTIzMDVcIiB9IH0sIFtfdm0uX3YoXCIxMjMwNVwiKV0pXG4gICAgXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LTk5MjA5MmE2XCIsIGVzRXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTk5MjA5MmE2XCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9wYWdlcy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(50);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(55)(\"09e7fad2\", content, false, {});\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-992092a6\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-992092a6\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvQXBwLnZ1ZT9kMzc0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi05OTIwOTJhNlxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiMDllN2ZhZDJcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTk5MjA5MmE2XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BcHAudnVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTk5MjA5MmE2XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BcHAudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTk5MjA5MmE2XCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9wYWdlcy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSA1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(56)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/***/ (function(module, exports) {

eval("/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcz9lNmFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChwYXJlbnRJZCwgbGlzdCkge1xuICB2YXIgc3R5bGVzID0gW11cbiAgdmFyIG5ld1N0eWxlcyA9IHt9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIHZhciBpZCA9IGl0ZW1bMF1cbiAgICB2YXIgY3NzID0gaXRlbVsxXVxuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl1cbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXVxuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgaWQ6IHBhcmVudElkICsgJzonICsgaSxcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9XG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0geyBpZDogaWQsIHBhcnRzOiBbcGFydF0gfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpXG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZXNcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyL2xpYi9saXN0VG9TdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///56\n");

/***/ }),
/* 57 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57\n");

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(57)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///58\n");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(58);\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL3Vzci9sb2NhbC9saWIvfi9AZmVzL213cy1jbGkvfi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzPzAzYzMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdXNyL2xvY2FsL2xpYi9+L0BmZXMvbXdzLWNsaS9+L3RpbWVycy1icm93c2VyaWZ5L21haW4uanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///59\n");

/***/ })
/******/ ]);